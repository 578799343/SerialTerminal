
sed1335_MEGA16.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000023d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000058  00800060  000023d6  0000244a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000045  008000b8  0000242e  000024a2  2**0
                  ALLOC
  3 .stab         000014ac  00000000  00000000  000024a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000392  00000000  00000000  00003950  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000120  00000000  00000000  00003ce2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000034e  00000000  00000000  00003e02  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000136e  00000000  00000000  00004150  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000962  00000000  00000000  000054be  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001bf8  00000000  00000000  00005e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002f0  00000000  00000000  00007a18  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000519  00000000  00000000  00007d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001810  00000000  00000000  00008221  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 65 00 	jmp	0xca	; 0xca <__ctors_end>
       4:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
       8:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
       c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      10:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      14:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      18:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      1c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      20:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      24:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      28:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      2c:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__vector_11>
      30:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__vector_12>
      34:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      38:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      3c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      40:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      44:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      48:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      4c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      50:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>

00000054 <__c.2122>:
      54:	61 70 74 2d 67 65 74 20 61 75 74 6f 72 65 6d 6f     apt-get autoremo
      64:	76 65 20 26 26 20 61 70 74 2d 67 65 74 20 61 75     ve && apt-get au
      74:	74 6f 63 6c 65 61 6e 20 26 26 20 61 70 74 2d 67     toclean && apt-g
      84:	65 74 20 63 6c 65 61 6e 0a 0d 00                    et clean...

0000008f <__c.2119>:
      8f:	61 70 74 2d 67 65 74 20 64 69 73 74 2d 75 70 67     apt-get dist-upg
      9f:	72 61 64 65 0a 0d 00                                rade...

000000a6 <__c.2116>:
      a6:	61 70 74 2d 67 65 74 20 75 70 67 72 61 64 65 0a     apt-get upgrade.
      b6:	0d 00                                               ..

000000b8 <__c.2113>:
      b8:	61 70 74 2d 67 65 74 20 75 70 64 61 74 65 0a 0d     apt-get update..
	...

000000ca <__ctors_end>:
      ca:	11 24       	eor	r1, r1
      cc:	1f be       	out	0x3f, r1	; 63
      ce:	cf e5       	ldi	r28, 0x5F	; 95
      d0:	d4 e0       	ldi	r29, 0x04	; 4
      d2:	de bf       	out	0x3e, r29	; 62
      d4:	cd bf       	out	0x3d, r28	; 61

000000d6 <__do_copy_data>:
      d6:	10 e0       	ldi	r17, 0x00	; 0
      d8:	a0 e6       	ldi	r26, 0x60	; 96
      da:	b0 e0       	ldi	r27, 0x00	; 0
      dc:	e6 ed       	ldi	r30, 0xD6	; 214
      de:	f3 e2       	ldi	r31, 0x23	; 35
      e0:	02 c0       	rjmp	.+4      	; 0xe6 <.do_copy_data_start>

000000e2 <.do_copy_data_loop>:
      e2:	05 90       	lpm	r0, Z+
      e4:	0d 92       	st	X+, r0

000000e6 <.do_copy_data_start>:
      e6:	a8 3b       	cpi	r26, 0xB8	; 184
      e8:	b1 07       	cpc	r27, r17
      ea:	d9 f7       	brne	.-10     	; 0xe2 <.do_copy_data_loop>

000000ec <__do_clear_bss>:
      ec:	10 e0       	ldi	r17, 0x00	; 0
      ee:	a8 eb       	ldi	r26, 0xB8	; 184
      f0:	b0 e0       	ldi	r27, 0x00	; 0
      f2:	01 c0       	rjmp	.+2      	; 0xf6 <.do_clear_bss_start>

000000f4 <.do_clear_bss_loop>:
      f4:	1d 92       	st	X+, r1

000000f6 <.do_clear_bss_start>:
      f6:	ad 3f       	cpi	r26, 0xFD	; 253
      f8:	b1 07       	cpc	r27, r17
      fa:	e1 f7       	brne	.-8      	; 0xf4 <.do_clear_bss_loop>
      fc:	0e 94 92 00 	call	0x124	; 0x124 <main>
     100:	0c 94 ea 11 	jmp	0x23d4	; 0x23d4 <_exit>

00000104 <__bad_interrupt>:
     104:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000108 <delay_ms>:
#include "ps2.h"		// PS2-Keyboard
#include "keyboard.h"		// Key-/Scancodes


/* Delay/Sleep Funktion */
void delay_ms(int ms) {
     108:	ac 01       	movw	r20, r24
     10a:	20 e0       	ldi	r18, 0x00	; 0
     10c:	30 e0       	ldi	r19, 0x00	; 0
     10e:	06 c0       	rjmp	.+12     	; 0x11c <delay_ms+0x14>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     110:	80 ed       	ldi	r24, 0xD0	; 208
     112:	97 e0       	ldi	r25, 0x07	; 7
     114:	01 97       	sbiw	r24, 0x01	; 1
     116:	f1 f7       	brne	.-4      	; 0x114 <delay_ms+0xc>
  int t;
  for(t=0; t<=ms; t++)
     118:	2f 5f       	subi	r18, 0xFF	; 255
     11a:	3f 4f       	sbci	r19, 0xFF	; 255
     11c:	42 17       	cp	r20, r18
     11e:	53 07       	cpc	r21, r19
     120:	bc f7       	brge	.-18     	; 0x110 <delay_ms+0x8>
     122:	08 95       	ret

00000124 <main>:
}


/* Hauptprogramm */
int main(void)
{
     124:	ca e5       	ldi	r28, 0x5A	; 90
     126:	d4 e0       	ldi	r29, 0x04	; 4
     128:	de bf       	out	0x3e, r29	; 62
     12a:	cd bf       	out	0x3d, r28	; 61
	PORTB = 0;
    #endif


    /* initialisiere LCD */
    GLCD_Initialize();
     12c:	0e 94 97 04 	call	0x92e	; 0x92e <GLCD_Initialize>
    GLCD_ClearText();
     130:	0e 94 97 03 	call	0x72e	; 0x72e <GLCD_ClearText>
    GLCD_ClearGraphic();
     134:	0e 94 c3 02 	call	0x586	; 0x586 <GLCD_ClearGraphic>
    DDRD |= 0x30;						//OC1A+OC1B -> Ausgänge
     138:	81 b3       	in	r24, 0x11	; 17
     13a:	80 63       	ori	r24, 0x30	; 48
     13c:	81 bb       	out	0x11, r24	; 17
    TCCR1A = (1<<WGM10)|(1<<COM1A1)|(1<<COM1B1);		//Standard-PWM...
     13e:	81 ea       	ldi	r24, 0xA1	; 161
     140:	8f bd       	out	0x2f, r24	; 47
    TCCR1B = (1<<CS10);
     142:	81 e0       	ldi	r24, 0x01	; 1
     144:	8e bd       	out	0x2e, r24	; 46
    OCR1A=26;							//Kontrast
     146:	8a e1       	ldi	r24, 0x1A	; 26
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	9b bd       	out	0x2b, r25	; 43
     14c:	8a bd       	out	0x2a, r24	; 42
    OCR1B=100;							//Hintergrundbeleuchtung
     14e:	84 e6       	ldi	r24, 0x64	; 100
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	99 bd       	out	0x29, r25	; 41
     154:	88 bd       	out	0x28, r24	; 40

    /* initialisiere UART */
    sei();							//globale Interrupts einschalten
     156:	78 94       	sei
    uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) ); 	//initialisieren mit Baud und CPU-MHz
     158:	89 e1       	ldi	r24, 0x19	; 25
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	0e 94 43 02 	call	0x486	; 0x486 <uart_init>
     160:	99 24       	eor	r9, r9
     162:	00 e0       	ldi	r16, 0x00	; 0
					break;
		    }
		}
		else {						//Standardtasten auswerten
		    key = decodeChar(code);
		    sprintf(buffer, "%c", key);
     164:	30 e6       	ldi	r19, 0x60	; 96
     166:	a3 2e       	mov	r10, r19
     168:	30 e0       	ldi	r19, 0x00	; 0
     16a:	b3 2e       	mov	r11, r19
     16c:	6e 01       	movw	r12, r28
     16e:	08 94       	sec
     170:	c1 1c       	adc	r12, r1
     172:	d1 1c       	adc	r13, r1
     174:	22 ea       	ldi	r18, 0xA2	; 162
     176:	22 2e       	mov	r2, r18
     178:	20 e0       	ldi	r18, 0x00	; 0
     17a:	32 2e       	mov	r3, r18
     17c:	98 e7       	ldi	r25, 0x78	; 120
     17e:	69 2e       	mov	r6, r25
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	79 2e       	mov	r7, r25
     184:	86 e6       	ldi	r24, 0x66	; 102
     186:	48 2e       	mov	r4, r24
     188:	80 e0       	ldi	r24, 0x00	; 0
     18a:	58 2e       	mov	r5, r24

    /* Hauptschleife */
    for( ;; )
    {
	//uart_putc( '!' );
        uart_in = uart_getc();					//Daten von UART empfangen
     18c:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <uart_getc>
     190:	7c 01       	movw	r14, r24
        if( uart_in & UART_NO_DATA ) {				//keine Daten von UART verfügbar
     192:	90 ff       	sbrs	r25, 0
     194:	c4 c0       	rjmp	.+392    	; 0x31e <main+0x1fa>

	    /* Hauptteil der Tastatur-Behandlung */
	    if( ((CLKPIN & (1<<CLK)) == 0) ) {
     196:	9f 99       	sbic	0x13, 7	; 19
     198:	f9 cf       	rjmp	.-14     	; 0x18c <main+0x68>
		#if DEBUG
		    PORTB |= (1 << 2);
		#endif
		code = Read_ps2data();
     19a:	0e 94 00 06 	call	0xc00	; 0xc00 <Read_ps2data>
     19e:	18 2f       	mov	r17, r24
		#if DEBUG
		    sprintf(buffer, "0x%x ", code);
		    GLCD_WriteText( buffer );
		    ///uart_puts( buffer );
		#endif
		key = decodeFunctionKey( code );
     1a0:	e8 2e       	mov	r14, r24
     1a2:	ff 24       	eor	r15, r15
     1a4:	c7 01       	movw	r24, r14
     1a6:	0e 94 d6 06 	call	0xdac	; 0xdac <decodeFunctionKey>
		if( key > 0 ) {					//Spezialtasten auswerten
     1aa:	88 23       	and	r24, r24
     1ac:	09 f4       	brne	.+2      	; 0x1b0 <main+0x8c>
     1ae:	9b c0       	rjmp	.+310    	; 0x2e6 <main+0x1c2>
		    switch( key ) {
     1b0:	89 30       	cpi	r24, 0x09	; 9
     1b2:	09 f4       	brne	.+2      	; 0x1b6 <main+0x92>
     1b4:	5c c0       	rjmp	.+184    	; 0x26e <main+0x14a>
     1b6:	8a 30       	cpi	r24, 0x0A	; 10
     1b8:	a8 f4       	brcc	.+42     	; 0x1e4 <main+0xc0>
     1ba:	84 30       	cpi	r24, 0x04	; 4
     1bc:	09 f4       	brne	.+2      	; 0x1c0 <main+0x9c>
     1be:	40 c0       	rjmp	.+128    	; 0x240 <main+0x11c>
     1c0:	85 30       	cpi	r24, 0x05	; 5
     1c2:	38 f4       	brcc	.+14     	; 0x1d2 <main+0xae>
     1c4:	82 30       	cpi	r24, 0x02	; 2
     1c6:	09 f4       	brne	.+2      	; 0x1ca <main+0xa6>
     1c8:	49 c0       	rjmp	.+146    	; 0x25c <main+0x138>
     1ca:	83 30       	cpi	r24, 0x03	; 3
     1cc:	09 f0       	breq	.+2      	; 0x1d0 <main+0xac>
     1ce:	8b c0       	rjmp	.+278    	; 0x2e6 <main+0x1c2>
     1d0:	3d c0       	rjmp	.+122    	; 0x24c <main+0x128>
     1d2:	86 30       	cpi	r24, 0x06	; 6
     1d4:	09 f4       	brne	.+2      	; 0x1d8 <main+0xb4>
     1d6:	6a c0       	rjmp	.+212    	; 0x2ac <main+0x188>
     1d8:	86 30       	cpi	r24, 0x06	; 6
     1da:	a8 f1       	brcs	.+106    	; 0x246 <main+0x122>
     1dc:	88 30       	cpi	r24, 0x08	; 8
     1de:	09 f0       	breq	.+2      	; 0x1e2 <main+0xbe>
     1e0:	82 c0       	rjmp	.+260    	; 0x2e6 <main+0x1c2>
     1e2:	5a c0       	rjmp	.+180    	; 0x298 <main+0x174>
     1e4:	81 31       	cpi	r24, 0x11	; 17
     1e6:	09 f4       	brne	.+2      	; 0x1ea <main+0xc6>
     1e8:	75 c0       	rjmp	.+234    	; 0x2d4 <main+0x1b0>
     1ea:	82 31       	cpi	r24, 0x12	; 18
     1ec:	48 f4       	brcc	.+18     	; 0x200 <main+0xdc>
     1ee:	8c 30       	cpi	r24, 0x0C	; 12
     1f0:	b1 f0       	breq	.+44     	; 0x21e <main+0xfa>
     1f2:	8d 30       	cpi	r24, 0x0D	; 13
     1f4:	09 f4       	brne	.+2      	; 0x1f8 <main+0xd4>
     1f6:	6e c0       	rjmp	.+220    	; 0x2d4 <main+0x1b0>
     1f8:	8a 30       	cpi	r24, 0x0A	; 10
     1fa:	09 f0       	breq	.+2      	; 0x1fe <main+0xda>
     1fc:	74 c0       	rjmp	.+232    	; 0x2e6 <main+0x1c2>
     1fe:	29 c0       	rjmp	.+82     	; 0x252 <main+0x12e>
     200:	84 31       	cpi	r24, 0x14	; 20
     202:	a1 f0       	breq	.+40     	; 0x22c <main+0x108>
     204:	8a 31       	cpi	r24, 0x1A	; 26
     206:	09 f4       	brne	.+2      	; 0x20a <main+0xe6>
     208:	3d c0       	rjmp	.+122    	; 0x284 <main+0x160>
     20a:	82 31       	cpi	r24, 0x12	; 18
     20c:	09 f0       	breq	.+2      	; 0x210 <main+0xec>
     20e:	6b c0       	rjmp	.+214    	; 0x2e6 <main+0x1c2>
     210:	51 c0       	rjmp	.+162    	; 0x2b4 <main+0x190>
			case KEY_ALT:		while( key == KEY_ALT) {
						    code = Read_ps2data();
     212:	0e 94 00 06 	call	0xc00	; 0xc00 <Read_ps2data>
     216:	18 2f       	mov	r17, r24
						    key = decodeFunctionKey( code );
     218:	99 27       	eor	r25, r25
     21a:	0e 94 d6 06 	call	0xdac	; 0xdac <decodeFunctionKey>
		    ///uart_puts( buffer );
		#endif
		key = decodeFunctionKey( code );
		if( key > 0 ) {					//Spezialtasten auswerten
		    switch( key ) {
			case KEY_ALT:		while( key == KEY_ALT) {
     21e:	8c 30       	cpi	r24, 0x0C	; 12
     220:	c1 f3       	breq	.-16     	; 0x212 <main+0xee>
						    code = Read_ps2data();
						    key = decodeFunctionKey( code );
						}
						key = decodeAlteredChar(code);
     222:	81 2f       	mov	r24, r17
     224:	99 27       	eor	r25, r25
     226:	0e 94 9c 0b 	call	0x1738	; 0x1738 <decodeAlteredChar>
     22a:	60 c0       	rjmp	.+192    	; 0x2ec <main+0x1c8>
						sprintf(buffer, "%c", key);
						uart_puts( buffer );
					break;
			case KEY_ENTER:		column=0;
						GLCD_TextGoTo( column, ++row );
     22c:	0f 5f       	subi	r16, 0xFF	; 255
     22e:	60 2f       	mov	r22, r16
     230:	80 e0       	ldi	r24, 0x00	; 0
     232:	0e 94 ef 02 	call	0x5de	; 0x5de <GLCD_TextGoTo>
						uart_puts( "\n\r" );
     236:	83 e6       	ldi	r24, 0x63	; 99
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	0e 94 87 02 	call	0x50e	; 0x50e <uart_puts>
     23e:	42 c0       	rjmp	.+132    	; 0x2c4 <main+0x1a0>
					break;
			case KEY_F1:		uart_puts_P( "apt-get update\n\r" );
     240:	88 eb       	ldi	r24, 0xB8	; 184
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	08 c0       	rjmp	.+16     	; 0x256 <main+0x132>
					break;
			case KEY_F2:		uart_puts_P( "apt-get upgrade\n\r" );
     246:	86 ea       	ldi	r24, 0xA6	; 166
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	05 c0       	rjmp	.+10     	; 0x256 <main+0x132>
					break;
			case KEY_F3:		uart_puts_P( "apt-get dist-upgrade\n\r" );
     24c:	8f e8       	ldi	r24, 0x8F	; 143
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	02 c0       	rjmp	.+4      	; 0x256 <main+0x132>
					break;
			case KEY_F4:		uart_puts_P( "apt-get autoremove && apt-get autoclean && apt-get clean\n\r" );
     252:	84 e5       	ldi	r24, 0x54	; 84
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	0e 94 94 02 	call	0x528	; 0x528 <uart_puts_p>
     25a:	5c c0       	rjmp	.+184    	; 0x314 <main+0x1f0>
					break;
			case KEY_F5:		if( OCR1A < 30 )
     25c:	8a b5       	in	r24, 0x2a	; 42
     25e:	9b b5       	in	r25, 0x2b	; 43
     260:	4e 97       	sbiw	r24, 0x1e	; 30
     262:	08 f0       	brcs	.+2      	; 0x266 <main+0x142>
     264:	57 c0       	rjmp	.+174    	; 0x314 <main+0x1f0>
						    OCR1A++;
     266:	8a b5       	in	r24, 0x2a	; 42
     268:	9b b5       	in	r25, 0x2b	; 43
     26a:	01 96       	adiw	r24, 0x01	; 1
     26c:	08 c0       	rjmp	.+16     	; 0x27e <main+0x15a>
					break;
			case KEY_F6:		if( OCR1A > 20 )
     26e:	8a b5       	in	r24, 0x2a	; 42
     270:	9b b5       	in	r25, 0x2b	; 43
     272:	45 97       	sbiw	r24, 0x15	; 21
     274:	08 f4       	brcc	.+2      	; 0x278 <main+0x154>
     276:	4e c0       	rjmp	.+156    	; 0x314 <main+0x1f0>
						    OCR1A--;
     278:	8a b5       	in	r24, 0x2a	; 42
     27a:	9b b5       	in	r25, 0x2b	; 43
     27c:	01 97       	sbiw	r24, 0x01	; 1
     27e:	9b bd       	out	0x2b, r25	; 43
     280:	8a bd       	out	0x2a, r24	; 42
     282:	48 c0       	rjmp	.+144    	; 0x314 <main+0x1f0>
					break;
			case KEY_F7:		if( OCR1B < 150 )
     284:	88 b5       	in	r24, 0x28	; 40
     286:	99 b5       	in	r25, 0x29	; 41
     288:	86 39       	cpi	r24, 0x96	; 150
     28a:	91 05       	cpc	r25, r1
     28c:	08 f0       	brcs	.+2      	; 0x290 <main+0x16c>
     28e:	42 c0       	rjmp	.+132    	; 0x314 <main+0x1f0>
						    OCR1B+=5; 
     290:	88 b5       	in	r24, 0x28	; 40
     292:	99 b5       	in	r25, 0x29	; 41
     294:	05 96       	adiw	r24, 0x05	; 5
     296:	07 c0       	rjmp	.+14     	; 0x2a6 <main+0x182>
					break;
			case KEY_F8:		if( OCR1B >= 5 )
     298:	88 b5       	in	r24, 0x28	; 40
     29a:	99 b5       	in	r25, 0x29	; 41
     29c:	05 97       	sbiw	r24, 0x05	; 5
     29e:	d0 f1       	brcs	.+116    	; 0x314 <main+0x1f0>
						    OCR1B-=5; 
     2a0:	88 b5       	in	r24, 0x28	; 40
     2a2:	99 b5       	in	r25, 0x29	; 41
     2a4:	05 97       	sbiw	r24, 0x05	; 5
     2a6:	99 bd       	out	0x29, r25	; 41
     2a8:	88 bd       	out	0x28, r24	; 40
     2aa:	34 c0       	rjmp	.+104    	; 0x314 <main+0x1f0>
			    case KEY_F11:	    uart_puts_P( "user\n\r" );
						    delay_ms(1000);
						    uart_puts_P( "password\n\r" );
					    break;
			#endif
			case KEY_F12:		uart_putc( ' ' );
     2ac:	80 e2       	ldi	r24, 0x20	; 32
     2ae:	0e 94 75 02 	call	0x4ea	; 0x4ea <uart_putc>
     2b2:	30 c0       	rjmp	.+96     	; 0x314 <main+0x1f0>
						GLCD_WriteText( buffer );
						Write_ps2data( 0x2 );
						PORTB &= ~(1 << 0);
					break;
*/			case KEY_RETURN:	column=0;
						GLCD_TextGoTo( column, ++row );
     2b4:	0f 5f       	subi	r16, 0xFF	; 255
     2b6:	60 2f       	mov	r22, r16
     2b8:	80 e0       	ldi	r24, 0x00	; 0
     2ba:	0e 94 ef 02 	call	0x5de	; 0x5de <GLCD_TextGoTo>
						uart_putc( 0x0d );
     2be:	8d e0       	ldi	r24, 0x0D	; 13
     2c0:	0e 94 75 02 	call	0x4ea	; 0x4ea <uart_putc>
     2c4:	99 24       	eor	r9, r9
     2c6:	26 c0       	rjmp	.+76     	; 0x314 <main+0x1f0>
					break;
			case KEY_SHIFTl:	//Shift-l nimmt auch die folgenden Zeilen...
			case KEY_SHIFTr:	while( key == KEY_SHIFTl || key == KEY_SHIFTr) {
						    code = Read_ps2data();
     2c8:	0e 94 00 06 	call	0xc00	; 0xc00 <Read_ps2data>
     2cc:	18 2f       	mov	r17, r24
						    key = decodeFunctionKey( code );
     2ce:	99 27       	eor	r25, r25
     2d0:	0e 94 d6 06 	call	0xdac	; 0xdac <decodeFunctionKey>
*/			case KEY_RETURN:	column=0;
						GLCD_TextGoTo( column, ++row );
						uart_putc( 0x0d );
					break;
			case KEY_SHIFTl:	//Shift-l nimmt auch die folgenden Zeilen...
			case KEY_SHIFTr:	while( key == KEY_SHIFTl || key == KEY_SHIFTr) {
     2d4:	8d 30       	cpi	r24, 0x0D	; 13
     2d6:	c1 f3       	breq	.-16     	; 0x2c8 <main+0x1a4>
     2d8:	81 31       	cpi	r24, 0x11	; 17
     2da:	b1 f3       	breq	.-20     	; 0x2c8 <main+0x1a4>
						    code = Read_ps2data();
						    key = decodeFunctionKey( code );
						}
						key = decodeShiftedChar(code);
     2dc:	81 2f       	mov	r24, r17
     2de:	99 27       	eor	r25, r25
     2e0:	0e 94 8d 09 	call	0x131a	; 0x131a <decodeShiftedChar>
     2e4:	03 c0       	rjmp	.+6      	; 0x2ec <main+0x1c8>
						uart_puts( buffer );
					break;
		    }
		}
		else {						//Standardtasten auswerten
		    key = decodeChar(code);
     2e6:	c7 01       	movw	r24, r14
     2e8:	0e 94 a2 07 	call	0xf44	; 0xf44 <decodeChar>
		    sprintf(buffer, "%c", key);
     2ec:	99 27       	eor	r25, r25
     2ee:	9f 93       	push	r25
     2f0:	8f 93       	push	r24
     2f2:	bf 92       	push	r11
     2f4:	af 92       	push	r10
     2f6:	df 92       	push	r13
     2f8:	cf 92       	push	r12
     2fa:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <sprintf>
		    uart_puts( buffer );
     2fe:	c6 01       	movw	r24, r12
     300:	0e 94 87 02 	call	0x50e	; 0x50e <uart_puts>
     304:	8d b7       	in	r24, 0x3d	; 61
     306:	9e b7       	in	r25, 0x3e	; 62
     308:	06 96       	adiw	r24, 0x06	; 6
     30a:	0f b6       	in	r0, 0x3f	; 63
     30c:	f8 94       	cli
     30e:	9e bf       	out	0x3e, r25	; 62
     310:	0f be       	out	0x3f, r0	; 63
     312:	8d bf       	out	0x3d, r24	; 61
		}
		#if DEBUG
		    PORTB &= ~(1 << 2);
		#endif
		delay_ms(50);					//"entprellen"
     314:	82 e3       	ldi	r24, 0x32	; 50
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	0e 94 84 00 	call	0x108	; 0x108 <delay_ms>
     31c:	37 cf       	rjmp	.-402    	; 0x18c <main+0x68>
        }
        else {							//Daten von UART verfügbar
	    #if DEBUG
		PORTB |= (1 << 3);
	    #endif
	    if( uart_in & UART_FRAME_ERROR ) {			//Rahmen-Fehler erkannt
     31e:	93 ff       	sbrs	r25, 3
     320:	07 c0       	rjmp	.+14     	; 0x330 <main+0x20c>
		GLCD_TextGoTo( 0, 0 );
     322:	60 e0       	ldi	r22, 0x00	; 0
     324:	80 e0       	ldi	r24, 0x00	; 0
     326:	0e 94 ef 02 	call	0x5de	; 0x5de <GLCD_TextGoTo>
		GLCD_WriteText( "UART Frame Error " );
     32a:	c2 01       	movw	r24, r4
     32c:	0e 94 ad 03 	call	0x75a	; 0x75a <GLCD_WriteText>
	    }
	    if( uart_in & UART_OVERRUN_ERROR ) {		//...Über???? erkannt
     330:	f2 fe       	sbrs	r15, 2
     332:	07 c0       	rjmp	.+14     	; 0x342 <main+0x21e>
		GLCD_TextGoTo( 0, 0 );
     334:	60 e0       	ldi	r22, 0x00	; 0
     336:	80 e0       	ldi	r24, 0x00	; 0
     338:	0e 94 ef 02 	call	0x5de	; 0x5de <GLCD_TextGoTo>
		GLCD_WriteText( "UART Overrun Error " );
     33c:	c3 01       	movw	r24, r6
     33e:	0e 94 ad 03 	call	0x75a	; 0x75a <GLCD_WriteText>
	    }
	    if( uart_in & UART_BUFFER_OVERFLOW ) {		//...Überlauf erkannt
     342:	f1 fe       	sbrs	r15, 1
     344:	08 c0       	rjmp	.+16     	; 0x356 <main+0x232>
		GLCD_TextGoTo( 0, 0 );
     346:	60 e0       	ldi	r22, 0x00	; 0
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	0e 94 ef 02 	call	0x5de	; 0x5de <GLCD_TextGoTo>
		GLCD_WriteText( "UART Buffer overflow " );
     34e:	8c e8       	ldi	r24, 0x8C	; 140
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	0e 94 ad 03 	call	0x75a	; 0x75a <GLCD_WriteText>
	    }

	    /* Hauptteil der Terminal-Ausgabe */
	    switch( uart_in ) {					//empf. Zeichen prüfen
     356:	9a e0       	ldi	r25, 0x0A	; 10
     358:	e9 16       	cp	r14, r25
     35a:	f1 04       	cpc	r15, r1
     35c:	89 f0       	breq	.+34     	; 0x380 <main+0x25c>
     35e:	8d e0       	ldi	r24, 0x0D	; 13
     360:	e8 16       	cp	r14, r24
     362:	f1 04       	cpc	r15, r1
     364:	a9 f1       	breq	.+106    	; 0x3d0 <main+0x2ac>
     366:	98 e0       	ldi	r25, 0x08	; 8
     368:	e9 16       	cp	r14, r25
     36a:	f1 04       	cpc	r15, r1
     36c:	59 f4       	brne	.+22     	; 0x384 <main+0x260>
		case 0x8:	GLCD_TextGoTo( --column, row );	//BACKSPACE
     36e:	9a 94       	dec	r9
     370:	60 2f       	mov	r22, r16
     372:	89 2d       	mov	r24, r9
     374:	0e 94 ef 02 	call	0x5de	; 0x5de <GLCD_TextGoTo>
				GLCD_WriteText( " " );
     378:	c1 01       	movw	r24, r2
     37a:	0e 94 ad 03 	call	0x75a	; 0x75a <GLCD_WriteText>
     37e:	1c c0       	rjmp	.+56     	; 0x3b8 <main+0x294>
			break;
		case 0xa:	row++;				//NewLine / LF
     380:	0f 5f       	subi	r16, 0xFF	; 255
     382:	1a c0       	rjmp	.+52     	; 0x3b8 <main+0x294>
			break;
		case 0xd:	column=0;			//CarriageReturn
			break;
		default:	GLCD_TextGoTo( column++, row );
     384:	19 2d       	mov	r17, r9
     386:	1f 5f       	subi	r17, 0xFF	; 255
     388:	60 2f       	mov	r22, r16
     38a:	89 2d       	mov	r24, r9
     38c:	0e 94 ef 02 	call	0x5de	; 0x5de <GLCD_TextGoTo>
				sprintf(buffer, "%c", uart_in);
     390:	ff 92       	push	r15
     392:	ef 92       	push	r14
     394:	bf 92       	push	r11
     396:	af 92       	push	r10
     398:	df 92       	push	r13
     39a:	cf 92       	push	r12
     39c:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <sprintf>
				GLCD_WriteText( buffer );
     3a0:	c6 01       	movw	r24, r12
     3a2:	0e 94 ad 03 	call	0x75a	; 0x75a <GLCD_WriteText>
     3a6:	91 2e       	mov	r9, r17
     3a8:	8d b7       	in	r24, 0x3d	; 61
     3aa:	9e b7       	in	r25, 0x3e	; 62
     3ac:	06 96       	adiw	r24, 0x06	; 6
     3ae:	0f b6       	in	r0, 0x3f	; 63
     3b0:	f8 94       	cli
     3b2:	9e bf       	out	0x3e, r25	; 62
     3b4:	0f be       	out	0x3f, r0	; 63
     3b6:	8d bf       	out	0x3d, r24	; 61
			break;
	    }
	    if( column > 39 && row == 27 ) {			//Ende in letzter Zeile...
     3b8:	97 e2       	ldi	r25, 0x27	; 39
     3ba:	99 15       	cp	r25, r9
     3bc:	50 f4       	brcc	.+20     	; 0x3d2 <main+0x2ae>
     3be:	0b 31       	cpi	r16, 0x1B	; 27
     3c0:	19 f4       	brne	.+6      	; 0x3c8 <main+0x2a4>
		GLCD_Scroll();
     3c2:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <GLCD_Scroll>
     3c6:	01 c0       	rjmp	.+2      	; 0x3ca <main+0x2a6>
		column=1;
	    }
	    else {
		if( column > 39 ) {				//bei Ende der Zeile...
		    column=1;
		    row++;
     3c8:	0f 5f       	subi	r16, 0xFF	; 255
     3ca:	99 24       	eor	r9, r9
     3cc:	93 94       	inc	r9
     3ce:	07 c0       	rjmp	.+14     	; 0x3de <main+0x2ba>
     3d0:	99 24       	eor	r9, r9
		}
		else if( row > 27 ) {				//wenn in letzter Zeile...
     3d2:	0c 31       	cpi	r16, 0x1C	; 28
     3d4:	20 f0       	brcs	.+8      	; 0x3de <main+0x2ba>
		    GLCD_Scroll();
     3d6:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <GLCD_Scroll>
		    column=0;
		    row--;
     3da:	01 50       	subi	r16, 0x01	; 1
     3dc:	99 24       	eor	r9, r9
		}
	    }
	    GLCD_TextGoTo( column, row );			//Cursor positionieren
     3de:	60 2f       	mov	r22, r16
     3e0:	89 2d       	mov	r24, r9
     3e2:	0e 94 ef 02 	call	0x5de	; 0x5de <GLCD_TextGoTo>
     3e6:	d2 ce       	rjmp	.-604    	; 0x18c <main+0x68>

000003e8 <__vector_11>:
SIGNAL(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
     3e8:	1f 92       	push	r1
     3ea:	0f 92       	push	r0
     3ec:	0f b6       	in	r0, 0x3f	; 63
     3ee:	0f 92       	push	r0
     3f0:	11 24       	eor	r1, r1
     3f2:	2f 93       	push	r18
     3f4:	8f 93       	push	r24
     3f6:	9f 93       	push	r25
     3f8:	ef 93       	push	r30
     3fa:	ff 93       	push	r31
    unsigned char tmphead;
    unsigned char data;
    unsigned char usr;
    unsigned char lastRxError;
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
     3fc:	9b b1       	in	r25, 0x0b	; 11
    data = UART0_DATA;
     3fe:	2c b1       	in	r18, 0x0c	; 12
    lastRxError = (usr & (_BV(FE0)|_BV(DOR0)) );
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
     400:	e0 91 fa 00 	lds	r30, 0x00FA
     404:	ef 5f       	subi	r30, 0xFF	; 255
     406:	ef 71       	andi	r30, 0x1F	; 31
    if ( tmphead == UART_RxTail ) {
     408:	80 91 fb 00 	lds	r24, 0x00FB
     40c:	e8 17       	cp	r30, r24
     40e:	11 f4       	brne	.+4      	; 0x414 <__vector_11+0x2c>
     410:	82 e0       	ldi	r24, 0x02	; 2
     412:	08 c0       	rjmp	.+16     	; 0x424 <__vector_11+0x3c>
    data = UART0_DATA;
    
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
     414:	89 2f       	mov	r24, r25
     416:	88 71       	andi	r24, 0x18	; 24
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
     418:	e0 93 fa 00 	sts	0x00FA, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
     41c:	ff 27       	eor	r31, r31
     41e:	e8 52       	subi	r30, 0x28	; 40
     420:	ff 4f       	sbci	r31, 0xFF	; 255
     422:	20 83       	st	Z, r18
    }
    UART_LastRxError = lastRxError;   
     424:	80 93 fc 00 	sts	0x00FC, r24
     428:	ff 91       	pop	r31
     42a:	ef 91       	pop	r30
     42c:	9f 91       	pop	r25
     42e:	8f 91       	pop	r24
     430:	2f 91       	pop	r18
     432:	0f 90       	pop	r0
     434:	0f be       	out	0x3f, r0	; 63
     436:	0f 90       	pop	r0
     438:	1f 90       	pop	r1
     43a:	18 95       	reti

0000043c <__vector_12>:
SIGNAL(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
     43c:	1f 92       	push	r1
     43e:	0f 92       	push	r0
     440:	0f b6       	in	r0, 0x3f	; 63
     442:	0f 92       	push	r0
     444:	11 24       	eor	r1, r1
     446:	8f 93       	push	r24
     448:	9f 93       	push	r25
     44a:	ef 93       	push	r30
     44c:	ff 93       	push	r31
    unsigned char tmptail;
    if ( UART_TxHead != UART_TxTail) {
     44e:	90 91 f8 00 	lds	r25, 0x00F8
     452:	80 91 f9 00 	lds	r24, 0x00F9
     456:	98 17       	cp	r25, r24
     458:	61 f0       	breq	.+24     	; 0x472 <__stack+0x13>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
     45a:	e0 91 f9 00 	lds	r30, 0x00F9
     45e:	ef 5f       	subi	r30, 0xFF	; 255
     460:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
     462:	e0 93 f9 00 	sts	0x00F9, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
     466:	ff 27       	eor	r31, r31
     468:	e8 54       	subi	r30, 0x48	; 72
     46a:	ff 4f       	sbci	r31, 0xFF	; 255
     46c:	80 81       	ld	r24, Z
     46e:	8c b9       	out	0x0c, r24	; 12
     470:	01 c0       	rjmp	.+2      	; 0x474 <__stack+0x15>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
     472:	55 98       	cbi	0x0a, 5	; 10
     474:	ff 91       	pop	r31
     476:	ef 91       	pop	r30
     478:	9f 91       	pop	r25
     47a:	8f 91       	pop	r24
     47c:	0f 90       	pop	r0
     47e:	0f be       	out	0x3f, r0	; 63
     480:	0f 90       	pop	r0
     482:	1f 90       	pop	r1
     484:	18 95       	reti

00000486 <uart_init>:
Purpose:  initialize UART and set baudrate
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
     486:	9c 01       	movw	r18, r24
    UART_TxHead = 0;
     488:	10 92 f8 00 	sts	0x00F8, r1
    UART_TxTail = 0;
     48c:	10 92 f9 00 	sts	0x00F9, r1
    UART_RxHead = 0;
     490:	10 92 fa 00 	sts	0x00FA, r1
    UART_RxTail = 0;
     494:	10 92 fb 00 	sts	0x00FB, r1
    UBRR = (unsigned char)baudrate; 
    /* enable UART receiver and transmmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);
#elif defined (ATMEGA_USART)
    /* Set baud rate */
    if ( baudrate & 0x8000 )
     498:	97 ff       	sbrs	r25, 7
     49a:	03 c0       	rjmp	.+6      	; 0x4a2 <uart_init+0x1c>
    {
    	 UART0_STATUS = (1<<U2X);  //Enable 2x speed 
     49c:	82 e0       	ldi	r24, 0x02	; 2
     49e:	8b b9       	out	0x0b, r24	; 11
    	 baudrate &= ~0x8000;
     4a0:	3f 77       	andi	r19, 0x7F	; 127
    }
    UBRRH = (unsigned char)(baudrate>>8);
     4a2:	83 2f       	mov	r24, r19
     4a4:	99 27       	eor	r25, r25
     4a6:	80 bd       	out	0x20, r24	; 32
    UBRRL = (unsigned char) baudrate;
     4a8:	29 b9       	out	0x09, r18	; 9
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);
     4aa:	88 e9       	ldi	r24, 0x98	; 152
     4ac:	8a b9       	out	0x0a, r24	; 10
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL
    UCSRC = (1<<URSEL)|(3<<UCSZ0);
     4ae:	86 e8       	ldi	r24, 0x86	; 134
     4b0:	80 bd       	out	0x20, r24	; 32
     4b2:	08 95       	ret

000004b4 <uart_getc>:
Purpose:  return byte from ringbuffer  
Returns:  lower byte:  received byte from ringbuffer
          higher byte: last receive error
**************************************************************************/
unsigned int uart_getc(void)
{    
     4b4:	90 91 fa 00 	lds	r25, 0x00FA
     4b8:	80 91 fb 00 	lds	r24, 0x00FB
     4bc:	98 17       	cp	r25, r24
     4be:	19 f4       	brne	.+6      	; 0x4c6 <uart_getc+0x12>
    unsigned char tmptail;
    unsigned char data;
    if ( UART_RxHead == UART_RxTail ) {
     4c0:	80 e0       	ldi	r24, 0x00	; 0
     4c2:	91 e0       	ldi	r25, 0x01	; 1
     4c4:	08 95       	ret
        return UART_NO_DATA;   /* no data available */
    }
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
     4c6:	e0 91 fb 00 	lds	r30, 0x00FB
     4ca:	ef 5f       	subi	r30, 0xFF	; 255
     4cc:	ef 71       	andi	r30, 0x1F	; 31
    UART_RxTail = tmptail; 
     4ce:	e0 93 fb 00 	sts	0x00FB, r30
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
     4d2:	ff 27       	eor	r31, r31
     4d4:	e8 52       	subi	r30, 0x28	; 40
     4d6:	ff 4f       	sbci	r31, 0xFF	; 255
     4d8:	20 81       	ld	r18, Z
    return (UART_LastRxError << 8) + data;
     4da:	80 91 fc 00 	lds	r24, 0x00FC
     4de:	99 27       	eor	r25, r25
     4e0:	98 2f       	mov	r25, r24
     4e2:	88 27       	eor	r24, r24
     4e4:	82 0f       	add	r24, r18
     4e6:	91 1d       	adc	r25, r1
}
     4e8:	08 95       	ret

000004ea <uart_putc>:
Purpose:  write byte to ringbuffer for transmitting via UART
Input:    byte to be transmitted
Returns:  none          
**************************************************************************/
void uart_putc(unsigned char data)
{
     4ea:	28 2f       	mov	r18, r24
    unsigned char tmphead;
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
     4ec:	90 91 f8 00 	lds	r25, 0x00F8
     4f0:	9f 5f       	subi	r25, 0xFF	; 255
     4f2:	9f 71       	andi	r25, 0x1F	; 31
    while ( tmphead == UART_TxTail ){
     4f4:	80 91 f9 00 	lds	r24, 0x00F9
     4f8:	98 17       	cp	r25, r24
     4fa:	e1 f3       	breq	.-8      	; 0x4f4 <uart_putc+0xa>
        ;/* wait for free space in buffer */
    }
    UART_TxBuf[tmphead] = data;
     4fc:	e9 2f       	mov	r30, r25
     4fe:	ff 27       	eor	r31, r31
     500:	e8 54       	subi	r30, 0x48	; 72
     502:	ff 4f       	sbci	r31, 0xFF	; 255
     504:	20 83       	st	Z, r18
    UART_TxHead = tmphead;
     506:	90 93 f8 00 	sts	0x00F8, r25
    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
     50a:	55 9a       	sbi	0x0a, 5	; 10
     50c:	08 95       	ret

0000050e <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
     50e:	cf 93       	push	r28
     510:	df 93       	push	r29
     512:	ec 01       	movw	r28, r24
     514:	03 c0       	rjmp	.+6      	; 0x51c <uart_puts+0xe>
    while (*s) 
      uart_putc(*s++);
     516:	21 96       	adiw	r28, 0x01	; 1
     518:	0e 94 75 02 	call	0x4ea	; 0x4ea <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
     51c:	88 81       	ld	r24, Y
     51e:	88 23       	and	r24, r24
     520:	d1 f7       	brne	.-12     	; 0x516 <uart_puts+0x8>
     522:	df 91       	pop	r29
     524:	cf 91       	pop	r28
     526:	08 95       	ret

00000528 <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
     528:	cf 93       	push	r28
     52a:	df 93       	push	r29
     52c:	ec 01       	movw	r28, r24
     52e:	02 c0       	rjmp	.+4      	; 0x534 <uart_puts_p+0xc>
    register char c;
    while ( (c = pgm_read_byte(progmem_s++)) ) 
      uart_putc(c);
     530:	0e 94 75 02 	call	0x4ea	; 0x4ea <uart_putc>
     534:	fe 01       	movw	r30, r28
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    while ( (c = pgm_read_byte(progmem_s++)) ) 
     536:	21 96       	adiw	r28, 0x01	; 1
     538:	84 91       	lpm	r24, Z
     53a:	88 23       	and	r24, r24
     53c:	c9 f7       	brne	.-14     	; 0x530 <uart_puts_p+0x8>
     53e:	df 91       	pop	r29
     540:	cf 91       	pop	r28
     542:	08 95       	ret

00000544 <GLCD_GetCursorAddress>:
}
//-------------------------------------------------------------------------------------------------
// Cursor-Adresse auslesen (nur High-Byte, da der SED sonst zickt)
//-------------------------------------------------------------------------------------------------
unsigned int GLCD_GetCursorAddress(void)
{
     544:	1f 93       	push	r17
    unsigned int csr;
    char csr_low, csr_high;
	GLCD_WriteCommand(SED1335_CSRR);
     546:	87 e4       	ldi	r24, 0x47	; 71
     548:	0e 94 11 05 	call	0xa22	; 0xa22 <GLCD_WriteCommand>
	csr_low = GLCD_ReadData();
     54c:	0e 94 1c 05 	call	0xa38	; 0xa38 <GLCD_ReadData>
     550:	18 2f       	mov	r17, r24
	csr_high = GLCD_ReadData();
     552:	0e 94 1c 05 	call	0xa38	; 0xa38 <GLCD_ReadData>
     556:	99 27       	eor	r25, r25
     558:	98 2f       	mov	r25, r24
     55a:	88 27       	eor	r24, r24
	csr = (unsigned int)(csr_low + ( csr_high * 256 ));
    return( csr );
}
     55c:	81 0f       	add	r24, r17
     55e:	91 1d       	adc	r25, r1
     560:	1f 91       	pop	r17
     562:	08 95       	ret

00000564 <GLCD_SetCursorAddress>:
}
//-------------------------------------------------------------------------------------------------
// Cursor-Adresse setzen
//-------------------------------------------------------------------------------------------------
void GLCD_SetCursorAddress(unsigned int address)
{
     564:	0f 93       	push	r16
     566:	1f 93       	push	r17
     568:	8c 01       	movw	r16, r24
	GLCD_WriteCommand(SED1335_CSRW);
     56a:	86 e4       	ldi	r24, 0x46	; 70
     56c:	0e 94 11 05 	call	0xa22	; 0xa22 <GLCD_WriteCommand>
	GLCD_WriteData((unsigned char)(address & 0xFF));
     570:	80 2f       	mov	r24, r16
     572:	0e 94 06 05 	call	0xa0c	; 0xa0c <GLCD_WriteData>
	GLCD_WriteData((unsigned char)(address >> 8));
     576:	01 2f       	mov	r16, r17
     578:	11 27       	eor	r17, r17
     57a:	80 2f       	mov	r24, r16
     57c:	0e 94 06 05 	call	0xa0c	; 0xa0c <GLCD_WriteData>
     580:	1f 91       	pop	r17
     582:	0f 91       	pop	r16
     584:	08 95       	ret

00000586 <GLCD_ClearGraphic>:
}
//-------------------------------------------------------------------------------------------------
// Grafik lÃ¶schen
//-------------------------------------------------------------------------------------------------
void GLCD_ClearGraphic(void)
{
     586:	cf 93       	push	r28
     588:	df 93       	push	r29
    unsigned int i;
	GLCD_SetCursorAddress(SED1335_GRAPHICSTART);
     58a:	80 eb       	ldi	r24, 0xB0	; 176
     58c:	94 e0       	ldi	r25, 0x04	; 4
     58e:	0e 94 b2 02 	call	0x564	; 0x564 <GLCD_SetCursorAddress>
	GLCD_WriteCommand(SED1335_MWRITE);
     592:	82 e4       	ldi	r24, 0x42	; 66
     594:	0e 94 11 05 	call	0xa22	; 0xa22 <GLCD_WriteCommand>
     598:	c0 e0       	ldi	r28, 0x00	; 0
     59a:	d0 e0       	ldi	r29, 0x00	; 0
	for(i = 0; i < (40 * 240); i++)
		GLCD_WriteData(0x00);
     59c:	80 e0       	ldi	r24, 0x00	; 0
     59e:	0e 94 06 05 	call	0xa0c	; 0xa0c <GLCD_WriteData>
void GLCD_ClearGraphic(void)
{
    unsigned int i;
	GLCD_SetCursorAddress(SED1335_GRAPHICSTART);
	GLCD_WriteCommand(SED1335_MWRITE);
	for(i = 0; i < (40 * 240); i++)
     5a2:	21 96       	adiw	r28, 0x01	; 1
     5a4:	85 e2       	ldi	r24, 0x25	; 37
     5a6:	c0 38       	cpi	r28, 0x80	; 128
     5a8:	d8 07       	cpc	r29, r24
     5aa:	c1 f7       	brne	.-16     	; 0x59c <GLCD_ClearGraphic+0x16>
     5ac:	df 91       	pop	r29
     5ae:	cf 91       	pop	r28
     5b0:	08 95       	ret

000005b2 <GLCD_GraphicGoTo>:
}
//-------------------------------------------------------------------------------------------------
// Grafikcursor-Adresse setzen
//-------------------------------------------------------------------------------------------------
void GLCD_GraphicGoTo(unsigned int x, unsigned int y)
{
     5b2:	43 e0       	ldi	r20, 0x03	; 3
     5b4:	96 95       	lsr	r25
     5b6:	87 95       	ror	r24
     5b8:	4a 95       	dec	r20
     5ba:	e1 f7       	brne	.-8      	; 0x5b4 <GLCD_GraphicGoTo+0x2>
     5bc:	80 55       	subi	r24, 0x50	; 80
     5be:	9b 4f       	sbci	r25, 0xFB	; 251
     5c0:	28 e2       	ldi	r18, 0x28	; 40
     5c2:	30 e0       	ldi	r19, 0x00	; 0
     5c4:	a9 01       	movw	r20, r18
     5c6:	64 9f       	mul	r22, r20
     5c8:	90 01       	movw	r18, r0
     5ca:	65 9f       	mul	r22, r21
     5cc:	30 0d       	add	r19, r0
     5ce:	74 9f       	mul	r23, r20
     5d0:	30 0d       	add	r19, r0
     5d2:	11 24       	eor	r1, r1
     5d4:	82 0f       	add	r24, r18
     5d6:	93 1f       	adc	r25, r19
     5d8:	0e 94 b2 02 	call	0x564	; 0x564 <GLCD_SetCursorAddress>
     5dc:	08 95       	ret

000005de <GLCD_TextGoTo>:
}
//-------------------------------------------------------------------------------------------------
// Textcursor setzen
//-------------------------------------------------------------------------------------------------
void GLCD_TextGoTo(unsigned char x, unsigned char y)
{
     5de:	98 e2       	ldi	r25, 0x28	; 40
     5e0:	69 9f       	mul	r22, r25
     5e2:	b0 01       	movw	r22, r0
     5e4:	11 24       	eor	r1, r1
     5e6:	68 0f       	add	r22, r24
     5e8:	71 1d       	adc	r23, r1
     5ea:	cb 01       	movw	r24, r22
     5ec:	0e 94 b2 02 	call	0x564	; 0x564 <GLCD_SetCursorAddress>
     5f0:	08 95       	ret

000005f2 <GLCD_Scroll>:
}
//-------------------------------------------------------------------------------------------------
// Text scrollen
//-------------------------------------------------------------------------------------------------
void GLCD_Scroll(void)
{
     5f2:	4f 92       	push	r4
     5f4:	5f 92       	push	r5
     5f6:	6f 92       	push	r6
     5f8:	7f 92       	push	r7
     5fa:	8f 92       	push	r8
     5fc:	9f 92       	push	r9
     5fe:	bf 92       	push	r11
     600:	cf 92       	push	r12
     602:	df 92       	push	r13
     604:	ef 92       	push	r14
     606:	ff 92       	push	r15
     608:	0f 93       	push	r16
     60a:	1f 93       	push	r17
     60c:	cf 93       	push	r28
     60e:	df 93       	push	r29
     610:	cd b7       	in	r28, 0x3d	; 61
     612:	de b7       	in	r29, 0x3e	; 62
     614:	a8 97       	sbiw	r28, 0x28	; 40
     616:	0f b6       	in	r0, 0x3f	; 63
     618:	f8 94       	cli
     61a:	de bf       	out	0x3e, r29	; 62
     61c:	0f be       	out	0x3f, r0	; 63
     61e:	cd bf       	out	0x3d, r28	; 61
     620:	cc 24       	eor	r12, r12
     622:	dd 24       	eor	r13, r13
    int i,lv;
    char buff[40];
	for( lv=0; lv<27; lv++ )
	{
	    GLCD_TextGoTo(0,lv+1);
	    GLCD_WriteCommand(SED1335_MREAD);
     624:	4e 01       	movw	r8, r28
     626:	08 94       	sec
     628:	81 1c       	adc	r8, r1
     62a:	91 1c       	adc	r9, r1
     62c:	24 01       	movw	r4, r8
	    for(i = 0; i < 40; i++)
     62e:	59 e2       	ldi	r21, 0x29	; 41
     630:	65 2e       	mov	r6, r21
     632:	71 2c       	mov	r7, r1
     634:	6c 0e       	add	r6, r28
     636:	7d 1e       	adc	r7, r29
}
//-------------------------------------------------------------------------------------------------
// Text scrollen
//-------------------------------------------------------------------------------------------------
void GLCD_Scroll(void)
{
     638:	bc 2c       	mov	r11, r12
    int i,lv;
    char buff[40];
	for( lv=0; lv<27; lv++ )
	{
	    GLCD_TextGoTo(0,lv+1);
     63a:	6c 2d       	mov	r22, r12
     63c:	6f 5f       	subi	r22, 0xFF	; 255
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	0e 94 ef 02 	call	0x5de	; 0x5de <GLCD_TextGoTo>
	    GLCD_WriteCommand(SED1335_MREAD);
     644:	83 e4       	ldi	r24, 0x43	; 67
     646:	0e 94 11 05 	call	0xa22	; 0xa22 <GLCD_WriteCommand>
     64a:	72 01       	movw	r14, r4
     64c:	84 01       	movw	r16, r8
	    for(i = 0; i < 40; i++)
		    buff[i] = GLCD_ReadData();
     64e:	0e 94 1c 05 	call	0xa38	; 0xa38 <GLCD_ReadData>
     652:	f8 01       	movw	r30, r16
     654:	81 93       	st	Z+, r24
     656:	8f 01       	movw	r16, r30
    char buff[40];
	for( lv=0; lv<27; lv++ )
	{
	    GLCD_TextGoTo(0,lv+1);
	    GLCD_WriteCommand(SED1335_MREAD);
	    for(i = 0; i < 40; i++)
     658:	e6 15       	cp	r30, r6
     65a:	f7 05       	cpc	r31, r7
     65c:	c1 f7       	brne	.-16     	; 0x64e <GLCD_Scroll+0x5c>
		    buff[i] = GLCD_ReadData();

	    GLCD_TextGoTo(0,lv);
     65e:	6b 2d       	mov	r22, r11
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	0e 94 ef 02 	call	0x5de	; 0x5de <GLCD_TextGoTo>
	    GLCD_WriteCommand(SED1335_MWRITE);
     666:	82 e4       	ldi	r24, 0x42	; 66
     668:	0e 94 11 05 	call	0xa22	; 0xa22 <GLCD_WriteCommand>
	    for(i = 0; i < 40; i++)
		    GLCD_WriteData(buff[i]);
     66c:	f7 01       	movw	r30, r14
     66e:	81 91       	ld	r24, Z+
     670:	7f 01       	movw	r14, r30
     672:	0e 94 06 05 	call	0xa0c	; 0xa0c <GLCD_WriteData>
	    for(i = 0; i < 40; i++)
		    buff[i] = GLCD_ReadData();

	    GLCD_TextGoTo(0,lv);
	    GLCD_WriteCommand(SED1335_MWRITE);
	    for(i = 0; i < 40; i++)
     676:	e0 16       	cp	r14, r16
     678:	f1 06       	cpc	r15, r17
     67a:	c1 f7       	brne	.-16     	; 0x66c <GLCD_Scroll+0x7a>
//-------------------------------------------------------------------------------------------------
void GLCD_Scroll(void)
{
    int i,lv;
    char buff[40];
	for( lv=0; lv<27; lv++ )
     67c:	08 94       	sec
     67e:	c1 1c       	adc	r12, r1
     680:	d1 1c       	adc	r13, r1
     682:	fb e1       	ldi	r31, 0x1B	; 27
     684:	cf 16       	cp	r12, r31
     686:	d1 04       	cpc	r13, r1
     688:	b9 f6       	brne	.-82     	; 0x638 <GLCD_Scroll+0x46>
	    GLCD_TextGoTo(0,lv);
	    GLCD_WriteCommand(SED1335_MWRITE);
	    for(i = 0; i < 40; i++)
		    GLCD_WriteData(buff[i]);
	}
	GLCD_TextGoTo(0,27);
     68a:	6b e1       	ldi	r22, 0x1B	; 27
     68c:	80 e0       	ldi	r24, 0x00	; 0
     68e:	0e 94 ef 02 	call	0x5de	; 0x5de <GLCD_TextGoTo>
	GLCD_WriteCommand(SED1335_MWRITE);
     692:	82 e4       	ldi	r24, 0x42	; 66
     694:	0e 94 11 05 	call	0xa22	; 0xa22 <GLCD_WriteCommand>
     698:	00 e0       	ldi	r16, 0x00	; 0
     69a:	10 e0       	ldi	r17, 0x00	; 0
	for(i = 0; i < 80; i++)
		GLCD_WriteData(' ');
     69c:	80 e2       	ldi	r24, 0x20	; 32
     69e:	0e 94 06 05 	call	0xa0c	; 0xa0c <GLCD_WriteData>
	    for(i = 0; i < 40; i++)
		    GLCD_WriteData(buff[i]);
	}
	GLCD_TextGoTo(0,27);
	GLCD_WriteCommand(SED1335_MWRITE);
	for(i = 0; i < 80; i++)
     6a2:	0f 5f       	subi	r16, 0xFF	; 255
     6a4:	1f 4f       	sbci	r17, 0xFF	; 255
     6a6:	00 35       	cpi	r16, 0x50	; 80
     6a8:	11 05       	cpc	r17, r1
     6aa:	c1 f7       	brne	.-16     	; 0x69c <GLCD_Scroll+0xaa>
     6ac:	a8 96       	adiw	r28, 0x28	; 40
     6ae:	0f b6       	in	r0, 0x3f	; 63
     6b0:	f8 94       	cli
     6b2:	de bf       	out	0x3e, r29	; 62
     6b4:	0f be       	out	0x3f, r0	; 63
     6b6:	cd bf       	out	0x3d, r28	; 61
     6b8:	df 91       	pop	r29
     6ba:	cf 91       	pop	r28
     6bc:	1f 91       	pop	r17
     6be:	0f 91       	pop	r16
     6c0:	ff 90       	pop	r15
     6c2:	ef 90       	pop	r14
     6c4:	df 90       	pop	r13
     6c6:	cf 90       	pop	r12
     6c8:	bf 90       	pop	r11
     6ca:	9f 90       	pop	r9
     6cc:	8f 90       	pop	r8
     6ce:	7f 90       	pop	r7
     6d0:	6f 90       	pop	r6
     6d2:	5f 90       	pop	r5
     6d4:	4f 90       	pop	r4
     6d6:	08 95       	ret

000006d8 <GLCD_NewLine>:
}
//-------------------------------------------------------------------------------------------------
// NewLine / CarriageReturn
//-------------------------------------------------------------------------------------------------
void GLCD_NewLine()
{
     6d8:	0f 93       	push	r16
     6da:	1f 93       	push	r17
    unsigned char csr_low, csr_high;
	if( csr_high > 3 && csr_low > 96 ) {	// ab x;Y : 1;29
     6dc:	84 30       	cpi	r24, 0x04	; 4
     6de:	48 f0       	brcs	.+18     	; 0x6f2 <GLCD_NewLine+0x1a>
     6e0:	81 36       	cpi	r24, 0x61	; 97
     6e2:	38 f0       	brcs	.+14     	; 0x6f2 <GLCD_NewLine+0x1a>
		GLCD_Scroll();
     6e4:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <GLCD_Scroll>
		GLCD_TextGoTo(0,28);
     6e8:	6c e1       	ldi	r22, 0x1C	; 28
     6ea:	80 e0       	ldi	r24, 0x00	; 0
     6ec:	0e 94 ef 02 	call	0x5de	; 0x5de <GLCD_TextGoTo>
     6f0:	1b c0       	rjmp	.+54     	; 0x728 <GLCD_NewLine+0x50>
	}
	else {
		GLCD_WriteCommand(SED1335_CSRR);
     6f2:	87 e4       	ldi	r24, 0x47	; 71
     6f4:	0e 94 11 05 	call	0xa22	; 0xa22 <GLCD_WriteCommand>
		csr_low = GLCD_ReadData();
     6f8:	0e 94 1c 05 	call	0xa38	; 0xa38 <GLCD_ReadData>
     6fc:	18 2f       	mov	r17, r24
		csr_high = GLCD_ReadData();
     6fe:	0e 94 1c 05 	call	0xa38	; 0xa38 <GLCD_ReadData>
     702:	08 2f       	mov	r16, r24
		csr_low /= 40;
		csr_low *= 40;
     704:	81 2f       	mov	r24, r17
     706:	68 e2       	ldi	r22, 0x28	; 40
     708:	0e 94 71 11 	call	0x22e2	; 0x22e2 <__udivmodqi4>
     70c:	98 e2       	ldi	r25, 0x28	; 40
     70e:	89 9f       	mul	r24, r25
     710:	10 2d       	mov	r17, r0
     712:	11 24       	eor	r1, r1
		csr_low += 40;
		GLCD_WriteCommand(SED1335_CSRW);
     714:	86 e4       	ldi	r24, 0x46	; 70
     716:	0e 94 11 05 	call	0xa22	; 0xa22 <GLCD_WriteCommand>
		GLCD_WriteData(csr_low);
     71a:	81 2f       	mov	r24, r17
     71c:	88 5d       	subi	r24, 0xD8	; 216
     71e:	0e 94 06 05 	call	0xa0c	; 0xa0c <GLCD_WriteData>
		GLCD_WriteData(csr_high);
     722:	80 2f       	mov	r24, r16
     724:	0e 94 06 05 	call	0xa0c	; 0xa0c <GLCD_WriteData>
     728:	1f 91       	pop	r17
     72a:	0f 91       	pop	r16
     72c:	08 95       	ret

0000072e <GLCD_ClearText>:
}
//-------------------------------------------------------------------------------------------------
// Text lÃ¶schen
//-------------------------------------------------------------------------------------------------
void GLCD_ClearText(void)
{
     72e:	cf 93       	push	r28
     730:	df 93       	push	r29
    int i;
	GLCD_TextGoTo(0,0);
     732:	60 e0       	ldi	r22, 0x00	; 0
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	0e 94 ef 02 	call	0x5de	; 0x5de <GLCD_TextGoTo>
	GLCD_WriteCommand(SED1335_MWRITE);
     73a:	82 e4       	ldi	r24, 0x42	; 66
     73c:	0e 94 11 05 	call	0xa22	; 0xa22 <GLCD_WriteCommand>
     740:	c0 e0       	ldi	r28, 0x00	; 0
     742:	d0 e0       	ldi	r29, 0x00	; 0
	for(i = 0; i < 1200; i++)
		GLCD_WriteData(' ');
     744:	80 e2       	ldi	r24, 0x20	; 32
     746:	0e 94 06 05 	call	0xa0c	; 0xa0c <GLCD_WriteData>
void GLCD_ClearText(void)
{
    int i;
	GLCD_TextGoTo(0,0);
	GLCD_WriteCommand(SED1335_MWRITE);
	for(i = 0; i < 1200; i++)
     74a:	21 96       	adiw	r28, 0x01	; 1
     74c:	84 e0       	ldi	r24, 0x04	; 4
     74e:	c0 3b       	cpi	r28, 0xB0	; 176
     750:	d8 07       	cpc	r29, r24
     752:	c1 f7       	brne	.-16     	; 0x744 <GLCD_ClearText+0x16>
     754:	df 91       	pop	r29
     756:	cf 91       	pop	r28
     758:	08 95       	ret

0000075a <GLCD_WriteText>:
}
//-------------------------------------------------------------------------------------------------
// Textausgabe
//-------------------------------------------------------------------------------------------------
void GLCD_WriteText(char * tekst)
{
     75a:	cf 93       	push	r28
     75c:	df 93       	push	r29
     75e:	ec 01       	movw	r28, r24
	GLCD_WriteCommand(SED1335_MWRITE);
     760:	82 e4       	ldi	r24, 0x42	; 66
     762:	0e 94 11 05 	call	0xa22	; 0xa22 <GLCD_WriteCommand>
     766:	03 c0       	rjmp	.+6      	; 0x76e <GLCD_WriteText+0x14>
	while(*tekst)
		GLCD_WriteData(*tekst++);
     768:	21 96       	adiw	r28, 0x01	; 1
     76a:	0e 94 06 05 	call	0xa0c	; 0xa0c <GLCD_WriteData>
// Textausgabe
//-------------------------------------------------------------------------------------------------
void GLCD_WriteText(char * tekst)
{
	GLCD_WriteCommand(SED1335_MWRITE);
	while(*tekst)
     76e:	88 81       	ld	r24, Y
     770:	88 23       	and	r24, r24
     772:	d1 f7       	brne	.-12     	; 0x768 <GLCD_WriteText+0xe>
     774:	df 91       	pop	r29
     776:	cf 91       	pop	r28
     778:	08 95       	ret

0000077a <GLCD_SetPixel>:
}
//-------------------------------------------------------------------------------------------------
// Pixel setzen
//-------------------------------------------------------------------------------------------------
void GLCD_SetPixel(unsigned int x,unsigned int y, int color)
{
     77a:	ef 92       	push	r14
     77c:	ff 92       	push	r15
     77e:	0f 93       	push	r16
     780:	1f 93       	push	r17
     782:	cf 93       	push	r28
     784:	df 93       	push	r29
     786:	8c 01       	movw	r16, r24
     788:	7a 01       	movw	r14, r20
    unsigned char tmp = 0;
    unsigned int address = SED1335_GRAPHICSTART + (40 * y) + (x/8); 
     78a:	ec 01       	movw	r28, r24
     78c:	e3 e0       	ldi	r30, 0x03	; 3
     78e:	d6 95       	lsr	r29
     790:	c7 95       	ror	r28
     792:	ea 95       	dec	r30
     794:	e1 f7       	brne	.-8      	; 0x78e <GLCD_SetPixel+0x14>
     796:	c0 55       	subi	r28, 0x50	; 80
     798:	db 4f       	sbci	r29, 0xFB	; 251
     79a:	88 e2       	ldi	r24, 0x28	; 40
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	9c 01       	movw	r18, r24
     7a0:	62 9f       	mul	r22, r18
     7a2:	c0 01       	movw	r24, r0
     7a4:	63 9f       	mul	r22, r19
     7a6:	90 0d       	add	r25, r0
     7a8:	72 9f       	mul	r23, r18
     7aa:	90 0d       	add	r25, r0
     7ac:	11 24       	eor	r1, r1
     7ae:	c8 0f       	add	r28, r24
     7b0:	d9 1f       	adc	r29, r25
	GLCD_SetCursorAddress(address);
     7b2:	ce 01       	movw	r24, r28
     7b4:	0e 94 b2 02 	call	0x564	; 0x564 <GLCD_SetCursorAddress>

	GLCD_WriteCommand(SED1335_MREAD);
     7b8:	83 e4       	ldi	r24, 0x43	; 67
     7ba:	0e 94 11 05 	call	0xa22	; 0xa22 <GLCD_WriteCommand>
	tmp = GLCD_ReadData();
     7be:	0e 94 1c 05 	call	0xa38	; 0xa38 <GLCD_ReadData>
     7c2:	48 2f       	mov	r20, r24
     7c4:	98 01       	movw	r18, r16
     7c6:	20 95       	com	r18
     7c8:	30 95       	com	r19

	if(color)
     7ca:	ef 28       	or	r14, r15
     7cc:	61 f0       	breq	.+24     	; 0x7e6 <GLCD_SetPixel+0x6c>
		tmp |= (1 << (SED1335_FX - (x % 8)));
     7ce:	27 70       	andi	r18, 0x07	; 7
     7d0:	30 70       	andi	r19, 0x00	; 0
     7d2:	81 e0       	ldi	r24, 0x01	; 1
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	02 c0       	rjmp	.+4      	; 0x7dc <GLCD_SetPixel+0x62>
     7d8:	88 0f       	add	r24, r24
     7da:	99 1f       	adc	r25, r25
     7dc:	2a 95       	dec	r18
     7de:	e2 f7       	brpl	.-8      	; 0x7d8 <GLCD_SetPixel+0x5e>
     7e0:	04 2f       	mov	r16, r20
     7e2:	08 2b       	or	r16, r24
     7e4:	0c c0       	rjmp	.+24     	; 0x7fe <GLCD_SetPixel+0x84>
	else
		tmp &= ~(1 << (SED1335_FX - (x % 8)));
     7e6:	27 70       	andi	r18, 0x07	; 7
     7e8:	30 70       	andi	r19, 0x00	; 0
     7ea:	81 e0       	ldi	r24, 0x01	; 1
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	02 c0       	rjmp	.+4      	; 0x7f4 <GLCD_SetPixel+0x7a>
     7f0:	88 0f       	add	r24, r24
     7f2:	99 1f       	adc	r25, r25
     7f4:	2a 95       	dec	r18
     7f6:	e2 f7       	brpl	.-8      	; 0x7f0 <GLCD_SetPixel+0x76>
     7f8:	08 2f       	mov	r16, r24
     7fa:	00 95       	com	r16
     7fc:	04 23       	and	r16, r20

	GLCD_SetCursorAddress(address);
     7fe:	ce 01       	movw	r24, r28
     800:	0e 94 b2 02 	call	0x564	; 0x564 <GLCD_SetCursorAddress>
	GLCD_WriteCommand(SED1335_MWRITE);
     804:	82 e4       	ldi	r24, 0x42	; 66
     806:	0e 94 11 05 	call	0xa22	; 0xa22 <GLCD_WriteCommand>
	GLCD_WriteData(tmp);
     80a:	80 2f       	mov	r24, r16
     80c:	0e 94 06 05 	call	0xa0c	; 0xa0c <GLCD_WriteData>
     810:	df 91       	pop	r29
     812:	cf 91       	pop	r28
     814:	1f 91       	pop	r17
     816:	0f 91       	pop	r16
     818:	ff 90       	pop	r15
     81a:	ef 90       	pop	r14
     81c:	08 95       	ret

0000081e <GLCD_WriteTextScroll>:
}
//-------------------------------------------------------------------------------------------------
// Textausgabe mit Scrolling
//-------------------------------------------------------------------------------------------------
void GLCD_WriteTextScroll(char * text)
{
     81e:	cf 92       	push	r12
     820:	df 92       	push	r13
     822:	ef 92       	push	r14
     824:	ff 92       	push	r15
     826:	0f 93       	push	r16
     828:	1f 93       	push	r17
     82a:	cf 93       	push	r28
     82c:	df 93       	push	r29
     82e:	6c 01       	movw	r12, r24
    char no_scroll = 1;
    unsigned int len, z, i;
    unsigned char low, high;
	GLCD_WriteCommand(SED1335_CSRR);
     830:	87 e4       	ldi	r24, 0x47	; 71
     832:	0e 94 11 05 	call	0xa22	; 0xa22 <GLCD_WriteCommand>
	low = GLCD_ReadData();
     836:	0e 94 1c 05 	call	0xa38	; 0xa38 <GLCD_ReadData>
     83a:	18 2f       	mov	r17, r24
	high = GLCD_ReadData();
     83c:	0e 94 1c 05 	call	0xa38	; 0xa38 <GLCD_ReadData>
     840:	28 2f       	mov	r18, r24
	len = strlen( text );
     842:	f6 01       	movw	r30, r12
     844:	01 90       	ld	r0, Z+
     846:	00 20       	and	r0, r0
     848:	e9 f7       	brne	.-6      	; 0x844 <GLCD_WriteTextScroll+0x26>
     84a:	31 97       	sbiw	r30, 0x01	; 1
     84c:	cf 01       	movw	r24, r30
     84e:	8c 19       	sub	r24, r12
     850:	9d 09       	sbc	r25, r13
     852:	68 e2       	ldi	r22, 0x28	; 40
     854:	70 e0       	ldi	r23, 0x00	; 0
     856:	0e 94 7d 11 	call	0x22fa	; 0x22fa <__udivmodhi4>
     85a:	eb 01       	movw	r28, r22
	z = len / 40;
	if( high > 3 && low > 96 ) {	// ab x;Y : 1;29
     85c:	24 30       	cpi	r18, 0x04	; 4
     85e:	c0 f0       	brcs	.+48     	; 0x890 <GLCD_WriteTextScroll+0x72>
     860:	11 36       	cpi	r17, 0x61	; 97
     862:	b0 f0       	brcs	.+44     	; 0x890 <GLCD_WriteTextScroll+0x72>
		if( z < 3 ) {
     864:	63 30       	cpi	r22, 0x03	; 3
     866:	71 05       	cpc	r23, r1
     868:	98 f4       	brcc	.+38     	; 0x890 <GLCD_WriteTextScroll+0x72>
     86a:	00 e0       	ldi	r16, 0x00	; 0
     86c:	10 e0       	ldi	r17, 0x00	; 0
			for( i=0 ; i<=z ; i++ )
     86e:	7b 01       	movw	r14, r22
     870:	08 94       	sec
     872:	e1 1c       	adc	r14, r1
     874:	f1 1c       	adc	r15, r1
				GLCD_Scroll();
     876:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <GLCD_Scroll>
	high = GLCD_ReadData();
	len = strlen( text );
	z = len / 40;
	if( high > 3 && low > 96 ) {	// ab x;Y : 1;29
		if( z < 3 ) {
			for( i=0 ; i<=z ; i++ )
     87a:	0f 5f       	subi	r16, 0xFF	; 255
     87c:	1f 4f       	sbci	r17, 0xFF	; 255
     87e:	0e 15       	cp	r16, r14
     880:	1f 05       	cpc	r17, r15
     882:	c9 f7       	brne	.-14     	; 0x876 <GLCD_WriteTextScroll+0x58>
				GLCD_Scroll();
			GLCD_TextGoTo(0,28-z);
     884:	6c e1       	ldi	r22, 0x1C	; 28
     886:	6c 1b       	sub	r22, r28
     888:	80 e0       	ldi	r24, 0x00	; 0
     88a:	0e 94 ef 02 	call	0x5de	; 0x5de <GLCD_TextGoTo>
     88e:	05 c0       	rjmp	.+10     	; 0x89a <GLCD_WriteTextScroll+0x7c>
			no_scroll = 0;
		}
	}
	if( z > 3 )
     890:	24 97       	sbiw	r28, 0x04	; 4
     892:	18 f0       	brcs	.+6      	; 0x89a <GLCD_WriteTextScroll+0x7c>
		GLCD_WriteText("ERROR: Text zu lang");
     894:	84 ea       	ldi	r24, 0xA4	; 164
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	01 c0       	rjmp	.+2      	; 0x89c <GLCD_WriteTextScroll+0x7e>
	else {
		GLCD_WriteText( text );
     89a:	c6 01       	movw	r24, r12
     89c:	0e 94 ad 03 	call	0x75a	; 0x75a <GLCD_WriteText>
     8a0:	df 91       	pop	r29
     8a2:	cf 91       	pop	r28
     8a4:	1f 91       	pop	r17
     8a6:	0f 91       	pop	r16
     8a8:	ff 90       	pop	r15
     8aa:	ef 90       	pop	r14
     8ac:	df 90       	pop	r13
     8ae:	cf 90       	pop	r12
     8b0:	08 95       	ret

000008b2 <GLCD_WriteTextP>:
}
//-------------------------------------------------------------------------------------------------
// Textausgabe aus AVR(-ROM?)
//-------------------------------------------------------------------------------------------------
void GLCD_WriteTextP(char * tekst)
{
     8b2:	0f 93       	push	r16
     8b4:	1f 93       	push	r17
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	ec 01       	movw	r28, r24
	GLCD_WriteCommand(SED1335_MWRITE);
     8bc:	82 e4       	ldi	r24, 0x42	; 66
     8be:	0e 94 11 05 	call	0xa22	; 0xa22 <GLCD_WriteCommand>
     8c2:	09 c0       	rjmp	.+18     	; 0x8d6 <GLCD_WriteTextP+0x24>
	while(GLCD_ReadByteFromROMMemory(tekst))
		GLCD_WriteData(GLCD_ReadByteFromROMMemory(tekst++));
     8c4:	8e 01       	movw	r16, r28
     8c6:	0f 5f       	subi	r16, 0xFF	; 255
     8c8:	1f 4f       	sbci	r17, 0xFF	; 255
     8ca:	ce 01       	movw	r24, r28
     8cc:	0e 94 28 05 	call	0xa50	; 0xa50 <GLCD_ReadByteFromROMMemory>
     8d0:	0e 94 06 05 	call	0xa0c	; 0xa0c <GLCD_WriteData>
     8d4:	e8 01       	movw	r28, r16
// Textausgabe aus AVR(-ROM?)
//-------------------------------------------------------------------------------------------------
void GLCD_WriteTextP(char * tekst)
{
	GLCD_WriteCommand(SED1335_MWRITE);
	while(GLCD_ReadByteFromROMMemory(tekst))
     8d6:	ce 01       	movw	r24, r28
     8d8:	0e 94 28 05 	call	0xa50	; 0xa50 <GLCD_ReadByteFromROMMemory>
     8dc:	88 23       	and	r24, r24
     8de:	91 f7       	brne	.-28     	; 0x8c4 <GLCD_WriteTextP+0x12>
     8e0:	df 91       	pop	r29
     8e2:	cf 91       	pop	r28
     8e4:	1f 91       	pop	r17
     8e6:	0f 91       	pop	r16
     8e8:	08 95       	ret

000008ea <GLCD_WriteTextI>:
}
//-------------------------------------------------------------------------------------------------
// Textausgabe einer Zahl
//-------------------------------------------------------------------------------------------------
void GLCD_WriteTextI(int number)
{
     8ea:	0f 93       	push	r16
     8ec:	1f 93       	push	r17
     8ee:	cf 93       	push	r28
     8f0:	df 93       	push	r29
     8f2:	cd b7       	in	r28, 0x3d	; 61
     8f4:	de b7       	in	r29, 0x3e	; 62
     8f6:	27 97       	sbiw	r28, 0x07	; 7
     8f8:	0f b6       	in	r0, 0x3f	; 63
     8fa:	f8 94       	cli
     8fc:	de bf       	out	0x3e, r29	; 62
     8fe:	0f be       	out	0x3f, r0	; 63
     900:	cd bf       	out	0x3d, r28	; 61
    char buffer[7];
	itoa( number, buffer, 7);
     902:	47 e0       	ldi	r20, 0x07	; 7
     904:	50 e0       	ldi	r21, 0x00	; 0
     906:	8e 01       	movw	r16, r28
     908:	0f 5f       	subi	r16, 0xFF	; 255
     90a:	1f 4f       	sbci	r17, 0xFF	; 255
     90c:	b8 01       	movw	r22, r16
     90e:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <itoa>
	GLCD_WriteText( buffer );
     912:	c8 01       	movw	r24, r16
     914:	0e 94 ad 03 	call	0x75a	; 0x75a <GLCD_WriteText>
     918:	27 96       	adiw	r28, 0x07	; 7
     91a:	0f b6       	in	r0, 0x3f	; 63
     91c:	f8 94       	cli
     91e:	de bf       	out	0x3e, r29	; 62
     920:	0f be       	out	0x3f, r0	; 63
     922:	cd bf       	out	0x3d, r28	; 61
     924:	df 91       	pop	r29
     926:	cf 91       	pop	r28
     928:	1f 91       	pop	r17
     92a:	0f 91       	pop	r16
     92c:	08 95       	ret

0000092e <GLCD_Initialize>:

//-------------------------------------------------------------------------------------------------
// Initialisierung des Displays / Controllers
//-------------------------------------------------------------------------------------------------
void GLCD_Initialize(void)
{
     92e:	0e 94 fd 04 	call	0x9fa	; 0x9fa <GLCD_InitPorts>
	GLCD_InitPorts();

	GLCD_WriteCommand(SED1335_SYSTEM_SET); 
     932:	80 e4       	ldi	r24, 0x40	; 64
     934:	0e 94 11 05 	call	0xa22	; 0xa22 <GLCD_WriteCommand>
	GLCD_WriteData(SED1335_SYS_P1);	
     938:	80 e3       	ldi	r24, 0x30	; 48
     93a:	0e 94 06 05 	call	0xa0c	; 0xa0c <GLCD_WriteData>
	GLCD_WriteData(SED1335_SYS_P2);		
     93e:	87 e8       	ldi	r24, 0x87	; 135
     940:	0e 94 06 05 	call	0xa0c	; 0xa0c <GLCD_WriteData>
	GLCD_WriteData(SED1335_FY);		
     944:	87 e0       	ldi	r24, 0x07	; 7
     946:	0e 94 06 05 	call	0xa0c	; 0xa0c <GLCD_WriteData>
	GLCD_WriteData(SED1335_CR);		
     94a:	87 e2       	ldi	r24, 0x27	; 39
     94c:	0e 94 06 05 	call	0xa0c	; 0xa0c <GLCD_WriteData>
	GLCD_WriteData(SED1335_TCR);	
     950:	8b e2       	ldi	r24, 0x2B	; 43
     952:	0e 94 06 05 	call	0xa0c	; 0xa0c <GLCD_WriteData>
	GLCD_WriteData(SED1335_LF);		
     956:	8f ee       	ldi	r24, 0xEF	; 239
     958:	0e 94 06 05 	call	0xa0c	; 0xa0c <GLCD_WriteData>
	GLCD_WriteData(SED1335_APL);	
     95c:	88 e2       	ldi	r24, 0x28	; 40
     95e:	0e 94 06 05 	call	0xa0c	; 0xa0c <GLCD_WriteData>
	GLCD_WriteData(SED1335_APH);	
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	0e 94 06 05 	call	0xa0c	; 0xa0c <GLCD_WriteData>
	
	GLCD_WriteCommand(SED1335_SCROLL);   
     968:	84 e4       	ldi	r24, 0x44	; 68
     96a:	0e 94 11 05 	call	0xa22	; 0xa22 <GLCD_WriteCommand>
	GLCD_WriteData(SED1335_SAD1L);		
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	0e 94 06 05 	call	0xa0c	; 0xa0c <GLCD_WriteData>
	GLCD_WriteData(SED1335_SAD1H);		
     974:	80 e0       	ldi	r24, 0x00	; 0
     976:	0e 94 06 05 	call	0xa0c	; 0xa0c <GLCD_WriteData>
	GLCD_WriteData(SED1335_SL1);		
     97a:	8f ee       	ldi	r24, 0xEF	; 239
     97c:	0e 94 06 05 	call	0xa0c	; 0xa0c <GLCD_WriteData>
	GLCD_WriteData(SED1335_SAD2L);		
     980:	80 eb       	ldi	r24, 0xB0	; 176
     982:	0e 94 06 05 	call	0xa0c	; 0xa0c <GLCD_WriteData>
	GLCD_WriteData(SED1335_SAD2H);		
     986:	84 e0       	ldi	r24, 0x04	; 4
     988:	0e 94 06 05 	call	0xa0c	; 0xa0c <GLCD_WriteData>
	GLCD_WriteData(SED1335_SL2);		
     98c:	8f ee       	ldi	r24, 0xEF	; 239
     98e:	0e 94 06 05 	call	0xa0c	; 0xa0c <GLCD_WriteData>
	GLCD_WriteData(SED1335_SAD3L);		
     992:	80 e0       	ldi	r24, 0x00	; 0
     994:	0e 94 06 05 	call	0xa0c	; 0xa0c <GLCD_WriteData>
	GLCD_WriteData(SED1335_SAD3H); 		
     998:	80 e0       	ldi	r24, 0x00	; 0
     99a:	0e 94 06 05 	call	0xa0c	; 0xa0c <GLCD_WriteData>
	GLCD_WriteData(SED1335_SAD4L);		
     99e:	80 e0       	ldi	r24, 0x00	; 0
     9a0:	0e 94 06 05 	call	0xa0c	; 0xa0c <GLCD_WriteData>
	GLCD_WriteData(SED1335_SAD4H);		
     9a4:	80 e0       	ldi	r24, 0x00	; 0
     9a6:	0e 94 06 05 	call	0xa0c	; 0xa0c <GLCD_WriteData>
	
	GLCD_WriteCommand(SED1335_CSRFORM);
     9aa:	8d e5       	ldi	r24, 0x5D	; 93
     9ac:	0e 94 11 05 	call	0xa22	; 0xa22 <GLCD_WriteCommand>
	GLCD_WriteData(SED1335_CRX);		
     9b0:	84 e0       	ldi	r24, 0x04	; 4
     9b2:	0e 94 06 05 	call	0xa0c	; 0xa0c <GLCD_WriteData>
	GLCD_WriteData(SED1335_CSRF_P2);		
     9b6:	87 e0       	ldi	r24, 0x07	; 7
     9b8:	0e 94 06 05 	call	0xa0c	; 0xa0c <GLCD_WriteData>
	
	GLCD_WriteCommand(SED1335_CGRAM_ADR);       
     9bc:	8c e5       	ldi	r24, 0x5C	; 92
     9be:	0e 94 11 05 	call	0xa22	; 0xa22 <GLCD_WriteCommand>
	GLCD_WriteData(SED1335_SAGL);			
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	0e 94 06 05 	call	0xa0c	; 0xa0c <GLCD_WriteData>
	GLCD_WriteData(SED1335_SAGH);				
     9c8:	80 e7       	ldi	r24, 0x70	; 112
     9ca:	0e 94 06 05 	call	0xa0c	; 0xa0c <GLCD_WriteData>
	
	GLCD_WriteCommand(SED1335_CSRDIR_R);      
     9ce:	8c e4       	ldi	r24, 0x4C	; 76
     9d0:	0e 94 11 05 	call	0xa22	; 0xa22 <GLCD_WriteCommand>

	GLCD_WriteCommand(SED1335_HDOT_SCR);       
     9d4:	8a e5       	ldi	r24, 0x5A	; 90
     9d6:	0e 94 11 05 	call	0xa22	; 0xa22 <GLCD_WriteCommand>
	GLCD_WriteData(SED1335_SCRD);			
     9da:	80 e0       	ldi	r24, 0x00	; 0
     9dc:	0e 94 06 05 	call	0xa0c	; 0xa0c <GLCD_WriteData>
	
	GLCD_WriteCommand(SED1335_OVLAY);            
     9e0:	8b e5       	ldi	r24, 0x5B	; 91
     9e2:	0e 94 11 05 	call	0xa22	; 0xa22 <GLCD_WriteCommand>
	GLCD_WriteData(SED1335_OVLAY_P1);			
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	0e 94 06 05 	call	0xa0c	; 0xa0c <GLCD_WriteData>
			
	GLCD_WriteCommand(SED1335_DISP_ON);
     9ec:	89 e5       	ldi	r24, 0x59	; 89
     9ee:	0e 94 11 05 	call	0xa22	; 0xa22 <GLCD_WriteCommand>
	GLCD_WriteData(SED1335_FLASH);
     9f2:	86 e1       	ldi	r24, 0x16	; 22
     9f4:	0e 94 06 05 	call	0xa0c	; 0xa0c <GLCD_WriteData>
     9f8:	08 95       	ret

000009fa <GLCD_InitPorts>:
#define SED1335_CS		(1 << PC3)
#define SED1335_A0		(1 << PC4)
//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------
void GLCD_InitPorts(void)
{
     9fa:	8f ef       	ldi	r24, 0xFF	; 255
     9fc:	8a bb       	out	0x1a, r24	; 26
SED1335_DATA_DIR = 0xFF;
SED1335_CONTROL_PORT |= (SED1335_A0 | SED1335_WR | SED1335_RD | SED1335_CS | SED1335_RES); 
     9fe:	85 b3       	in	r24, 0x15	; 21
     a00:	8f 61       	ori	r24, 0x1F	; 31
     a02:	85 bb       	out	0x15, r24	; 21
SED1335_CONTROL_DIR |= (SED1335_A0 | SED1335_WR | SED1335_RD | SED1335_CS | SED1335_RES); 
     a04:	84 b3       	in	r24, 0x14	; 20
     a06:	8f 61       	ori	r24, 0x1F	; 31
     a08:	84 bb       	out	0x14, r24	; 20
     a0a:	08 95       	ret

00000a0c <GLCD_WriteData>:
}
//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------
void GLCD_WriteData(unsigned char dataToWrite)
{
     a0c:	8b bb       	out	0x1b, r24	; 27
SED1335_DATA_PORT = dataToWrite;
SED1335_DATA_DIR = 0xFF;
     a0e:	8f ef       	ldi	r24, 0xFF	; 255
     a10:	8a bb       	out	0x1a, r24	; 26
SED1335_CONTROL_PORT &= ~(SED1335_CS | SED1335_A0 | SED1335_WR);
     a12:	85 b3       	in	r24, 0x15	; 21
     a14:	83 7e       	andi	r24, 0xE3	; 227
     a16:	85 bb       	out	0x15, r24	; 21
asm("nop");
     a18:	00 00       	nop
SED1335_CONTROL_PORT |= (SED1335_CS | SED1335_A0 | SED1335_WR);
     a1a:	85 b3       	in	r24, 0x15	; 21
     a1c:	8c 61       	ori	r24, 0x1C	; 28
     a1e:	85 bb       	out	0x15, r24	; 21
     a20:	08 95       	ret

00000a22 <GLCD_WriteCommand>:
}
//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------
void GLCD_WriteCommand(unsigned char commandToWrite)
{
     a22:	8b bb       	out	0x1b, r24	; 27
SED1335_DATA_PORT = commandToWrite;
SED1335_DATA_DIR = 0xFF;
     a24:	8f ef       	ldi	r24, 0xFF	; 255
     a26:	8a bb       	out	0x1a, r24	; 26
SED1335_CONTROL_PORT &= ~(SED1335_CS |SED1335_WR);
     a28:	85 b3       	in	r24, 0x15	; 21
     a2a:	83 7f       	andi	r24, 0xF3	; 243
     a2c:	85 bb       	out	0x15, r24	; 21
asm("nop");
     a2e:	00 00       	nop
SED1335_CONTROL_PORT |= (SED1335_CS | SED1335_WR);
     a30:	85 b3       	in	r24, 0x15	; 21
     a32:	8c 60       	ori	r24, 0x0C	; 12
     a34:	85 bb       	out	0x15, r24	; 21
     a36:	08 95       	ret

00000a38 <GLCD_ReadData>:
}
//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------
unsigned char GLCD_ReadData(void)
{
     a38:	85 b3       	in	r24, 0x15	; 21
     a3a:	85 7f       	andi	r24, 0xF5	; 245
     a3c:	85 bb       	out	0x15, r24	; 21
unsigned char tmp;
SED1335_CONTROL_PORT &= ~(SED1335_CS | SED1335_RD);
asm("nop");
     a3e:	00 00       	nop
SED1335_DATA_DIR = 0x00;
     a40:	1a ba       	out	0x1a, r1	; 26
asm("nop");
     a42:	00 00       	nop
tmp =  SED1335_DATA_PIN;
     a44:	89 b3       	in	r24, 0x19	; 25
SED1335_CONTROL_PORT |= (SED1335_CS | SED1335_RD);
     a46:	95 b3       	in	r25, 0x15	; 21
     a48:	9a 60       	ori	r25, 0x0A	; 10
     a4a:	95 bb       	out	0x15, r25	; 21
return tmp;
}
     a4c:	99 27       	eor	r25, r25
     a4e:	08 95       	ret

00000a50 <GLCD_ReadByteFromROMMemory>:
//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------
unsigned char GLCD_ReadByteFromROMMemory(unsigned char * ptr)
{
     a50:	fc 01       	movw	r30, r24
     a52:	84 91       	lpm	r24, Z
return pgm_read_byte(ptr);
}
     a54:	99 27       	eor	r25, r25
     a56:	08 95       	ret

00000a58 <_delay>:
#include <avr/io.h>
#include <util/parity.h>
#include <util/delay.h>

void _delay(long microseconds)
{
     a58:	af 92       	push	r10
     a5a:	bf 92       	push	r11
     a5c:	cf 92       	push	r12
     a5e:	df 92       	push	r13
     a60:	ef 92       	push	r14
     a62:	ff 92       	push	r15
     a64:	0f 93       	push	r16
     a66:	1f 93       	push	r17
	_delay_ms(microseconds);
     a68:	0e 94 af 10 	call	0x215e	; 0x215e <__floatsisf>
     a6c:	5b 01       	movw	r10, r22
     a6e:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a70:	20 e0       	ldi	r18, 0x00	; 0
     a72:	30 e0       	ldi	r19, 0x00	; 0
     a74:	4a e7       	ldi	r20, 0x7A	; 122
     a76:	53 e4       	ldi	r21, 0x43	; 67
     a78:	0e 94 26 11 	call	0x224c	; 0x224c <__mulsf3>
     a7c:	7b 01       	movw	r14, r22
     a7e:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     a80:	20 e0       	ldi	r18, 0x00	; 0
     a82:	30 e0       	ldi	r19, 0x00	; 0
     a84:	40 e8       	ldi	r20, 0x80	; 128
     a86:	5f e3       	ldi	r21, 0x3F	; 63
     a88:	0e 94 b9 10 	call	0x2172	; 0x2172 <__eqsf2>
     a8c:	88 23       	and	r24, r24
     a8e:	1c f4       	brge	.+6      	; 0xa96 <_delay+0x3e>
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	24 c0       	rjmp	.+72     	; 0xade <_delay+0x86>
		__ticks = 1;
	else if (__tmp > 65535)
     a96:	20 e0       	ldi	r18, 0x00	; 0
     a98:	3f ef       	ldi	r19, 0xFF	; 255
     a9a:	4f e7       	ldi	r20, 0x7F	; 127
     a9c:	57 e4       	ldi	r21, 0x47	; 71
     a9e:	c8 01       	movw	r24, r16
     aa0:	b7 01       	movw	r22, r14
     aa2:	0e 94 bc 10 	call	0x2178	; 0x2178 <__gesf2>
     aa6:	18 16       	cp	r1, r24
     aa8:	ac f4       	brge	.+42     	; 0xad4 <_delay+0x7c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     aaa:	20 e0       	ldi	r18, 0x00	; 0
     aac:	30 e0       	ldi	r19, 0x00	; 0
     aae:	40 e2       	ldi	r20, 0x20	; 32
     ab0:	51 e4       	ldi	r21, 0x41	; 65
     ab2:	c6 01       	movw	r24, r12
     ab4:	b5 01       	movw	r22, r10
     ab6:	0e 94 26 11 	call	0x224c	; 0x224c <__mulsf3>
     aba:	0e 94 92 10 	call	0x2124	; 0x2124 <__fixsfsi>
     abe:	06 c0       	rjmp	.+12     	; 0xacc <_delay+0x74>
     ac0:	89 e1       	ldi	r24, 0x19	; 25
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	01 97       	sbiw	r24, 0x01	; 1
     ac6:	f1 f7       	brne	.-4      	; 0xac4 <_delay+0x6c>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ac8:	61 50       	subi	r22, 0x01	; 1
     aca:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     acc:	61 15       	cp	r22, r1
     ace:	71 05       	cpc	r23, r1
     ad0:	b9 f7       	brne	.-18     	; 0xac0 <_delay+0x68>
     ad2:	07 c0       	rjmp	.+14     	; 0xae2 <_delay+0x8a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ad4:	c8 01       	movw	r24, r16
     ad6:	b7 01       	movw	r22, r14
     ad8:	0e 94 92 10 	call	0x2124	; 0x2124 <__fixsfsi>
     adc:	cb 01       	movw	r24, r22
     ade:	01 97       	sbiw	r24, 0x01	; 1
     ae0:	f1 f7       	brne	.-4      	; 0xade <_delay+0x86>
     ae2:	1f 91       	pop	r17
     ae4:	0f 91       	pop	r16
     ae6:	ff 90       	pop	r15
     ae8:	ef 90       	pop	r14
     aea:	df 90       	pop	r13
     aec:	cf 90       	pop	r12
     aee:	bf 90       	pop	r11
     af0:	af 90       	pop	r10
     af2:	08 95       	ret

00000af4 <Write_ps2data>:
	PORTC = 0xFF;
	return 0;
}

void Write_ps2data(int data)
{
     af4:	cf 93       	push	r28
     af6:	df 93       	push	r29
     af8:	ec 01       	movw	r28, r24
	CBI(DATADDR,DATA);       // Make DATA input
     afa:	a6 98       	cbi	0x14, 6	; 20
	CBI(DATAPORT,DATA);      // Make DATA open
     afc:	ae 98       	cbi	0x15, 6	; 21
	SBI(CLKDDR,CLK);         // Make CLK output
     afe:	a7 9a       	sbi	0x14, 7	; 20
	CBI(CLKPORT,CLK);        // Make CLK open
     b00:	af 98       	cbi	0x15, 7	; 21
	
	CBI(CLKPORT,CLK);	       // Cancel the mouse (if transmitting)
     b02:	af 98       	cbi	0x15, 7	; 21
	_delay(100);
     b04:	64 e6       	ldi	r22, 0x64	; 100
     b06:	70 e0       	ldi	r23, 0x00	; 0
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	0e 94 2c 05 	call	0xa58	; 0xa58 <_delay>
	SBI(DATADDR,DATA);       // Make DATA output
     b10:	a6 9a       	sbi	0x14, 6	; 20
	CBI(DATAPORT,DATA);      // Generate startbit
     b12:	ae 98       	cbi	0x15, 6	; 21
	_delay(100);
     b14:	64 e6       	ldi	r22, 0x64	; 100
     b16:	70 e0       	ldi	r23, 0x00	; 0
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	0e 94 2c 05 	call	0xa58	; 0xa58 <_delay>
	CBI(CLKDDR,CLK);         // Make CLK input
     b20:	a7 98       	cbi	0x14, 7	; 20
	CBI(CLKPORT,CLK);        // Make CLK open
     b22:	af 98       	cbi	0x15, 7	; 21
	
	LOOP_UNTIL_BIT_IS_CLEAR(CLKPIN,CLK);     // Send first data bit
     b24:	9f 99       	sbic	0x13, 7	; 19
     b26:	fe cf       	rjmp	.-4      	; 0xb24 <Write_ps2data+0x30>
	if((data&0x01)==0){CBI(DATAPORT,DATA);}
     b28:	c0 fd       	sbrc	r28, 0
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <Write_ps2data+0x3c>
     b2c:	ae 98       	cbi	0x15, 6	; 21
     b2e:	01 c0       	rjmp	.+2      	; 0xb32 <Write_ps2data+0x3e>
	else SBI(DATAPORT,DATA);
     b30:	ae 9a       	sbi	0x15, 6	; 21
	LOOP_UNTIL_BIT_IS_SET(CLKPIN,CLK);
     b32:	9f 9b       	sbis	0x13, 7	; 19
     b34:	fe cf       	rjmp	.-4      	; 0xb32 <Write_ps2data+0x3e>
	
	LOOP_UNTIL_BIT_IS_CLEAR(CLKPIN,CLK);     // Send first data bit
     b36:	9f 99       	sbic	0x13, 7	; 19
     b38:	fe cf       	rjmp	.-4      	; 0xb36 <Write_ps2data+0x42>
	if((data&0x02)==0){CBI(DATAPORT,DATA);}
     b3a:	c1 fd       	sbrc	r28, 1
     b3c:	02 c0       	rjmp	.+4      	; 0xb42 <Write_ps2data+0x4e>
     b3e:	ae 98       	cbi	0x15, 6	; 21
     b40:	01 c0       	rjmp	.+2      	; 0xb44 <Write_ps2data+0x50>
	else SBI(DATAPORT,DATA);
     b42:	ae 9a       	sbi	0x15, 6	; 21
	LOOP_UNTIL_BIT_IS_SET(CLKPIN,CLK);
     b44:	9f 9b       	sbis	0x13, 7	; 19
     b46:	fe cf       	rjmp	.-4      	; 0xb44 <Write_ps2data+0x50>
													
	LOOP_UNTIL_BIT_IS_CLEAR(CLKPIN,CLK);     // etc.
     b48:	9f 99       	sbic	0x13, 7	; 19
     b4a:	fe cf       	rjmp	.-4      	; 0xb48 <Write_ps2data+0x54>
	if((data&0x04)==0){CBI(DATAPORT,DATA);}
     b4c:	c2 fd       	sbrc	r28, 2
     b4e:	02 c0       	rjmp	.+4      	; 0xb54 <Write_ps2data+0x60>
     b50:	ae 98       	cbi	0x15, 6	; 21
     b52:	01 c0       	rjmp	.+2      	; 0xb56 <Write_ps2data+0x62>
	else SBI(DATAPORT,DATA);
     b54:	ae 9a       	sbi	0x15, 6	; 21
	LOOP_UNTIL_BIT_IS_SET(CLKPIN,CLK);
     b56:	9f 9b       	sbis	0x13, 7	; 19
     b58:	fe cf       	rjmp	.-4      	; 0xb56 <Write_ps2data+0x62>
	
	LOOP_UNTIL_BIT_IS_CLEAR(CLKPIN,CLK);
     b5a:	9f 99       	sbic	0x13, 7	; 19
     b5c:	fe cf       	rjmp	.-4      	; 0xb5a <Write_ps2data+0x66>
	if((data&0x08)==0){CBI(DATAPORT,DATA);}
     b5e:	c3 fd       	sbrc	r28, 3
     b60:	02 c0       	rjmp	.+4      	; 0xb66 <Write_ps2data+0x72>
     b62:	ae 98       	cbi	0x15, 6	; 21
     b64:	01 c0       	rjmp	.+2      	; 0xb68 <Write_ps2data+0x74>
	else SBI(DATAPORT,DATA);
     b66:	ae 9a       	sbi	0x15, 6	; 21
	LOOP_UNTIL_BIT_IS_SET(CLKPIN,CLK);
     b68:	9f 9b       	sbis	0x13, 7	; 19
     b6a:	fe cf       	rjmp	.-4      	; 0xb68 <Write_ps2data+0x74>
	
	LOOP_UNTIL_BIT_IS_CLEAR(CLKPIN,CLK);
     b6c:	9f 99       	sbic	0x13, 7	; 19
     b6e:	fe cf       	rjmp	.-4      	; 0xb6c <Write_ps2data+0x78>
	if((data&0x10)==0){CBI(DATAPORT,DATA);}
     b70:	c4 fd       	sbrc	r28, 4
     b72:	02 c0       	rjmp	.+4      	; 0xb78 <Write_ps2data+0x84>
     b74:	ae 98       	cbi	0x15, 6	; 21
     b76:	01 c0       	rjmp	.+2      	; 0xb7a <Write_ps2data+0x86>
	else SBI(DATAPORT,DATA);
     b78:	ae 9a       	sbi	0x15, 6	; 21
	LOOP_UNTIL_BIT_IS_SET(CLKPIN,CLK);
     b7a:	9f 9b       	sbis	0x13, 7	; 19
     b7c:	fe cf       	rjmp	.-4      	; 0xb7a <Write_ps2data+0x86>
	
	LOOP_UNTIL_BIT_IS_CLEAR(CLKPIN,CLK);
     b7e:	9f 99       	sbic	0x13, 7	; 19
     b80:	fe cf       	rjmp	.-4      	; 0xb7e <Write_ps2data+0x8a>
	if((data&0x20)==0){CBI(DATAPORT,DATA);}
     b82:	c5 fd       	sbrc	r28, 5
     b84:	02 c0       	rjmp	.+4      	; 0xb8a <Write_ps2data+0x96>
     b86:	ae 98       	cbi	0x15, 6	; 21
     b88:	01 c0       	rjmp	.+2      	; 0xb8c <Write_ps2data+0x98>
	else SBI(DATAPORT,DATA);
     b8a:	ae 9a       	sbi	0x15, 6	; 21
	LOOP_UNTIL_BIT_IS_SET(CLKPIN,CLK);
     b8c:	9f 9b       	sbis	0x13, 7	; 19
     b8e:	fe cf       	rjmp	.-4      	; 0xb8c <Write_ps2data+0x98>
	
	LOOP_UNTIL_BIT_IS_CLEAR(CLKPIN,CLK);
     b90:	9f 99       	sbic	0x13, 7	; 19
     b92:	fe cf       	rjmp	.-4      	; 0xb90 <Write_ps2data+0x9c>
	if((data&0x40)==0){CBI(DATAPORT,DATA);}
     b94:	c6 fd       	sbrc	r28, 6
     b96:	02 c0       	rjmp	.+4      	; 0xb9c <Write_ps2data+0xa8>
     b98:	ae 98       	cbi	0x15, 6	; 21
     b9a:	01 c0       	rjmp	.+2      	; 0xb9e <Write_ps2data+0xaa>
	else SBI(DATAPORT,DATA);
     b9c:	ae 9a       	sbi	0x15, 6	; 21
	LOOP_UNTIL_BIT_IS_SET(CLKPIN,CLK);
     b9e:	9f 9b       	sbis	0x13, 7	; 19
     ba0:	fe cf       	rjmp	.-4      	; 0xb9e <Write_ps2data+0xaa>
	
	LOOP_UNTIL_BIT_IS_CLEAR(CLKPIN,CLK);
     ba2:	9f 99       	sbic	0x13, 7	; 19
     ba4:	fe cf       	rjmp	.-4      	; 0xba2 <Write_ps2data+0xae>
	if((data&0x80)==0){CBI(DATAPORT,DATA);}
     ba6:	c7 fd       	sbrc	r28, 7
     ba8:	02 c0       	rjmp	.+4      	; 0xbae <Write_ps2data+0xba>
     baa:	ae 98       	cbi	0x15, 6	; 21
     bac:	01 c0       	rjmp	.+2      	; 0xbb0 <Write_ps2data+0xbc>
	else SBI(DATAPORT,DATA);
     bae:	ae 9a       	sbi	0x15, 6	; 21
	LOOP_UNTIL_BIT_IS_SET(CLKPIN,CLK);
     bb0:	9f 9b       	sbis	0x13, 7	; 19
     bb2:	fe cf       	rjmp	.-4      	; 0xbb0 <Write_ps2data+0xbc>
	
	LOOP_UNTIL_BIT_IS_CLEAR(CLKPIN,CLK);             // Send parity bit
     bb4:	9f 99       	sbic	0x13, 7	; 19
     bb6:	fe cf       	rjmp	.-4      	; 0xbb4 <Write_ps2data+0xc0>
	if(parity_even_bit(data)==1){CBI(DATAPORT,DATA);}
     bb8:	9e 01       	movw	r18, r28
     bba:	02 2e       	mov	r0, r18
     bbc:	22 95       	swap	r18
     bbe:	20 25       	eor	r18, r0
     bc0:	02 2e       	mov	r0, r18
     bc2:	26 95       	lsr	r18
     bc4:	26 95       	lsr	r18
     bc6:	20 25       	eor	r18, r0
     bc8:	82 2f       	mov	r24, r18
     bca:	99 27       	eor	r25, r25
     bcc:	01 96       	adiw	r24, 0x01	; 1
     bce:	95 95       	asr	r25
     bd0:	87 95       	ror	r24
     bd2:	80 ff       	sbrs	r24, 0
     bd4:	02 c0       	rjmp	.+4      	; 0xbda <Write_ps2data+0xe6>
     bd6:	ae 98       	cbi	0x15, 6	; 21
     bd8:	01 c0       	rjmp	.+2      	; 0xbdc <Write_ps2data+0xe8>
	else SBI(DATAPORT,DATA);
     bda:	ae 9a       	sbi	0x15, 6	; 21
	LOOP_UNTIL_BIT_IS_SET(CLKPIN,CLK);
     bdc:	9f 9b       	sbis	0x13, 7	; 19
     bde:	fe cf       	rjmp	.-4      	; 0xbdc <Write_ps2data+0xe8>

	LOOP_UNTIL_BIT_IS_CLEAR(CLKPIN,CLK);         // Send stop bit
     be0:	9f 99       	sbic	0x13, 7	; 19
     be2:	fe cf       	rjmp	.-4      	; 0xbe0 <Write_ps2data+0xec>
	SBI(DATAPORT,DATA);
     be4:	ae 9a       	sbi	0x15, 6	; 21
	LOOP_UNTIL_BIT_IS_SET(CLKPIN,CLK);
     be6:	9f 9b       	sbis	0x13, 7	; 19
     be8:	fe cf       	rjmp	.-4      	; 0xbe6 <Write_ps2data+0xf2>
	
	CBI(DATADDR,DATA);
     bea:	a6 98       	cbi	0x14, 6	; 20
	CBI(DATAPORT,DATA);
     bec:	ae 98       	cbi	0x15, 6	; 21
	CBI(CLKDDR,CLK);
     bee:	a7 98       	cbi	0x14, 7	; 20
	CBI(CLKPORT,CLK);
     bf0:	af 98       	cbi	0x15, 7	; 21
	LOOP_UNTIL_BIT_IS_CLEAR(CLKPIN,CLK);    // Ignore acknowledge bit
     bf2:	9f 99       	sbic	0x13, 7	; 19
     bf4:	fe cf       	rjmp	.-4      	; 0xbf2 <Write_ps2data+0xfe>
	LOOP_UNTIL_BIT_IS_SET(CLKPIN,CLK);
     bf6:	9f 9b       	sbis	0x13, 7	; 19
     bf8:	fe cf       	rjmp	.-4      	; 0xbf6 <Write_ps2data+0x102>
     bfa:	df 91       	pop	r29
     bfc:	cf 91       	pop	r28
     bfe:	08 95       	ret

00000c00 <Read_ps2data>:
	_delay_ms(microseconds);
	//while(microseconds)microseconds--;	// Wait about "microseconds" microseconds (@ 4MHz oscillator)
}

int Read_ps2data(void)
{	
     c00:	ef 92       	push	r14
     c02:	ff 92       	push	r15
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	cf 93       	push	r28
     c0a:	df 93       	push	r29
     c0c:	cd b7       	in	r28, 0x3d	; 61
     c0e:	de b7       	in	r29, 0x3e	; 62
     c10:	60 97       	sbiw	r28, 0x10	; 16
     c12:	0f b6       	in	r0, 0x3f	; 63
     c14:	f8 94       	cli
     c16:	de bf       	out	0x3e, r29	; 62
     c18:	0f be       	out	0x3f, r0	; 63
     c1a:	cd bf       	out	0x3d, r28	; 61
	if(BIT_IS_SET(DATAPIN,DATA))parity=0;
	else parity=1;
	LOOP_UNTIL_BIT_IS_SET(CLKPIN,CLK);

	LOOP_UNTIL_BIT_IS_CLEAR(CLKPIN,CLK);     // Ignore stop bit
	LOOP_UNTIL_BIT_IS_SET(CLKPIN,CLK);
     c1c:	7e 01       	movw	r14, r28
     c1e:	08 94       	sec
     c20:	e1 1c       	adc	r14, r1
     c22:	f1 1c       	adc	r15, r1
	f=1;
	for(i=0;i<8;i++)   // Put all received bits in data
     c24:	8e 01       	movw	r16, r28
     c26:	0f 5e       	subi	r16, 0xEF	; 239
     c28:	1f 4f       	sbci	r17, 0xFF	; 255
	int d[8];
	int i,parity;
	int f=1;
	int data=0;
	
	CBI(CLKDDR,CLK);             // Make CLK input
     c2a:	a7 98       	cbi	0x14, 7	; 20
	CBI(DATADDR,DATADDR);        // Make DATA input     
     c2c:	34 b3       	in	r19, 0x14	; 20
     c2e:	24 b3       	in	r18, 0x14	; 20
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	02 c0       	rjmp	.+4      	; 0xc3a <Read_ps2data+0x3a>
     c36:	88 0f       	add	r24, r24
     c38:	99 1f       	adc	r25, r25
     c3a:	2a 95       	dec	r18
     c3c:	e2 f7       	brpl	.-8      	; 0xc36 <Read_ps2data+0x36>
     c3e:	80 95       	com	r24
     c40:	83 23       	and	r24, r19
     c42:	84 bb       	out	0x14, r24	; 20
	CBI(CLKPORT,CLK);            // Make CLK open
     c44:	af 98       	cbi	0x15, 7	; 21
	CBI(DATAPORT,DATA);          // Make CLK open
     c46:	ae 98       	cbi	0x15, 6	; 21
	
	LOOP_UNTIL_BIT_IS_CLEAR(CLKPIN,CLK);     // Ignore startbit
     c48:	9f 99       	sbic	0x13, 7	; 19
     c4a:	fe cf       	rjmp	.-4      	; 0xc48 <Read_ps2data+0x48>
	LOOP_UNTIL_BIT_IS_SET(CLKPIN,CLK);
     c4c:	9f 9b       	sbis	0x13, 7	; 19
     c4e:	fe cf       	rjmp	.-4      	; 0xc4c <Read_ps2data+0x4c>
	
	LOOP_UNTIL_BIT_IS_CLEAR(CLKPIN,CLK);     // Receive first databit
     c50:	9f 99       	sbic	0x13, 7	; 19
     c52:	fe cf       	rjmp	.-4      	; 0xc50 <Read_ps2data+0x50>
	if(BIT_IS_SET(DATAPIN,DATA))d[0]=1;
     c54:	9e 9b       	sbis	0x13, 6	; 19
     c56:	05 c0       	rjmp	.+10     	; 0xc62 <Read_ps2data+0x62>
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	9a 83       	std	Y+2, r25	; 0x02
     c5e:	89 83       	std	Y+1, r24	; 0x01
     c60:	02 c0       	rjmp	.+4      	; 0xc66 <Read_ps2data+0x66>
	else d[0]=0;
     c62:	1a 82       	std	Y+2, r1	; 0x02
     c64:	19 82       	std	Y+1, r1	; 0x01
	LOOP_UNTIL_BIT_IS_SET(CLKPIN,CLK);
     c66:	9f 9b       	sbis	0x13, 7	; 19
     c68:	fe cf       	rjmp	.-4      	; 0xc66 <Read_ps2data+0x66>

	LOOP_UNTIL_BIT_IS_CLEAR(CLKPIN,CLK);     // Receive second databit
     c6a:	9f 99       	sbic	0x13, 7	; 19
     c6c:	fe cf       	rjmp	.-4      	; 0xc6a <Read_ps2data+0x6a>
	if(BIT_IS_SET(DATAPIN,DATA))d[1]=1;
     c6e:	9e 9b       	sbis	0x13, 6	; 19
     c70:	05 c0       	rjmp	.+10     	; 0xc7c <Read_ps2data+0x7c>
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	9c 83       	std	Y+4, r25	; 0x04
     c78:	8b 83       	std	Y+3, r24	; 0x03
     c7a:	02 c0       	rjmp	.+4      	; 0xc80 <Read_ps2data+0x80>
	else d[1]=0;
     c7c:	1c 82       	std	Y+4, r1	; 0x04
     c7e:	1b 82       	std	Y+3, r1	; 0x03
	LOOP_UNTIL_BIT_IS_SET(CLKPIN,CLK);
     c80:	9f 9b       	sbis	0x13, 7	; 19
     c82:	fe cf       	rjmp	.-4      	; 0xc80 <Read_ps2data+0x80>

	LOOP_UNTIL_BIT_IS_CLEAR(CLKPIN,CLK);     // etc.
     c84:	9f 99       	sbic	0x13, 7	; 19
     c86:	fe cf       	rjmp	.-4      	; 0xc84 <Read_ps2data+0x84>
	if(BIT_IS_SET(DATAPIN,DATA))d[2]=1;
     c88:	9e 9b       	sbis	0x13, 6	; 19
     c8a:	05 c0       	rjmp	.+10     	; 0xc96 <Read_ps2data+0x96>
     c8c:	81 e0       	ldi	r24, 0x01	; 1
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	9e 83       	std	Y+6, r25	; 0x06
     c92:	8d 83       	std	Y+5, r24	; 0x05
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <Read_ps2data+0x9a>
	else d[2]=0;
     c96:	1e 82       	std	Y+6, r1	; 0x06
     c98:	1d 82       	std	Y+5, r1	; 0x05
	LOOP_UNTIL_BIT_IS_SET(CLKPIN,CLK);
     c9a:	9f 9b       	sbis	0x13, 7	; 19
     c9c:	fe cf       	rjmp	.-4      	; 0xc9a <Read_ps2data+0x9a>
	
	LOOP_UNTIL_BIT_IS_CLEAR(CLKPIN,CLK);
     c9e:	9f 99       	sbic	0x13, 7	; 19
     ca0:	fe cf       	rjmp	.-4      	; 0xc9e <Read_ps2data+0x9e>
	if(BIT_IS_SET(DATAPIN,DATA))d[3]=1;
     ca2:	9e 9b       	sbis	0x13, 6	; 19
     ca4:	05 c0       	rjmp	.+10     	; 0xcb0 <Read_ps2data+0xb0>
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	98 87       	std	Y+8, r25	; 0x08
     cac:	8f 83       	std	Y+7, r24	; 0x07
     cae:	02 c0       	rjmp	.+4      	; 0xcb4 <Read_ps2data+0xb4>
	else d[3]=0;
     cb0:	18 86       	std	Y+8, r1	; 0x08
     cb2:	1f 82       	std	Y+7, r1	; 0x07
	LOOP_UNTIL_BIT_IS_SET(CLKPIN,CLK);
     cb4:	9f 9b       	sbis	0x13, 7	; 19
     cb6:	fe cf       	rjmp	.-4      	; 0xcb4 <Read_ps2data+0xb4>
	
	LOOP_UNTIL_BIT_IS_CLEAR(CLKPIN,CLK);
     cb8:	9f 99       	sbic	0x13, 7	; 19
     cba:	fe cf       	rjmp	.-4      	; 0xcb8 <Read_ps2data+0xb8>
	if(BIT_IS_SET(DATAPIN,DATA))d[4]=1;
     cbc:	9e 9b       	sbis	0x13, 6	; 19
     cbe:	05 c0       	rjmp	.+10     	; 0xcca <Read_ps2data+0xca>
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	9a 87       	std	Y+10, r25	; 0x0a
     cc6:	89 87       	std	Y+9, r24	; 0x09
     cc8:	02 c0       	rjmp	.+4      	; 0xcce <Read_ps2data+0xce>
	else d[4]=0;
     cca:	1a 86       	std	Y+10, r1	; 0x0a
     ccc:	19 86       	std	Y+9, r1	; 0x09
	LOOP_UNTIL_BIT_IS_SET(CLKPIN,CLK);
     cce:	9f 9b       	sbis	0x13, 7	; 19
     cd0:	fe cf       	rjmp	.-4      	; 0xcce <Read_ps2data+0xce>

	LOOP_UNTIL_BIT_IS_CLEAR(CLKPIN,CLK);
     cd2:	9f 99       	sbic	0x13, 7	; 19
     cd4:	fe cf       	rjmp	.-4      	; 0xcd2 <Read_ps2data+0xd2>
	if(BIT_IS_SET(DATAPIN,DATA))d[5]=1;
     cd6:	9e 9b       	sbis	0x13, 6	; 19
     cd8:	05 c0       	rjmp	.+10     	; 0xce4 <Read_ps2data+0xe4>
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	9c 87       	std	Y+12, r25	; 0x0c
     ce0:	8b 87       	std	Y+11, r24	; 0x0b
     ce2:	02 c0       	rjmp	.+4      	; 0xce8 <Read_ps2data+0xe8>
	else d[5]=0;
     ce4:	1c 86       	std	Y+12, r1	; 0x0c
     ce6:	1b 86       	std	Y+11, r1	; 0x0b
	LOOP_UNTIL_BIT_IS_SET(CLKPIN,CLK);
     ce8:	9f 9b       	sbis	0x13, 7	; 19
     cea:	fe cf       	rjmp	.-4      	; 0xce8 <Read_ps2data+0xe8>
	
	LOOP_UNTIL_BIT_IS_CLEAR(CLKPIN,CLK);
     cec:	9f 99       	sbic	0x13, 7	; 19
     cee:	fe cf       	rjmp	.-4      	; 0xcec <Read_ps2data+0xec>
	if(BIT_IS_SET(DATAPIN,DATA))d[6]=1;
     cf0:	9e 9b       	sbis	0x13, 6	; 19
     cf2:	05 c0       	rjmp	.+10     	; 0xcfe <Read_ps2data+0xfe>
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	9e 87       	std	Y+14, r25	; 0x0e
     cfa:	8d 87       	std	Y+13, r24	; 0x0d
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <Read_ps2data+0x102>
	else d[6]=0;
     cfe:	1e 86       	std	Y+14, r1	; 0x0e
     d00:	1d 86       	std	Y+13, r1	; 0x0d
	LOOP_UNTIL_BIT_IS_SET(CLKPIN,CLK);
     d02:	9f 9b       	sbis	0x13, 7	; 19
     d04:	fe cf       	rjmp	.-4      	; 0xd02 <Read_ps2data+0x102>
	
	LOOP_UNTIL_BIT_IS_CLEAR(CLKPIN,CLK);
     d06:	9f 99       	sbic	0x13, 7	; 19
     d08:	fe cf       	rjmp	.-4      	; 0xd06 <Read_ps2data+0x106>
	if(BIT_IS_SET(DATAPIN,DATA))d[7]=1;
     d0a:	9e 9b       	sbis	0x13, 6	; 19
     d0c:	05 c0       	rjmp	.+10     	; 0xd18 <Read_ps2data+0x118>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	98 8b       	std	Y+16, r25	; 0x10
     d14:	8f 87       	std	Y+15, r24	; 0x0f
     d16:	02 c0       	rjmp	.+4      	; 0xd1c <Read_ps2data+0x11c>
	else d[7]=0;
     d18:	18 8a       	std	Y+16, r1	; 0x10
     d1a:	1f 86       	std	Y+15, r1	; 0x0f
	LOOP_UNTIL_BIT_IS_SET(CLKPIN,CLK);
     d1c:	9f 9b       	sbis	0x13, 7	; 19
     d1e:	fe cf       	rjmp	.-4      	; 0xd1c <Read_ps2data+0x11c>

	LOOP_UNTIL_BIT_IS_CLEAR(CLKPIN,CLK);     // Receive parity bit
     d20:	9f 99       	sbic	0x13, 7	; 19
     d22:	fe cf       	rjmp	.-4      	; 0xd20 <Read_ps2data+0x120>
	if(BIT_IS_SET(DATAPIN,DATA))parity=0;
     d24:	83 b3       	in	r24, 0x13	; 19
     d26:	68 2f       	mov	r22, r24
     d28:	77 27       	eor	r23, r23
	else parity=1;
	LOOP_UNTIL_BIT_IS_SET(CLKPIN,CLK);
     d2a:	9f 9b       	sbis	0x13, 7	; 19
     d2c:	fe cf       	rjmp	.-4      	; 0xd2a <Read_ps2data+0x12a>

	LOOP_UNTIL_BIT_IS_CLEAR(CLKPIN,CLK);     // Ignore stop bit
     d2e:	9f 99       	sbic	0x13, 7	; 19
     d30:	fe cf       	rjmp	.-4      	; 0xd2e <Read_ps2data+0x12e>
	LOOP_UNTIL_BIT_IS_SET(CLKPIN,CLK);
     d32:	9f 9b       	sbis	0x13, 7	; 19
     d34:	fe cf       	rjmp	.-4      	; 0xd32 <Read_ps2data+0x132>
     d36:	f7 01       	movw	r30, r14
     d38:	21 e0       	ldi	r18, 0x01	; 1
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	40 e0       	ldi	r20, 0x00	; 0
     d3e:	50 e0       	ldi	r21, 0x00	; 0
	f=1;
	for(i=0;i<8;i++)   // Put all received bits in data
	{
		data+=d[i]*f;
     d40:	81 91       	ld	r24, Z+
     d42:	91 91       	ld	r25, Z+
     d44:	dc 01       	movw	r26, r24
     d46:	2a 9f       	mul	r18, r26
     d48:	c0 01       	movw	r24, r0
     d4a:	2b 9f       	mul	r18, r27
     d4c:	90 0d       	add	r25, r0
     d4e:	3a 9f       	mul	r19, r26
     d50:	90 0d       	add	r25, r0
     d52:	11 24       	eor	r1, r1
     d54:	48 0f       	add	r20, r24
     d56:	59 1f       	adc	r21, r25
		f*=2;
     d58:	22 0f       	add	r18, r18
     d5a:	33 1f       	adc	r19, r19
	LOOP_UNTIL_BIT_IS_SET(CLKPIN,CLK);

	LOOP_UNTIL_BIT_IS_CLEAR(CLKPIN,CLK);     // Ignore stop bit
	LOOP_UNTIL_BIT_IS_SET(CLKPIN,CLK);
	f=1;
	for(i=0;i<8;i++)   // Put all received bits in data
     d5c:	e0 17       	cp	r30, r16
     d5e:	f1 07       	cpc	r31, r17
     d60:	79 f7       	brne	.-34     	; 0xd40 <Read_ps2data+0x140>
	{
		data+=d[i]*f;
		f*=2;
	}

	if(((parity==0)&&(parity_even_bit(data)==0))||((parity!=0)&&((data)!=0)))return data;   // Return data if received data is OK 
     d62:	66 ff       	sbrs	r22, 6
     d64:	0d c0       	rjmp	.+26     	; 0xd80 <Read_ps2data+0x180>
     d66:	84 2f       	mov	r24, r20
     d68:	08 2e       	mov	r0, r24
     d6a:	82 95       	swap	r24
     d6c:	80 25       	eor	r24, r0
     d6e:	08 2e       	mov	r0, r24
     d70:	86 95       	lsr	r24
     d72:	86 95       	lsr	r24
     d74:	80 25       	eor	r24, r0
     d76:	99 27       	eor	r25, r25
     d78:	01 96       	adiw	r24, 0x01	; 1
     d7a:	81 fd       	sbrc	r24, 1
     d7c:	04 c0       	rjmp	.+8      	; 0xd86 <Read_ps2data+0x186>
     d7e:	08 c0       	rjmp	.+16     	; 0xd90 <Read_ps2data+0x190>
     d80:	41 15       	cp	r20, r1
     d82:	51 05       	cpc	r21, r1
     d84:	29 f4       	brne	.+10     	; 0xd90 <Read_ps2data+0x190>
	else
	{		Write_ps2data(0xFE);      // Send the "ReSend" commando
     d86:	8e ef       	ldi	r24, 0xFE	; 254
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <Write_ps2data>
     d8e:	4d cf       	rjmp	.-358    	; 0xc2a <Read_ps2data+0x2a>
		return Read_ps2data();    // Receive data again
	}

	PORTC = 0xFF;
	return 0;
}
     d90:	ca 01       	movw	r24, r20
     d92:	60 96       	adiw	r28, 0x10	; 16
     d94:	0f b6       	in	r0, 0x3f	; 63
     d96:	f8 94       	cli
     d98:	de bf       	out	0x3e, r29	; 62
     d9a:	0f be       	out	0x3f, r0	; 63
     d9c:	cd bf       	out	0x3d, r28	; 61
     d9e:	df 91       	pop	r29
     da0:	cf 91       	pop	r28
     da2:	1f 91       	pop	r17
     da4:	0f 91       	pop	r16
     da6:	ff 90       	pop	r15
     da8:	ef 90       	pop	r14
     daa:	08 95       	ret

00000dac <decodeFunctionKey>:
 Version:        05.10.2008
 Description:    PS/2-Keyboard Scancode-Umwandlungen
----------------------------------------------------------------------------*/
#include "keyboard.h"

char decodeFunctionKey(int code) {
     dac:	82 31       	cpi	r24, 0x12	; 18
     dae:	91 05       	cpc	r25, r1
     db0:	09 f4       	brne	.+2      	; 0xdb4 <decodeFunctionKey+0x8>
     db2:	a1 c0       	rjmp	.+322    	; 0xef6 <decodeFunctionKey+0x14a>
	switch (code) {
     db4:	83 31       	cpi	r24, 0x13	; 19
     db6:	91 05       	cpc	r25, r1
     db8:	cc f5       	brge	.+114    	; 0xe2c <decodeFunctionKey+0x80>
     dba:	87 30       	cpi	r24, 0x07	; 7
     dbc:	91 05       	cpc	r25, r1
     dbe:	09 f4       	brne	.+2      	; 0xdc2 <decodeFunctionKey+0x16>
     dc0:	85 c0       	rjmp	.+266    	; 0xecc <decodeFunctionKey+0x120>
     dc2:	88 30       	cpi	r24, 0x08	; 8
     dc4:	91 05       	cpc	r25, r1
     dc6:	bc f4       	brge	.+46     	; 0xdf6 <decodeFunctionKey+0x4a>
     dc8:	84 30       	cpi	r24, 0x04	; 4
     dca:	91 05       	cpc	r25, r1
     dcc:	09 f4       	brne	.+2      	; 0xdd0 <decodeFunctionKey+0x24>
     dce:	75 c0       	rjmp	.+234    	; 0xeba <decodeFunctionKey+0x10e>
     dd0:	85 30       	cpi	r24, 0x05	; 5
     dd2:	91 05       	cpc	r25, r1
     dd4:	44 f4       	brge	.+16     	; 0xde6 <decodeFunctionKey+0x3a>
     dd6:	81 30       	cpi	r24, 0x01	; 1
     dd8:	91 05       	cpc	r25, r1
     dda:	09 f4       	brne	.+2      	; 0xdde <decodeFunctionKey+0x32>
     ddc:	68 c0       	rjmp	.+208    	; 0xeae <decodeFunctionKey+0x102>
     dde:	03 97       	sbiw	r24, 0x03	; 3
     de0:	09 f0       	breq	.+2      	; 0xde4 <decodeFunctionKey+0x38>
     de2:	62 c0       	rjmp	.+196    	; 0xea8 <decodeFunctionKey+0xfc>
     de4:	67 c0       	rjmp	.+206    	; 0xeb4 <decodeFunctionKey+0x108>
     de6:	85 30       	cpi	r24, 0x05	; 5
     de8:	91 05       	cpc	r25, r1
     dea:	09 f4       	brne	.+2      	; 0xdee <decodeFunctionKey+0x42>
     dec:	69 c0       	rjmp	.+210    	; 0xec0 <decodeFunctionKey+0x114>
     dee:	06 97       	sbiw	r24, 0x06	; 6
     df0:	09 f0       	breq	.+2      	; 0xdf4 <decodeFunctionKey+0x48>
     df2:	5a c0       	rjmp	.+180    	; 0xea8 <decodeFunctionKey+0xfc>
     df4:	68 c0       	rjmp	.+208    	; 0xec6 <decodeFunctionKey+0x11a>
     df6:	8b 30       	cpi	r24, 0x0B	; 11
     df8:	91 05       	cpc	r25, r1
     dfa:	09 f4       	brne	.+2      	; 0xdfe <decodeFunctionKey+0x52>
     dfc:	70 c0       	rjmp	.+224    	; 0xede <decodeFunctionKey+0x132>
     dfe:	8c 30       	cpi	r24, 0x0C	; 12
     e00:	91 05       	cpc	r25, r1
     e02:	44 f4       	brge	.+16     	; 0xe14 <decodeFunctionKey+0x68>
     e04:	89 30       	cpi	r24, 0x09	; 9
     e06:	91 05       	cpc	r25, r1
     e08:	09 f4       	brne	.+2      	; 0xe0c <decodeFunctionKey+0x60>
     e0a:	63 c0       	rjmp	.+198    	; 0xed2 <decodeFunctionKey+0x126>
     e0c:	0a 97       	sbiw	r24, 0x0a	; 10
     e0e:	09 f0       	breq	.+2      	; 0xe12 <decodeFunctionKey+0x66>
     e10:	4b c0       	rjmp	.+150    	; 0xea8 <decodeFunctionKey+0xfc>
     e12:	62 c0       	rjmp	.+196    	; 0xed8 <decodeFunctionKey+0x12c>
     e14:	8d 30       	cpi	r24, 0x0D	; 13
     e16:	91 05       	cpc	r25, r1
     e18:	09 f4       	brne	.+2      	; 0xe1c <decodeFunctionKey+0x70>
     e1a:	67 c0       	rjmp	.+206    	; 0xeea <decodeFunctionKey+0x13e>
     e1c:	8d 30       	cpi	r24, 0x0D	; 13
     e1e:	91 05       	cpc	r25, r1
     e20:	0c f4       	brge	.+2      	; 0xe24 <decodeFunctionKey+0x78>
     e22:	60 c0       	rjmp	.+192    	; 0xee4 <decodeFunctionKey+0x138>
     e24:	41 97       	sbiw	r24, 0x11	; 17
     e26:	09 f0       	breq	.+2      	; 0xe2a <decodeFunctionKey+0x7e>
     e28:	3f c0       	rjmp	.+126    	; 0xea8 <decodeFunctionKey+0xfc>
     e2a:	62 c0       	rjmp	.+196    	; 0xef0 <decodeFunctionKey+0x144>
     e2c:	86 37       	cpi	r24, 0x76	; 118
     e2e:	91 05       	cpc	r25, r1
     e30:	09 f4       	brne	.+2      	; 0xe34 <decodeFunctionKey+0x88>
     e32:	7c c0       	rjmp	.+248    	; 0xf2c <decodeFunctionKey+0x180>
     e34:	87 37       	cpi	r24, 0x77	; 119
     e36:	91 05       	cpc	r25, r1
     e38:	d4 f4       	brge	.+52     	; 0xe6e <decodeFunctionKey+0xc2>
     e3a:	88 35       	cpi	r24, 0x58	; 88
     e3c:	91 05       	cpc	r25, r1
     e3e:	09 f4       	brne	.+2      	; 0xe42 <decodeFunctionKey+0x96>
     e40:	63 c0       	rjmp	.+198    	; 0xf08 <decodeFunctionKey+0x15c>
     e42:	89 35       	cpi	r24, 0x59	; 89
     e44:	91 05       	cpc	r25, r1
     e46:	3c f4       	brge	.+14     	; 0xe56 <decodeFunctionKey+0xaa>
     e48:	84 31       	cpi	r24, 0x14	; 20
     e4a:	91 05       	cpc	r25, r1
     e4c:	09 f4       	brne	.+2      	; 0xe50 <decodeFunctionKey+0xa4>
     e4e:	56 c0       	rjmp	.+172    	; 0xefc <decodeFunctionKey+0x150>
     e50:	89 97       	sbiw	r24, 0x29	; 41
     e52:	51 f5       	brne	.+84     	; 0xea8 <decodeFunctionKey+0xfc>
     e54:	56 c0       	rjmp	.+172    	; 0xf02 <decodeFunctionKey+0x156>
     e56:	8a 35       	cpi	r24, 0x5A	; 90
     e58:	91 05       	cpc	r25, r1
     e5a:	09 f4       	brne	.+2      	; 0xe5e <decodeFunctionKey+0xb2>
     e5c:	5b c0       	rjmp	.+182    	; 0xf14 <decodeFunctionKey+0x168>
     e5e:	8a 35       	cpi	r24, 0x5A	; 90
     e60:	91 05       	cpc	r25, r1
     e62:	0c f4       	brge	.+2      	; 0xe66 <decodeFunctionKey+0xba>
     e64:	54 c0       	rjmp	.+168    	; 0xf0e <decodeFunctionKey+0x162>
     e66:	86 36       	cpi	r24, 0x66	; 102
     e68:	91 05       	cpc	r25, r1
     e6a:	f1 f4       	brne	.+60     	; 0xea8 <decodeFunctionKey+0xfc>
     e6c:	56 c0       	rjmp	.+172    	; 0xf1a <decodeFunctionKey+0x16e>
     e6e:	8e 37       	cpi	r24, 0x7E	; 126
     e70:	91 05       	cpc	r25, r1
     e72:	09 f4       	brne	.+2      	; 0xe76 <decodeFunctionKey+0xca>
     e74:	64 c0       	rjmp	.+200    	; 0xf3e <decodeFunctionKey+0x192>
     e76:	8f 37       	cpi	r24, 0x7F	; 127
     e78:	91 05       	cpc	r25, r1
     e7a:	44 f4       	brge	.+16     	; 0xe8c <decodeFunctionKey+0xe0>
     e7c:	87 37       	cpi	r24, 0x77	; 119
     e7e:	91 05       	cpc	r25, r1
     e80:	09 f4       	brne	.+2      	; 0xe84 <decodeFunctionKey+0xd8>
     e82:	57 c0       	rjmp	.+174    	; 0xf32 <decodeFunctionKey+0x186>
     e84:	88 37       	cpi	r24, 0x78	; 120
     e86:	91 05       	cpc	r25, r1
     e88:	79 f4       	brne	.+30     	; 0xea8 <decodeFunctionKey+0xfc>
     e8a:	56 c0       	rjmp	.+172    	; 0xf38 <decodeFunctionKey+0x18c>
     e8c:	80 3e       	cpi	r24, 0xE0	; 224
     e8e:	91 05       	cpc	r25, r1
     e90:	09 f4       	brne	.+2      	; 0xe94 <decodeFunctionKey+0xe8>
     e92:	46 c0       	rjmp	.+140    	; 0xf20 <decodeFunctionKey+0x174>
     e94:	81 3e       	cpi	r24, 0xE1	; 225
     e96:	91 05       	cpc	r25, r1
     e98:	09 f4       	brne	.+2      	; 0xe9c <decodeFunctionKey+0xf0>
     e9a:	45 c0       	rjmp	.+138    	; 0xf26 <decodeFunctionKey+0x17a>
     e9c:	83 38       	cpi	r24, 0x83	; 131
     e9e:	91 05       	cpc	r25, r1
     ea0:	19 f4       	brne	.+6      	; 0xea8 <decodeFunctionKey+0xfc>
     ea2:	8a e1       	ldi	r24, 0x1A	; 26
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	08 95       	ret
     ea8:	80 e0       	ldi	r24, 0x00	; 0
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	08 95       	ret
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	08 95       	ret
		case 0x01: return KEY_F9; break;
     eb4:	82 e0       	ldi	r24, 0x02	; 2
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	08 95       	ret
		case 0x03: return KEY_F5; break;
     eba:	83 e0       	ldi	r24, 0x03	; 3
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	08 95       	ret
		case 0x04: return KEY_F3; break;
     ec0:	84 e0       	ldi	r24, 0x04	; 4
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	08 95       	ret
		case 0x05: return KEY_F1; break;
     ec6:	85 e0       	ldi	r24, 0x05	; 5
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	08 95       	ret
		case 0x06: return KEY_F2; break;
     ecc:	86 e0       	ldi	r24, 0x06	; 6
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	08 95       	ret
		case 0x07: return KEY_F12; break;
     ed2:	87 e0       	ldi	r24, 0x07	; 7
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	08 95       	ret
		case 0x09: return KEY_F10; break;
     ed8:	88 e0       	ldi	r24, 0x08	; 8
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	08 95       	ret
		case 0x0a: return KEY_F8; break;
     ede:	89 e0       	ldi	r24, 0x09	; 9
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	08 95       	ret
		case 0x0b: return KEY_F6; break;
     ee4:	8a e0       	ldi	r24, 0x0A	; 10
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	08 95       	ret
		case 0x0c: return KEY_F4; break;
     eea:	8b e0       	ldi	r24, 0x0B	; 11
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	08 95       	ret
		case 0x0d: return KEY_TAB; break;
     ef0:	8c e0       	ldi	r24, 0x0C	; 12
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	08 95       	ret
		case 0x11: return KEY_ALT; break;
     ef6:	8d e0       	ldi	r24, 0x0D	; 13
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	08 95       	ret
		case 0x12: return KEY_SHIFTl; break;
     efc:	8e e0       	ldi	r24, 0x0E	; 14
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	08 95       	ret
		case 0x14: return KEY_STRGl; break;
     f02:	8f e0       	ldi	r24, 0x0F	; 15
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	08 95       	ret
		case 0x29: return KEY_SPACE; break;
     f08:	80 e1       	ldi	r24, 0x10	; 16
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	08 95       	ret
		case 0x58: return KEY_CAPS; break;
     f0e:	81 e1       	ldi	r24, 0x11	; 17
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	08 95       	ret
		case 0x59: return KEY_SHIFTr; break;
     f14:	82 e1       	ldi	r24, 0x12	; 18
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	08 95       	ret
		case 0x5a: return KEY_RETURN; break;
     f1a:	83 e1       	ldi	r24, 0x13	; 19
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	08 95       	ret
		case 0x66: return KEY_BACKSPACE; break;
     f20:	84 e1       	ldi	r24, 0x14	; 20
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	08 95       	ret
		case 0xe0: return KEY_ENTER; break;
     f26:	85 e1       	ldi	r24, 0x15	; 21
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	08 95       	ret
		case 0xe1: return KEY_PAUSE; break;
     f2c:	86 e1       	ldi	r24, 0x16	; 22
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	08 95       	ret
		case 0x76: return KEY_ESC; break;
     f32:	87 e1       	ldi	r24, 0x17	; 23
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	08 95       	ret
		case 0x77: return KEY_NUM; break;
     f38:	88 e1       	ldi	r24, 0x18	; 24
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	08 95       	ret
		case 0x78: return KEY_F11; break;
     f3e:	89 e1       	ldi	r24, 0x19	; 25
     f40:	90 e0       	ldi	r25, 0x00	; 0
		case 0x7e: return KEY_ROLLEN; break;
		case 0x83: return KEY_F7; break;
	}
	return 0;
}
     f42:	08 95       	ret

00000f44 <decodeChar>:

char decodeChar(int code) {
     f44:	82 34       	cpi	r24, 0x42	; 66
     f46:	91 05       	cpc	r25, r1
     f48:	09 f4       	brne	.+2      	; 0xf4c <decodeChar+0x8>
     f4a:	8d c1       	rjmp	.+794    	; 0x1266 <decodeChar+0x322>
	switch (code) {
     f4c:	83 34       	cpi	r24, 0x43	; 67
     f4e:	91 05       	cpc	r25, r1
     f50:	0c f0       	brlt	.+2      	; 0xf54 <decodeChar+0x10>
     f52:	97 c0       	rjmp	.+302    	; 0x1082 <decodeChar+0x13e>
     f54:	8a 32       	cpi	r24, 0x2A	; 42
     f56:	91 05       	cpc	r25, r1
     f58:	09 f4       	brne	.+2      	; 0xf5c <decodeChar+0x18>
     f5a:	61 c1       	rjmp	.+706    	; 0x121e <decodeChar+0x2da>
     f5c:	8b 32       	cpi	r24, 0x2B	; 43
     f5e:	91 05       	cpc	r25, r1
     f60:	0c f0       	brlt	.+2      	; 0xf64 <decodeChar+0x20>
     f62:	49 c0       	rjmp	.+146    	; 0xff6 <decodeChar+0xb2>
     f64:	8d 31       	cpi	r24, 0x1D	; 29
     f66:	91 05       	cpc	r25, r1
     f68:	09 f4       	brne	.+2      	; 0xf6c <decodeChar+0x28>
     f6a:	47 c1       	rjmp	.+654    	; 0x11fa <decodeChar+0x2b6>
     f6c:	8e 31       	cpi	r24, 0x1E	; 30
     f6e:	91 05       	cpc	r25, r1
     f70:	fc f4       	brge	.+62     	; 0xfb0 <decodeChar+0x6c>
     f72:	86 31       	cpi	r24, 0x16	; 22
     f74:	91 05       	cpc	r25, r1
     f76:	09 f4       	brne	.+2      	; 0xf7a <decodeChar+0x36>
     f78:	a9 c1       	rjmp	.+850    	; 0x12cc <decodeChar+0x388>
     f7a:	87 31       	cpi	r24, 0x17	; 23
     f7c:	91 05       	cpc	r25, r1
     f7e:	64 f4       	brge	.+24     	; 0xf98 <decodeChar+0x54>
     f80:	8e 30       	cpi	r24, 0x0E	; 14
     f82:	91 05       	cpc	r25, r1
     f84:	09 f4       	brne	.+2      	; 0xf88 <decodeChar+0x44>
     f86:	2a c1       	rjmp	.+596    	; 0x11dc <decodeChar+0x298>
     f88:	85 31       	cpi	r24, 0x15	; 21
     f8a:	91 05       	cpc	r25, r1
     f8c:	09 f4       	brne	.+2      	; 0xf90 <decodeChar+0x4c>
     f8e:	29 c1       	rjmp	.+594    	; 0x11e2 <decodeChar+0x29e>
     f90:	0d 97       	sbiw	r24, 0x0d	; 13
     f92:	09 f0       	breq	.+2      	; 0xf96 <decodeChar+0x52>
     f94:	1d c1       	rjmp	.+570    	; 0x11d0 <decodeChar+0x28c>
     f96:	1f c1       	rjmp	.+574    	; 0x11d6 <decodeChar+0x292>
     f98:	8b 31       	cpi	r24, 0x1B	; 27
     f9a:	91 05       	cpc	r25, r1
     f9c:	09 f4       	brne	.+2      	; 0xfa0 <decodeChar+0x5c>
     f9e:	27 c1       	rjmp	.+590    	; 0x11ee <decodeChar+0x2aa>
     fa0:	8c 31       	cpi	r24, 0x1C	; 28
     fa2:	91 05       	cpc	r25, r1
     fa4:	0c f0       	brlt	.+2      	; 0xfa8 <decodeChar+0x64>
     fa6:	26 c1       	rjmp	.+588    	; 0x11f4 <decodeChar+0x2b0>
     fa8:	4a 97       	sbiw	r24, 0x1a	; 26
     faa:	09 f0       	breq	.+2      	; 0xfae <decodeChar+0x6a>
     fac:	11 c1       	rjmp	.+546    	; 0x11d0 <decodeChar+0x28c>
     fae:	1c c1       	rjmp	.+568    	; 0x11e8 <decodeChar+0x2a4>
     fb0:	83 32       	cpi	r24, 0x23	; 35
     fb2:	91 05       	cpc	r25, r1
     fb4:	09 f4       	brne	.+2      	; 0xfb8 <decodeChar+0x74>
     fb6:	2a c1       	rjmp	.+596    	; 0x120c <decodeChar+0x2c8>
     fb8:	84 32       	cpi	r24, 0x24	; 36
     fba:	91 05       	cpc	r25, r1
     fbc:	64 f4       	brge	.+24     	; 0xfd6 <decodeChar+0x92>
     fbe:	81 32       	cpi	r24, 0x21	; 33
     fc0:	91 05       	cpc	r25, r1
     fc2:	09 f4       	brne	.+2      	; 0xfc6 <decodeChar+0x82>
     fc4:	1d c1       	rjmp	.+570    	; 0x1200 <decodeChar+0x2bc>
     fc6:	82 32       	cpi	r24, 0x22	; 34
     fc8:	91 05       	cpc	r25, r1
     fca:	0c f0       	brlt	.+2      	; 0xfce <decodeChar+0x8a>
     fcc:	1c c1       	rjmp	.+568    	; 0x1206 <decodeChar+0x2c2>
     fce:	4e 97       	sbiw	r24, 0x1e	; 30
     fd0:	09 f0       	breq	.+2      	; 0xfd4 <decodeChar+0x90>
     fd2:	fe c0       	rjmp	.+508    	; 0x11d0 <decodeChar+0x28c>
     fd4:	7e c1       	rjmp	.+764    	; 0x12d2 <decodeChar+0x38e>
     fd6:	85 32       	cpi	r24, 0x25	; 37
     fd8:	91 05       	cpc	r25, r1
     fda:	09 f4       	brne	.+2      	; 0xfde <decodeChar+0x9a>
     fdc:	7d c1       	rjmp	.+762    	; 0x12d8 <decodeChar+0x394>
     fde:	85 32       	cpi	r24, 0x25	; 37
     fe0:	91 05       	cpc	r25, r1
     fe2:	0c f4       	brge	.+2      	; 0xfe6 <decodeChar+0xa2>
     fe4:	16 c1       	rjmp	.+556    	; 0x1212 <decodeChar+0x2ce>
     fe6:	86 32       	cpi	r24, 0x26	; 38
     fe8:	91 05       	cpc	r25, r1
     fea:	09 f4       	brne	.+2      	; 0xfee <decodeChar+0xaa>
     fec:	78 c1       	rjmp	.+752    	; 0x12de <decodeChar+0x39a>
     fee:	89 97       	sbiw	r24, 0x29	; 41
     ff0:	09 f0       	breq	.+2      	; 0xff4 <decodeChar+0xb0>
     ff2:	ee c0       	rjmp	.+476    	; 0x11d0 <decodeChar+0x28c>
     ff4:	11 c1       	rjmp	.+546    	; 0x1218 <decodeChar+0x2d4>
     ff6:	84 33       	cpi	r24, 0x34	; 52
     ff8:	91 05       	cpc	r25, r1
     ffa:	09 f4       	brne	.+2      	; 0xffe <decodeChar+0xba>
     ffc:	25 c1       	rjmp	.+586    	; 0x1248 <decodeChar+0x304>
     ffe:	85 33       	cpi	r24, 0x35	; 53
    1000:	91 05       	cpc	r25, r1
    1002:	dc f4       	brge	.+54     	; 0x103a <decodeChar+0xf6>
    1004:	8e 32       	cpi	r24, 0x2E	; 46
    1006:	91 05       	cpc	r25, r1
    1008:	09 f4       	brne	.+2      	; 0x100c <decodeChar+0xc8>
    100a:	6c c1       	rjmp	.+728    	; 0x12e4 <decodeChar+0x3a0>
    100c:	8f 32       	cpi	r24, 0x2F	; 47
    100e:	91 05       	cpc	r25, r1
    1010:	44 f4       	brge	.+16     	; 0x1022 <decodeChar+0xde>
    1012:	8c 32       	cpi	r24, 0x2C	; 44
    1014:	91 05       	cpc	r25, r1
    1016:	09 f4       	brne	.+2      	; 0x101a <decodeChar+0xd6>
    1018:	08 c1       	rjmp	.+528    	; 0x122a <decodeChar+0x2e6>
    101a:	8d 97       	sbiw	r24, 0x2d	; 45
    101c:	0c f0       	brlt	.+2      	; 0x1020 <decodeChar+0xdc>
    101e:	08 c1       	rjmp	.+528    	; 0x1230 <decodeChar+0x2ec>
    1020:	01 c1       	rjmp	.+514    	; 0x1224 <decodeChar+0x2e0>
    1022:	82 33       	cpi	r24, 0x32	; 50
    1024:	91 05       	cpc	r25, r1
    1026:	09 f4       	brne	.+2      	; 0x102a <decodeChar+0xe6>
    1028:	09 c1       	rjmp	.+530    	; 0x123c <decodeChar+0x2f8>
    102a:	83 33       	cpi	r24, 0x33	; 51
    102c:	91 05       	cpc	r25, r1
    102e:	0c f0       	brlt	.+2      	; 0x1032 <decodeChar+0xee>
    1030:	08 c1       	rjmp	.+528    	; 0x1242 <decodeChar+0x2fe>
    1032:	c1 97       	sbiw	r24, 0x31	; 49
    1034:	09 f0       	breq	.+2      	; 0x1038 <decodeChar+0xf4>
    1036:	cc c0       	rjmp	.+408    	; 0x11d0 <decodeChar+0x28c>
    1038:	fe c0       	rjmp	.+508    	; 0x1236 <decodeChar+0x2f2>
    103a:	8b 33       	cpi	r24, 0x3B	; 59
    103c:	91 05       	cpc	r25, r1
    103e:	09 f4       	brne	.+2      	; 0x1042 <decodeChar+0xfe>
    1040:	0c c1       	rjmp	.+536    	; 0x125a <decodeChar+0x316>
    1042:	8c 33       	cpi	r24, 0x3C	; 60
    1044:	91 05       	cpc	r25, r1
    1046:	64 f4       	brge	.+24     	; 0x1060 <decodeChar+0x11c>
    1048:	86 33       	cpi	r24, 0x36	; 54
    104a:	91 05       	cpc	r25, r1
    104c:	09 f4       	brne	.+2      	; 0x1050 <decodeChar+0x10c>
    104e:	4d c1       	rjmp	.+666    	; 0x12ea <decodeChar+0x3a6>
    1050:	86 33       	cpi	r24, 0x36	; 54
    1052:	91 05       	cpc	r25, r1
    1054:	0c f4       	brge	.+2      	; 0x1058 <decodeChar+0x114>
    1056:	fb c0       	rjmp	.+502    	; 0x124e <decodeChar+0x30a>
    1058:	ca 97       	sbiw	r24, 0x3a	; 58
    105a:	09 f0       	breq	.+2      	; 0x105e <decodeChar+0x11a>
    105c:	b9 c0       	rjmp	.+370    	; 0x11d0 <decodeChar+0x28c>
    105e:	fa c0       	rjmp	.+500    	; 0x1254 <decodeChar+0x310>
    1060:	8d 33       	cpi	r24, 0x3D	; 61
    1062:	91 05       	cpc	r25, r1
    1064:	09 f4       	brne	.+2      	; 0x1068 <decodeChar+0x124>
    1066:	44 c1       	rjmp	.+648    	; 0x12f0 <decodeChar+0x3ac>
    1068:	8d 33       	cpi	r24, 0x3D	; 61
    106a:	91 05       	cpc	r25, r1
    106c:	0c f4       	brge	.+2      	; 0x1070 <decodeChar+0x12c>
    106e:	f8 c0       	rjmp	.+496    	; 0x1260 <decodeChar+0x31c>
    1070:	8e 33       	cpi	r24, 0x3E	; 62
    1072:	91 05       	cpc	r25, r1
    1074:	09 f4       	brne	.+2      	; 0x1078 <decodeChar+0x134>
    1076:	3f c1       	rjmp	.+638    	; 0x12f6 <decodeChar+0x3b2>
    1078:	81 34       	cpi	r24, 0x41	; 65
    107a:	91 05       	cpc	r25, r1
    107c:	09 f0       	breq	.+2      	; 0x1080 <decodeChar+0x13c>
    107e:	a8 c0       	rjmp	.+336    	; 0x11d0 <decodeChar+0x28c>
    1080:	3d c1       	rjmp	.+634    	; 0x12fc <decodeChar+0x3b8>
    1082:	81 36       	cpi	r24, 0x61	; 97
    1084:	91 05       	cpc	r25, r1
    1086:	09 f4       	brne	.+2      	; 0x108a <decodeChar+0x146>
    1088:	15 c1       	rjmp	.+554    	; 0x12b4 <decodeChar+0x370>
    108a:	82 36       	cpi	r24, 0x62	; 98
    108c:	91 05       	cpc	r25, r1
    108e:	0c f0       	brlt	.+2      	; 0x1092 <decodeChar+0x14e>
    1090:	4d c0       	rjmp	.+154    	; 0x112c <decodeChar+0x1e8>
    1092:	8c 34       	cpi	r24, 0x4C	; 76
    1094:	91 05       	cpc	r25, r1
    1096:	09 f4       	brne	.+2      	; 0x109a <decodeChar+0x156>
    1098:	f5 c0       	rjmp	.+490    	; 0x1284 <decodeChar+0x340>
    109a:	8d 34       	cpi	r24, 0x4D	; 77
    109c:	91 05       	cpc	r25, r1
    109e:	ec f4       	brge	.+58     	; 0x10da <decodeChar+0x196>
    10a0:	86 34       	cpi	r24, 0x46	; 70
    10a2:	91 05       	cpc	r25, r1
    10a4:	09 f4       	brne	.+2      	; 0x10a8 <decodeChar+0x164>
    10a6:	30 c1       	rjmp	.+608    	; 0x1308 <decodeChar+0x3c4>
    10a8:	87 34       	cpi	r24, 0x47	; 71
    10aa:	91 05       	cpc	r25, r1
    10ac:	4c f4       	brge	.+18     	; 0x10c0 <decodeChar+0x17c>
    10ae:	84 34       	cpi	r24, 0x44	; 68
    10b0:	91 05       	cpc	r25, r1
    10b2:	09 f4       	brne	.+2      	; 0x10b6 <decodeChar+0x172>
    10b4:	de c0       	rjmp	.+444    	; 0x1272 <decodeChar+0x32e>
    10b6:	85 34       	cpi	r24, 0x45	; 69
    10b8:	91 05       	cpc	r25, r1
    10ba:	0c f0       	brlt	.+2      	; 0x10be <decodeChar+0x17a>
    10bc:	22 c1       	rjmp	.+580    	; 0x1302 <decodeChar+0x3be>
    10be:	d6 c0       	rjmp	.+428    	; 0x126c <decodeChar+0x328>
    10c0:	8a 34       	cpi	r24, 0x4A	; 74
    10c2:	91 05       	cpc	r25, r1
    10c4:	09 f4       	brne	.+2      	; 0x10c8 <decodeChar+0x184>
    10c6:	23 c1       	rjmp	.+582    	; 0x130e <decodeChar+0x3ca>
    10c8:	8b 34       	cpi	r24, 0x4B	; 75
    10ca:	91 05       	cpc	r25, r1
    10cc:	0c f0       	brlt	.+2      	; 0x10d0 <decodeChar+0x18c>
    10ce:	d7 c0       	rjmp	.+430    	; 0x127e <decodeChar+0x33a>
    10d0:	89 34       	cpi	r24, 0x49	; 73
    10d2:	91 05       	cpc	r25, r1
    10d4:	09 f0       	breq	.+2      	; 0x10d8 <decodeChar+0x194>
    10d6:	7c c0       	rjmp	.+248    	; 0x11d0 <decodeChar+0x28c>
    10d8:	cf c0       	rjmp	.+414    	; 0x1278 <decodeChar+0x334>
    10da:	84 35       	cpi	r24, 0x54	; 84
    10dc:	91 05       	cpc	r25, r1
    10de:	09 f4       	brne	.+2      	; 0x10e2 <decodeChar+0x19e>
    10e0:	dd c0       	rjmp	.+442    	; 0x129c <decodeChar+0x358>
    10e2:	85 35       	cpi	r24, 0x55	; 85
    10e4:	91 05       	cpc	r25, r1
    10e6:	6c f4       	brge	.+26     	; 0x1102 <decodeChar+0x1be>
    10e8:	8e 34       	cpi	r24, 0x4E	; 78
    10ea:	91 05       	cpc	r25, r1
    10ec:	09 f4       	brne	.+2      	; 0x10f0 <decodeChar+0x1ac>
    10ee:	d0 c0       	rjmp	.+416    	; 0x1290 <decodeChar+0x34c>
    10f0:	8e 34       	cpi	r24, 0x4E	; 78
    10f2:	91 05       	cpc	r25, r1
    10f4:	0c f4       	brge	.+2      	; 0x10f8 <decodeChar+0x1b4>
    10f6:	c9 c0       	rjmp	.+402    	; 0x128a <decodeChar+0x346>
    10f8:	82 35       	cpi	r24, 0x52	; 82
    10fa:	91 05       	cpc	r25, r1
    10fc:	09 f0       	breq	.+2      	; 0x1100 <decodeChar+0x1bc>
    10fe:	68 c0       	rjmp	.+208    	; 0x11d0 <decodeChar+0x28c>
    1100:	ca c0       	rjmp	.+404    	; 0x1296 <decodeChar+0x352>
    1102:	8a 35       	cpi	r24, 0x5A	; 90
    1104:	91 05       	cpc	r25, r1
    1106:	09 f4       	brne	.+2      	; 0x110a <decodeChar+0x1c6>
    1108:	cf c0       	rjmp	.+414    	; 0x12a8 <decodeChar+0x364>
    110a:	8b 35       	cpi	r24, 0x5B	; 91
    110c:	91 05       	cpc	r25, r1
    110e:	2c f4       	brge	.+10     	; 0x111a <decodeChar+0x1d6>
    1110:	85 35       	cpi	r24, 0x55	; 85
    1112:	91 05       	cpc	r25, r1
    1114:	09 f0       	breq	.+2      	; 0x1118 <decodeChar+0x1d4>
    1116:	5c c0       	rjmp	.+184    	; 0x11d0 <decodeChar+0x28c>
    1118:	c4 c0       	rjmp	.+392    	; 0x12a2 <decodeChar+0x35e>
    111a:	8b 35       	cpi	r24, 0x5B	; 91
    111c:	91 05       	cpc	r25, r1
    111e:	09 f4       	brne	.+2      	; 0x1122 <decodeChar+0x1de>
    1120:	f9 c0       	rjmp	.+498    	; 0x1314 <decodeChar+0x3d0>
    1122:	8d 35       	cpi	r24, 0x5D	; 93
    1124:	91 05       	cpc	r25, r1
    1126:	09 f0       	breq	.+2      	; 0x112a <decodeChar+0x1e6>
    1128:	53 c0       	rjmp	.+166    	; 0x11d0 <decodeChar+0x28c>
    112a:	c1 c0       	rjmp	.+386    	; 0x12ae <decodeChar+0x36a>
    112c:	84 37       	cpi	r24, 0x74	; 116
    112e:	91 05       	cpc	r25, r1
    1130:	09 f4       	brne	.+2      	; 0x1134 <decodeChar+0x1f0>
    1132:	db c0       	rjmp	.+438    	; 0x12ea <decodeChar+0x3a6>
    1134:	85 37       	cpi	r24, 0x75	; 117
    1136:	91 05       	cpc	r25, r1
    1138:	34 f5       	brge	.+76     	; 0x1186 <decodeChar+0x242>
    113a:	8c 36       	cpi	r24, 0x6C	; 108
    113c:	91 05       	cpc	r25, r1
    113e:	09 f4       	brne	.+2      	; 0x1142 <decodeChar+0x1fe>
    1140:	d7 c0       	rjmp	.+430    	; 0x12f0 <decodeChar+0x3ac>
    1142:	8d 36       	cpi	r24, 0x6D	; 109
    1144:	91 05       	cpc	r25, r1
    1146:	64 f4       	brge	.+24     	; 0x1160 <decodeChar+0x21c>
    1148:	89 36       	cpi	r24, 0x69	; 105
    114a:	91 05       	cpc	r25, r1
    114c:	09 f4       	brne	.+2      	; 0x1150 <decodeChar+0x20c>
    114e:	be c0       	rjmp	.+380    	; 0x12cc <decodeChar+0x388>
    1150:	8b 36       	cpi	r24, 0x6B	; 107
    1152:	91 05       	cpc	r25, r1
    1154:	09 f4       	brne	.+2      	; 0x1158 <decodeChar+0x214>
    1156:	c0 c0       	rjmp	.+384    	; 0x12d8 <decodeChar+0x394>
    1158:	86 36       	cpi	r24, 0x66	; 102
    115a:	91 05       	cpc	r25, r1
    115c:	c9 f5       	brne	.+114    	; 0x11d0 <decodeChar+0x28c>
    115e:	ad c0       	rjmp	.+346    	; 0x12ba <decodeChar+0x376>
    1160:	81 37       	cpi	r24, 0x71	; 113
    1162:	91 05       	cpc	r25, r1
    1164:	09 f4       	brne	.+2      	; 0x1168 <decodeChar+0x224>
    1166:	ca c0       	rjmp	.+404    	; 0x12fc <decodeChar+0x3b8>
    1168:	82 37       	cpi	r24, 0x72	; 114
    116a:	91 05       	cpc	r25, r1
    116c:	24 f4       	brge	.+8      	; 0x1176 <decodeChar+0x232>
    116e:	80 37       	cpi	r24, 0x70	; 112
    1170:	91 05       	cpc	r25, r1
    1172:	71 f5       	brne	.+92     	; 0x11d0 <decodeChar+0x28c>
    1174:	c6 c0       	rjmp	.+396    	; 0x1302 <decodeChar+0x3be>
    1176:	82 37       	cpi	r24, 0x72	; 114
    1178:	91 05       	cpc	r25, r1
    117a:	09 f4       	brne	.+2      	; 0x117e <decodeChar+0x23a>
    117c:	aa c0       	rjmp	.+340    	; 0x12d2 <decodeChar+0x38e>
    117e:	83 37       	cpi	r24, 0x73	; 115
    1180:	91 05       	cpc	r25, r1
    1182:	31 f5       	brne	.+76     	; 0x11d0 <decodeChar+0x28c>
    1184:	af c0       	rjmp	.+350    	; 0x12e4 <decodeChar+0x3a0>
    1186:	8a 37       	cpi	r24, 0x7A	; 122
    1188:	91 05       	cpc	r25, r1
    118a:	09 f4       	brne	.+2      	; 0x118e <decodeChar+0x24a>
    118c:	a8 c0       	rjmp	.+336    	; 0x12de <decodeChar+0x39a>
    118e:	8b 37       	cpi	r24, 0x7B	; 123
    1190:	91 05       	cpc	r25, r1
    1192:	64 f4       	brge	.+24     	; 0x11ac <decodeChar+0x268>
    1194:	86 37       	cpi	r24, 0x76	; 118
    1196:	91 05       	cpc	r25, r1
    1198:	09 f4       	brne	.+2      	; 0x119c <decodeChar+0x258>
    119a:	92 c0       	rjmp	.+292    	; 0x12c0 <decodeChar+0x37c>
    119c:	86 37       	cpi	r24, 0x76	; 118
    119e:	91 05       	cpc	r25, r1
    11a0:	0c f4       	brge	.+2      	; 0x11a4 <decodeChar+0x260>
    11a2:	a9 c0       	rjmp	.+338    	; 0x12f6 <decodeChar+0x3b2>
    11a4:	89 37       	cpi	r24, 0x79	; 121
    11a6:	91 05       	cpc	r25, r1
    11a8:	99 f4       	brne	.+38     	; 0x11d0 <decodeChar+0x28c>
    11aa:	b4 c0       	rjmp	.+360    	; 0x1314 <decodeChar+0x3d0>
    11ac:	8c 37       	cpi	r24, 0x7C	; 124
    11ae:	91 05       	cpc	r25, r1
    11b0:	09 f4       	brne	.+2      	; 0x11b4 <decodeChar+0x270>
    11b2:	89 c0       	rjmp	.+274    	; 0x12c6 <decodeChar+0x382>
    11b4:	8c 37       	cpi	r24, 0x7C	; 124
    11b6:	91 05       	cpc	r25, r1
    11b8:	0c f4       	brge	.+2      	; 0x11bc <decodeChar+0x278>
    11ba:	a9 c0       	rjmp	.+338    	; 0x130e <decodeChar+0x3ca>
    11bc:	8d 37       	cpi	r24, 0x7D	; 125
    11be:	91 05       	cpc	r25, r1
    11c0:	09 f4       	brne	.+2      	; 0x11c4 <decodeChar+0x280>
    11c2:	a2 c0       	rjmp	.+324    	; 0x1308 <decodeChar+0x3c4>
    11c4:	80 3e       	cpi	r24, 0xE0	; 224
    11c6:	91 05       	cpc	r25, r1
    11c8:	19 f4       	brne	.+6      	; 0x11d0 <decodeChar+0x28c>
    11ca:	8a e0       	ldi	r24, 0x0A	; 10
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	08 95       	ret
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	08 95       	ret
    11d6:	89 e0       	ldi	r24, 0x09	; 9
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	08 95       	ret
		case 0x0d: return 0x09; break; //TAB(horizontalTab)
    11dc:	8e e5       	ldi	r24, 0x5E	; 94
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	08 95       	ret
		case 0x0e: return '^'; break;
    11e2:	81 e7       	ldi	r24, 0x71	; 113
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	08 95       	ret
		case 0x15: return 'q'; break;
    11e8:	89 e7       	ldi	r24, 0x79	; 121
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	08 95       	ret
		case 0x16: return '1'; break;
		case 0x1a: return 'y'; break;
    11ee:	83 e7       	ldi	r24, 0x73	; 115
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	08 95       	ret
		case 0x1b: return 's'; break;
    11f4:	81 e6       	ldi	r24, 0x61	; 97
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	08 95       	ret
		case 0x1c: return 'a'; break;
    11fa:	87 e7       	ldi	r24, 0x77	; 119
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	08 95       	ret
		case 0x1d: return 'w'; break;
    1200:	83 e6       	ldi	r24, 0x63	; 99
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	08 95       	ret
		case 0x1e: return '2'; break;
		case 0x21: return 'c'; break;
    1206:	88 e7       	ldi	r24, 0x78	; 120
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	08 95       	ret
		case 0x22: return 'x'; break;
    120c:	84 e6       	ldi	r24, 0x64	; 100
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	08 95       	ret
		case 0x23: return 'd'; break;
    1212:	85 e6       	ldi	r24, 0x65	; 101
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	08 95       	ret
		case 0x24: return 'e'; break;
    1218:	80 e2       	ldi	r24, 0x20	; 32
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	08 95       	ret
		case 0x25: return '4'; break;
		case 0x26: return '3'; break;
		case 0x29: return 0x20; break; //SPACE(Space)
    121e:	86 e7       	ldi	r24, 0x76	; 118
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	08 95       	ret
		case 0x2a: return 'v'; break;
    1224:	86 e6       	ldi	r24, 0x66	; 102
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	08 95       	ret
		case 0x2b: return 'f'; break;
    122a:	84 e7       	ldi	r24, 0x74	; 116
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	08 95       	ret
		case 0x2c: return 't'; break;
    1230:	82 e7       	ldi	r24, 0x72	; 114
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	08 95       	ret
		case 0x2d: return 'r'; break;
    1236:	8e e6       	ldi	r24, 0x6E	; 110
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	08 95       	ret
		case 0x2e: return '5'; break;
		case 0x31: return 'n'; break;
    123c:	82 e6       	ldi	r24, 0x62	; 98
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	08 95       	ret
		case 0x32: return 'b'; break;
    1242:	88 e6       	ldi	r24, 0x68	; 104
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	08 95       	ret
		case 0x33: return 'h'; break;
    1248:	87 e6       	ldi	r24, 0x67	; 103
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	08 95       	ret
		case 0x34: return 'g'; break;
    124e:	8a e7       	ldi	r24, 0x7A	; 122
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	08 95       	ret
		case 0x35: return 'z'; break;
    1254:	8d e6       	ldi	r24, 0x6D	; 109
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	08 95       	ret
		case 0x36: return '6'; break;
//	 	case 0x39: return ';'; break;
		case 0x3a: return 'm'; break;
    125a:	8a e6       	ldi	r24, 0x6A	; 106
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	08 95       	ret
		case 0x3b: return 'j'; break;
    1260:	85 e7       	ldi	r24, 0x75	; 117
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	08 95       	ret
		case 0x3c: return 'u'; break;
    1266:	8b e6       	ldi	r24, 0x6B	; 107
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	08 95       	ret
		case 0x3d: return '7'; break;
		case 0x3e: return '8'; break;
		case 0x41: return ','; break;
		case 0x42: return 'k'; break;
    126c:	89 e6       	ldi	r24, 0x69	; 105
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	08 95       	ret
		case 0x43: return 'i'; break;
    1272:	8f e6       	ldi	r24, 0x6F	; 111
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	08 95       	ret
		case 0x44: return 'o'; break;
    1278:	8e e2       	ldi	r24, 0x2E	; 46
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	08 95       	ret
		case 0x45: return '0'; break;
		case 0x46: return '9'; break;
		case 0x49: return '.'; break;
    127e:	8c e6       	ldi	r24, 0x6C	; 108
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	08 95       	ret
		case 0x4a: return '-'; break;
		case 0x4b: return 'l'; break;
    1284:	86 ef       	ldi	r24, 0xF6	; 246
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	08 95       	ret
		case 0x4c: return 'ö'; break;
    128a:	80 e7       	ldi	r24, 0x70	; 112
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	08 95       	ret
		case 0x4d: return 'p'; break;
    1290:	8f ed       	ldi	r24, 0xDF	; 223
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	08 95       	ret
		case 0x4e: return 'ß'; break;
    1296:	84 ee       	ldi	r24, 0xE4	; 228
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	08 95       	ret
		case 0x52: return 'ä'; break;
    129c:	8c ef       	ldi	r24, 0xFC	; 252
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	08 95       	ret
		case 0x54: return 'ü'; break;
    12a2:	80 e6       	ldi	r24, 0x60	; 96
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	08 95       	ret
		case 0x55: return '`'; break;
    12a8:	8d e0       	ldi	r24, 0x0D	; 13
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	08 95       	ret
		case 0x5a: return 0x0d; break; //RETURN(CarriageReturn)
    12ae:	83 e2       	ldi	r24, 0x23	; 35
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	08 95       	ret
		case 0x5b: return '+'; break;
		case 0x5d: return '#'; break;
    12b4:	8c e3       	ldi	r24, 0x3C	; 60
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	08 95       	ret
		case 0x61: return '<'; break;
    12ba:	88 e0       	ldi	r24, 0x08	; 8
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	08 95       	ret
		case 0x66: return 0x08; break; //BACKSPACE(Backspace)
    12c0:	8b e1       	ldi	r24, 0x1B	; 27
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	08 95       	ret
		case 0x71: return ','; break;
		case 0x72: return '2'; break;
		case 0x73: return '5'; break;
		case 0x74: return '6'; break;
		case 0x75: return '8'; break;
		case 0x76: return 0x1b; break; // ESC(Escape)
    12c6:	8a e2       	ldi	r24, 0x2A	; 42
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	08 95       	ret
		case 0x79: return '+'; break;
		case 0x7a: return '3'; break;
		case 0x7b: return '-'; break;
		case 0x7c: return '*'; break;
    12cc:	81 e3       	ldi	r24, 0x31	; 49
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	08 95       	ret
    12d2:	82 e3       	ldi	r24, 0x32	; 50
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	08 95       	ret
    12d8:	84 e3       	ldi	r24, 0x34	; 52
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	08 95       	ret
    12de:	83 e3       	ldi	r24, 0x33	; 51
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	08 95       	ret
    12e4:	85 e3       	ldi	r24, 0x35	; 53
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	08 95       	ret
    12ea:	86 e3       	ldi	r24, 0x36	; 54
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	08 95       	ret
    12f0:	87 e3       	ldi	r24, 0x37	; 55
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	08 95       	ret
    12f6:	88 e3       	ldi	r24, 0x38	; 56
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	08 95       	ret
    12fc:	8c e2       	ldi	r24, 0x2C	; 44
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	08 95       	ret
    1302:	80 e3       	ldi	r24, 0x30	; 48
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	08 95       	ret
    1308:	89 e3       	ldi	r24, 0x39	; 57
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	08 95       	ret
    130e:	8d e2       	ldi	r24, 0x2D	; 45
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	08 95       	ret
    1314:	8b e2       	ldi	r24, 0x2B	; 43
    1316:	90 e0       	ldi	r25, 0x00	; 0
		case 0x7d: return '9'; break;
		case 0xe0: return 0x0a; break; //ENTER(NewLine)
	}
	return 0;
}
    1318:	08 95       	ret

0000131a <decodeShiftedChar>:

char decodeShiftedChar(int code) {
    131a:	82 34       	cpi	r24, 0x42	; 66
    131c:	91 05       	cpc	r25, r1
    131e:	09 f4       	brne	.+2      	; 0x1322 <decodeShiftedChar+0x8>
    1320:	a8 c1       	rjmp	.+848    	; 0x1672 <decodeShiftedChar+0x358>
	switch (code) {
    1322:	83 34       	cpi	r24, 0x43	; 67
    1324:	91 05       	cpc	r25, r1
    1326:	0c f0       	brlt	.+2      	; 0x132a <decodeShiftedChar+0x10>
    1328:	97 c0       	rjmp	.+302    	; 0x1458 <decodeShiftedChar+0x13e>
    132a:	8a 32       	cpi	r24, 0x2A	; 42
    132c:	91 05       	cpc	r25, r1
    132e:	09 f4       	brne	.+2      	; 0x1332 <decodeShiftedChar+0x18>
    1330:	6d c1       	rjmp	.+730    	; 0x160c <decodeShiftedChar+0x2f2>
    1332:	8b 32       	cpi	r24, 0x2B	; 43
    1334:	91 05       	cpc	r25, r1
    1336:	0c f0       	brlt	.+2      	; 0x133a <decodeShiftedChar+0x20>
    1338:	49 c0       	rjmp	.+146    	; 0x13cc <decodeShiftedChar+0xb2>
    133a:	8d 31       	cpi	r24, 0x1D	; 29
    133c:	91 05       	cpc	r25, r1
    133e:	09 f4       	brne	.+2      	; 0x1342 <decodeShiftedChar+0x28>
    1340:	4a c1       	rjmp	.+660    	; 0x15d6 <decodeShiftedChar+0x2bc>
    1342:	8e 31       	cpi	r24, 0x1E	; 30
    1344:	91 05       	cpc	r25, r1
    1346:	fc f4       	brge	.+62     	; 0x1386 <decodeShiftedChar+0x6c>
    1348:	86 31       	cpi	r24, 0x16	; 22
    134a:	91 05       	cpc	r25, r1
    134c:	09 f4       	brne	.+2      	; 0x1350 <decodeShiftedChar+0x36>
    134e:	37 c1       	rjmp	.+622    	; 0x15be <decodeShiftedChar+0x2a4>
    1350:	87 31       	cpi	r24, 0x17	; 23
    1352:	91 05       	cpc	r25, r1
    1354:	64 f4       	brge	.+24     	; 0x136e <decodeShiftedChar+0x54>
    1356:	8e 30       	cpi	r24, 0x0E	; 14
    1358:	91 05       	cpc	r25, r1
    135a:	09 f4       	brne	.+2      	; 0x135e <decodeShiftedChar+0x44>
    135c:	2a c1       	rjmp	.+596    	; 0x15b2 <decodeShiftedChar+0x298>
    135e:	85 31       	cpi	r24, 0x15	; 21
    1360:	91 05       	cpc	r25, r1
    1362:	09 f4       	brne	.+2      	; 0x1366 <decodeShiftedChar+0x4c>
    1364:	29 c1       	rjmp	.+594    	; 0x15b8 <decodeShiftedChar+0x29e>
    1366:	0d 97       	sbiw	r24, 0x0d	; 13
    1368:	09 f0       	breq	.+2      	; 0x136c <decodeShiftedChar+0x52>
    136a:	1d c1       	rjmp	.+570    	; 0x15a6 <decodeShiftedChar+0x28c>
    136c:	1f c1       	rjmp	.+574    	; 0x15ac <decodeShiftedChar+0x292>
    136e:	8b 31       	cpi	r24, 0x1B	; 27
    1370:	91 05       	cpc	r25, r1
    1372:	09 f4       	brne	.+2      	; 0x1376 <decodeShiftedChar+0x5c>
    1374:	2a c1       	rjmp	.+596    	; 0x15ca <decodeShiftedChar+0x2b0>
    1376:	8c 31       	cpi	r24, 0x1C	; 28
    1378:	91 05       	cpc	r25, r1
    137a:	0c f0       	brlt	.+2      	; 0x137e <decodeShiftedChar+0x64>
    137c:	29 c1       	rjmp	.+594    	; 0x15d0 <decodeShiftedChar+0x2b6>
    137e:	4a 97       	sbiw	r24, 0x1a	; 26
    1380:	09 f0       	breq	.+2      	; 0x1384 <decodeShiftedChar+0x6a>
    1382:	11 c1       	rjmp	.+546    	; 0x15a6 <decodeShiftedChar+0x28c>
    1384:	1f c1       	rjmp	.+574    	; 0x15c4 <decodeShiftedChar+0x2aa>
    1386:	83 32       	cpi	r24, 0x23	; 35
    1388:	91 05       	cpc	r25, r1
    138a:	09 f4       	brne	.+2      	; 0x138e <decodeShiftedChar+0x74>
    138c:	30 c1       	rjmp	.+608    	; 0x15ee <decodeShiftedChar+0x2d4>
    138e:	84 32       	cpi	r24, 0x24	; 36
    1390:	91 05       	cpc	r25, r1
    1392:	64 f4       	brge	.+24     	; 0x13ac <decodeShiftedChar+0x92>
    1394:	81 32       	cpi	r24, 0x21	; 33
    1396:	91 05       	cpc	r25, r1
    1398:	09 f4       	brne	.+2      	; 0x139c <decodeShiftedChar+0x82>
    139a:	23 c1       	rjmp	.+582    	; 0x15e2 <decodeShiftedChar+0x2c8>
    139c:	82 32       	cpi	r24, 0x22	; 34
    139e:	91 05       	cpc	r25, r1
    13a0:	0c f0       	brlt	.+2      	; 0x13a4 <decodeShiftedChar+0x8a>
    13a2:	22 c1       	rjmp	.+580    	; 0x15e8 <decodeShiftedChar+0x2ce>
    13a4:	4e 97       	sbiw	r24, 0x1e	; 30
    13a6:	09 f0       	breq	.+2      	; 0x13aa <decodeShiftedChar+0x90>
    13a8:	fe c0       	rjmp	.+508    	; 0x15a6 <decodeShiftedChar+0x28c>
    13aa:	18 c1       	rjmp	.+560    	; 0x15dc <decodeShiftedChar+0x2c2>
    13ac:	85 32       	cpi	r24, 0x25	; 37
    13ae:	91 05       	cpc	r25, r1
    13b0:	09 f4       	brne	.+2      	; 0x13b4 <decodeShiftedChar+0x9a>
    13b2:	23 c1       	rjmp	.+582    	; 0x15fa <decodeShiftedChar+0x2e0>
    13b4:	85 32       	cpi	r24, 0x25	; 37
    13b6:	91 05       	cpc	r25, r1
    13b8:	0c f4       	brge	.+2      	; 0x13bc <decodeShiftedChar+0xa2>
    13ba:	1c c1       	rjmp	.+568    	; 0x15f4 <decodeShiftedChar+0x2da>
    13bc:	86 32       	cpi	r24, 0x26	; 38
    13be:	91 05       	cpc	r25, r1
    13c0:	09 f4       	brne	.+2      	; 0x13c4 <decodeShiftedChar+0xaa>
    13c2:	1e c1       	rjmp	.+572    	; 0x1600 <decodeShiftedChar+0x2e6>
    13c4:	89 97       	sbiw	r24, 0x29	; 41
    13c6:	09 f0       	breq	.+2      	; 0x13ca <decodeShiftedChar+0xb0>
    13c8:	ee c0       	rjmp	.+476    	; 0x15a6 <decodeShiftedChar+0x28c>
    13ca:	1d c1       	rjmp	.+570    	; 0x1606 <decodeShiftedChar+0x2ec>
    13cc:	84 33       	cpi	r24, 0x34	; 52
    13ce:	91 05       	cpc	r25, r1
    13d0:	09 f4       	brne	.+2      	; 0x13d4 <decodeShiftedChar+0xba>
    13d2:	34 c1       	rjmp	.+616    	; 0x163c <decodeShiftedChar+0x322>
    13d4:	85 33       	cpi	r24, 0x35	; 53
    13d6:	91 05       	cpc	r25, r1
    13d8:	dc f4       	brge	.+54     	; 0x1410 <decodeShiftedChar+0xf6>
    13da:	8e 32       	cpi	r24, 0x2E	; 46
    13dc:	91 05       	cpc	r25, r1
    13de:	09 f4       	brne	.+2      	; 0x13e2 <decodeShiftedChar+0xc8>
    13e0:	21 c1       	rjmp	.+578    	; 0x1624 <decodeShiftedChar+0x30a>
    13e2:	8f 32       	cpi	r24, 0x2F	; 47
    13e4:	91 05       	cpc	r25, r1
    13e6:	44 f4       	brge	.+16     	; 0x13f8 <decodeShiftedChar+0xde>
    13e8:	8c 32       	cpi	r24, 0x2C	; 44
    13ea:	91 05       	cpc	r25, r1
    13ec:	09 f4       	brne	.+2      	; 0x13f0 <decodeShiftedChar+0xd6>
    13ee:	14 c1       	rjmp	.+552    	; 0x1618 <decodeShiftedChar+0x2fe>
    13f0:	8d 97       	sbiw	r24, 0x2d	; 45
    13f2:	0c f0       	brlt	.+2      	; 0x13f6 <decodeShiftedChar+0xdc>
    13f4:	14 c1       	rjmp	.+552    	; 0x161e <decodeShiftedChar+0x304>
    13f6:	0d c1       	rjmp	.+538    	; 0x1612 <decodeShiftedChar+0x2f8>
    13f8:	82 33       	cpi	r24, 0x32	; 50
    13fa:	91 05       	cpc	r25, r1
    13fc:	09 f4       	brne	.+2      	; 0x1400 <decodeShiftedChar+0xe6>
    13fe:	18 c1       	rjmp	.+560    	; 0x1630 <decodeShiftedChar+0x316>
    1400:	83 33       	cpi	r24, 0x33	; 51
    1402:	91 05       	cpc	r25, r1
    1404:	0c f0       	brlt	.+2      	; 0x1408 <decodeShiftedChar+0xee>
    1406:	17 c1       	rjmp	.+558    	; 0x1636 <decodeShiftedChar+0x31c>
    1408:	c1 97       	sbiw	r24, 0x31	; 49
    140a:	09 f0       	breq	.+2      	; 0x140e <decodeShiftedChar+0xf4>
    140c:	cc c0       	rjmp	.+408    	; 0x15a6 <decodeShiftedChar+0x28c>
    140e:	0d c1       	rjmp	.+538    	; 0x162a <decodeShiftedChar+0x310>
    1410:	8b 33       	cpi	r24, 0x3B	; 59
    1412:	91 05       	cpc	r25, r1
    1414:	09 f4       	brne	.+2      	; 0x1418 <decodeShiftedChar+0xfe>
    1416:	1e c1       	rjmp	.+572    	; 0x1654 <decodeShiftedChar+0x33a>
    1418:	8c 33       	cpi	r24, 0x3C	; 60
    141a:	91 05       	cpc	r25, r1
    141c:	64 f4       	brge	.+24     	; 0x1436 <decodeShiftedChar+0x11c>
    141e:	86 33       	cpi	r24, 0x36	; 54
    1420:	91 05       	cpc	r25, r1
    1422:	09 f4       	brne	.+2      	; 0x1426 <decodeShiftedChar+0x10c>
    1424:	11 c1       	rjmp	.+546    	; 0x1648 <decodeShiftedChar+0x32e>
    1426:	86 33       	cpi	r24, 0x36	; 54
    1428:	91 05       	cpc	r25, r1
    142a:	0c f4       	brge	.+2      	; 0x142e <decodeShiftedChar+0x114>
    142c:	0a c1       	rjmp	.+532    	; 0x1642 <decodeShiftedChar+0x328>
    142e:	ca 97       	sbiw	r24, 0x3a	; 58
    1430:	09 f0       	breq	.+2      	; 0x1434 <decodeShiftedChar+0x11a>
    1432:	b9 c0       	rjmp	.+370    	; 0x15a6 <decodeShiftedChar+0x28c>
    1434:	0c c1       	rjmp	.+536    	; 0x164e <decodeShiftedChar+0x334>
    1436:	8d 33       	cpi	r24, 0x3D	; 61
    1438:	91 05       	cpc	r25, r1
    143a:	09 f4       	brne	.+2      	; 0x143e <decodeShiftedChar+0x124>
    143c:	11 c1       	rjmp	.+546    	; 0x1660 <decodeShiftedChar+0x346>
    143e:	8d 33       	cpi	r24, 0x3D	; 61
    1440:	91 05       	cpc	r25, r1
    1442:	0c f4       	brge	.+2      	; 0x1446 <decodeShiftedChar+0x12c>
    1444:	0a c1       	rjmp	.+532    	; 0x165a <decodeShiftedChar+0x340>
    1446:	8e 33       	cpi	r24, 0x3E	; 62
    1448:	91 05       	cpc	r25, r1
    144a:	09 f4       	brne	.+2      	; 0x144e <decodeShiftedChar+0x134>
    144c:	0c c1       	rjmp	.+536    	; 0x1666 <decodeShiftedChar+0x34c>
    144e:	81 34       	cpi	r24, 0x41	; 65
    1450:	91 05       	cpc	r25, r1
    1452:	09 f0       	breq	.+2      	; 0x1456 <decodeShiftedChar+0x13c>
    1454:	a8 c0       	rjmp	.+336    	; 0x15a6 <decodeShiftedChar+0x28c>
    1456:	0a c1       	rjmp	.+532    	; 0x166c <decodeShiftedChar+0x352>
    1458:	81 36       	cpi	r24, 0x61	; 97
    145a:	91 05       	cpc	r25, r1
    145c:	09 f4       	brne	.+2      	; 0x1460 <decodeShiftedChar+0x146>
    145e:	39 c1       	rjmp	.+626    	; 0x16d2 <decodeShiftedChar+0x3b8>
    1460:	82 36       	cpi	r24, 0x62	; 98
    1462:	91 05       	cpc	r25, r1
    1464:	0c f0       	brlt	.+2      	; 0x1468 <decodeShiftedChar+0x14e>
    1466:	4d c0       	rjmp	.+154    	; 0x1502 <decodeShiftedChar+0x1e8>
    1468:	8c 34       	cpi	r24, 0x4C	; 76
    146a:	91 05       	cpc	r25, r1
    146c:	09 f4       	brne	.+2      	; 0x1470 <decodeShiftedChar+0x156>
    146e:	19 c1       	rjmp	.+562    	; 0x16a2 <decodeShiftedChar+0x388>
    1470:	8d 34       	cpi	r24, 0x4D	; 77
    1472:	91 05       	cpc	r25, r1
    1474:	ec f4       	brge	.+58     	; 0x14b0 <decodeShiftedChar+0x196>
    1476:	86 34       	cpi	r24, 0x46	; 70
    1478:	91 05       	cpc	r25, r1
    147a:	09 f4       	brne	.+2      	; 0x147e <decodeShiftedChar+0x164>
    147c:	06 c1       	rjmp	.+524    	; 0x168a <decodeShiftedChar+0x370>
    147e:	87 34       	cpi	r24, 0x47	; 71
    1480:	91 05       	cpc	r25, r1
    1482:	4c f4       	brge	.+18     	; 0x1496 <decodeShiftedChar+0x17c>
    1484:	84 34       	cpi	r24, 0x44	; 68
    1486:	91 05       	cpc	r25, r1
    1488:	09 f4       	brne	.+2      	; 0x148c <decodeShiftedChar+0x172>
    148a:	f9 c0       	rjmp	.+498    	; 0x167e <decodeShiftedChar+0x364>
    148c:	85 34       	cpi	r24, 0x45	; 69
    148e:	91 05       	cpc	r25, r1
    1490:	0c f0       	brlt	.+2      	; 0x1494 <decodeShiftedChar+0x17a>
    1492:	f8 c0       	rjmp	.+496    	; 0x1684 <decodeShiftedChar+0x36a>
    1494:	f1 c0       	rjmp	.+482    	; 0x1678 <decodeShiftedChar+0x35e>
    1496:	8a 34       	cpi	r24, 0x4A	; 74
    1498:	91 05       	cpc	r25, r1
    149a:	09 f4       	brne	.+2      	; 0x149e <decodeShiftedChar+0x184>
    149c:	fc c0       	rjmp	.+504    	; 0x1696 <decodeShiftedChar+0x37c>
    149e:	8b 34       	cpi	r24, 0x4B	; 75
    14a0:	91 05       	cpc	r25, r1
    14a2:	0c f0       	brlt	.+2      	; 0x14a6 <decodeShiftedChar+0x18c>
    14a4:	fb c0       	rjmp	.+502    	; 0x169c <decodeShiftedChar+0x382>
    14a6:	89 34       	cpi	r24, 0x49	; 73
    14a8:	91 05       	cpc	r25, r1
    14aa:	09 f0       	breq	.+2      	; 0x14ae <decodeShiftedChar+0x194>
    14ac:	7c c0       	rjmp	.+248    	; 0x15a6 <decodeShiftedChar+0x28c>
    14ae:	f0 c0       	rjmp	.+480    	; 0x1690 <decodeShiftedChar+0x376>
    14b0:	84 35       	cpi	r24, 0x54	; 84
    14b2:	91 05       	cpc	r25, r1
    14b4:	09 f4       	brne	.+2      	; 0x14b8 <decodeShiftedChar+0x19e>
    14b6:	01 c1       	rjmp	.+514    	; 0x16ba <decodeShiftedChar+0x3a0>
    14b8:	85 35       	cpi	r24, 0x55	; 85
    14ba:	91 05       	cpc	r25, r1
    14bc:	6c f4       	brge	.+26     	; 0x14d8 <decodeShiftedChar+0x1be>
    14be:	8e 34       	cpi	r24, 0x4E	; 78
    14c0:	91 05       	cpc	r25, r1
    14c2:	09 f4       	brne	.+2      	; 0x14c6 <decodeShiftedChar+0x1ac>
    14c4:	f4 c0       	rjmp	.+488    	; 0x16ae <decodeShiftedChar+0x394>
    14c6:	8e 34       	cpi	r24, 0x4E	; 78
    14c8:	91 05       	cpc	r25, r1
    14ca:	0c f4       	brge	.+2      	; 0x14ce <decodeShiftedChar+0x1b4>
    14cc:	ed c0       	rjmp	.+474    	; 0x16a8 <decodeShiftedChar+0x38e>
    14ce:	82 35       	cpi	r24, 0x52	; 82
    14d0:	91 05       	cpc	r25, r1
    14d2:	09 f0       	breq	.+2      	; 0x14d6 <decodeShiftedChar+0x1bc>
    14d4:	68 c0       	rjmp	.+208    	; 0x15a6 <decodeShiftedChar+0x28c>
    14d6:	ee c0       	rjmp	.+476    	; 0x16b4 <decodeShiftedChar+0x39a>
    14d8:	8a 35       	cpi	r24, 0x5A	; 90
    14da:	91 05       	cpc	r25, r1
    14dc:	09 f4       	brne	.+2      	; 0x14e0 <decodeShiftedChar+0x1c6>
    14de:	f3 c0       	rjmp	.+486    	; 0x16c6 <decodeShiftedChar+0x3ac>
    14e0:	8b 35       	cpi	r24, 0x5B	; 91
    14e2:	91 05       	cpc	r25, r1
    14e4:	2c f4       	brge	.+10     	; 0x14f0 <decodeShiftedChar+0x1d6>
    14e6:	85 35       	cpi	r24, 0x55	; 85
    14e8:	91 05       	cpc	r25, r1
    14ea:	09 f0       	breq	.+2      	; 0x14ee <decodeShiftedChar+0x1d4>
    14ec:	5c c0       	rjmp	.+184    	; 0x15a6 <decodeShiftedChar+0x28c>
    14ee:	e8 c0       	rjmp	.+464    	; 0x16c0 <decodeShiftedChar+0x3a6>
    14f0:	8b 35       	cpi	r24, 0x5B	; 91
    14f2:	91 05       	cpc	r25, r1
    14f4:	09 f4       	brne	.+2      	; 0x14f8 <decodeShiftedChar+0x1de>
    14f6:	1d c1       	rjmp	.+570    	; 0x1732 <decodeShiftedChar+0x418>
    14f8:	8d 35       	cpi	r24, 0x5D	; 93
    14fa:	91 05       	cpc	r25, r1
    14fc:	09 f0       	breq	.+2      	; 0x1500 <decodeShiftedChar+0x1e6>
    14fe:	53 c0       	rjmp	.+166    	; 0x15a6 <decodeShiftedChar+0x28c>
    1500:	e5 c0       	rjmp	.+458    	; 0x16cc <decodeShiftedChar+0x3b2>
    1502:	84 37       	cpi	r24, 0x74	; 116
    1504:	91 05       	cpc	r25, r1
    1506:	09 f4       	brne	.+2      	; 0x150a <decodeShiftedChar+0x1f0>
    1508:	ff c0       	rjmp	.+510    	; 0x1708 <decodeShiftedChar+0x3ee>
    150a:	85 37       	cpi	r24, 0x75	; 117
    150c:	91 05       	cpc	r25, r1
    150e:	34 f5       	brge	.+76     	; 0x155c <decodeShiftedChar+0x242>
    1510:	8c 36       	cpi	r24, 0x6C	; 108
    1512:	91 05       	cpc	r25, r1
    1514:	09 f4       	brne	.+2      	; 0x1518 <decodeShiftedChar+0x1fe>
    1516:	e9 c0       	rjmp	.+466    	; 0x16ea <decodeShiftedChar+0x3d0>
    1518:	8d 36       	cpi	r24, 0x6D	; 109
    151a:	91 05       	cpc	r25, r1
    151c:	64 f4       	brge	.+24     	; 0x1536 <decodeShiftedChar+0x21c>
    151e:	89 36       	cpi	r24, 0x69	; 105
    1520:	91 05       	cpc	r25, r1
    1522:	09 f4       	brne	.+2      	; 0x1526 <decodeShiftedChar+0x20c>
    1524:	dc c0       	rjmp	.+440    	; 0x16de <decodeShiftedChar+0x3c4>
    1526:	8b 36       	cpi	r24, 0x6B	; 107
    1528:	91 05       	cpc	r25, r1
    152a:	09 f4       	brne	.+2      	; 0x152e <decodeShiftedChar+0x214>
    152c:	db c0       	rjmp	.+438    	; 0x16e4 <decodeShiftedChar+0x3ca>
    152e:	86 36       	cpi	r24, 0x66	; 102
    1530:	91 05       	cpc	r25, r1
    1532:	c9 f5       	brne	.+114    	; 0x15a6 <decodeShiftedChar+0x28c>
    1534:	d1 c0       	rjmp	.+418    	; 0x16d8 <decodeShiftedChar+0x3be>
    1536:	81 37       	cpi	r24, 0x71	; 113
    1538:	91 05       	cpc	r25, r1
    153a:	09 f4       	brne	.+2      	; 0x153e <decodeShiftedChar+0x224>
    153c:	dc c0       	rjmp	.+440    	; 0x16f6 <decodeShiftedChar+0x3dc>
    153e:	82 37       	cpi	r24, 0x72	; 114
    1540:	91 05       	cpc	r25, r1
    1542:	24 f4       	brge	.+8      	; 0x154c <decodeShiftedChar+0x232>
    1544:	80 37       	cpi	r24, 0x70	; 112
    1546:	91 05       	cpc	r25, r1
    1548:	71 f5       	brne	.+92     	; 0x15a6 <decodeShiftedChar+0x28c>
    154a:	d2 c0       	rjmp	.+420    	; 0x16f0 <decodeShiftedChar+0x3d6>
    154c:	82 37       	cpi	r24, 0x72	; 114
    154e:	91 05       	cpc	r25, r1
    1550:	09 f4       	brne	.+2      	; 0x1554 <decodeShiftedChar+0x23a>
    1552:	d4 c0       	rjmp	.+424    	; 0x16fc <decodeShiftedChar+0x3e2>
    1554:	83 37       	cpi	r24, 0x73	; 115
    1556:	91 05       	cpc	r25, r1
    1558:	31 f5       	brne	.+76     	; 0x15a6 <decodeShiftedChar+0x28c>
    155a:	d3 c0       	rjmp	.+422    	; 0x1702 <decodeShiftedChar+0x3e8>
    155c:	8a 37       	cpi	r24, 0x7A	; 122
    155e:	91 05       	cpc	r25, r1
    1560:	09 f4       	brne	.+2      	; 0x1564 <decodeShiftedChar+0x24a>
    1562:	de c0       	rjmp	.+444    	; 0x1720 <decodeShiftedChar+0x406>
    1564:	8b 37       	cpi	r24, 0x7B	; 123
    1566:	91 05       	cpc	r25, r1
    1568:	64 f4       	brge	.+24     	; 0x1582 <decodeShiftedChar+0x268>
    156a:	86 37       	cpi	r24, 0x76	; 118
    156c:	91 05       	cpc	r25, r1
    156e:	09 f4       	brne	.+2      	; 0x1572 <decodeShiftedChar+0x258>
    1570:	d1 c0       	rjmp	.+418    	; 0x1714 <decodeShiftedChar+0x3fa>
    1572:	86 37       	cpi	r24, 0x76	; 118
    1574:	91 05       	cpc	r25, r1
    1576:	0c f4       	brge	.+2      	; 0x157a <decodeShiftedChar+0x260>
    1578:	ca c0       	rjmp	.+404    	; 0x170e <decodeShiftedChar+0x3f4>
    157a:	89 37       	cpi	r24, 0x79	; 121
    157c:	91 05       	cpc	r25, r1
    157e:	99 f4       	brne	.+38     	; 0x15a6 <decodeShiftedChar+0x28c>
    1580:	cc c0       	rjmp	.+408    	; 0x171a <decodeShiftedChar+0x400>
    1582:	8c 37       	cpi	r24, 0x7C	; 124
    1584:	91 05       	cpc	r25, r1
    1586:	09 f4       	brne	.+2      	; 0x158a <decodeShiftedChar+0x270>
    1588:	d4 c0       	rjmp	.+424    	; 0x1732 <decodeShiftedChar+0x418>
    158a:	8c 37       	cpi	r24, 0x7C	; 124
    158c:	91 05       	cpc	r25, r1
    158e:	0c f4       	brge	.+2      	; 0x1592 <decodeShiftedChar+0x278>
    1590:	ca c0       	rjmp	.+404    	; 0x1726 <decodeShiftedChar+0x40c>
    1592:	8d 37       	cpi	r24, 0x7D	; 125
    1594:	91 05       	cpc	r25, r1
    1596:	09 f4       	brne	.+2      	; 0x159a <decodeShiftedChar+0x280>
    1598:	c9 c0       	rjmp	.+402    	; 0x172c <decodeShiftedChar+0x412>
    159a:	80 3e       	cpi	r24, 0xE0	; 224
    159c:	91 05       	cpc	r25, r1
    159e:	19 f4       	brne	.+6      	; 0x15a6 <decodeShiftedChar+0x28c>
    15a0:	8a e0       	ldi	r24, 0x0A	; 10
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	08 95       	ret
    15a6:	80 e0       	ldi	r24, 0x00	; 0
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	08 95       	ret
    15ac:	89 e0       	ldi	r24, 0x09	; 9
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	08 95       	ret
		case 0x0d: return 0x09; break; //TAB(horizontalTab)
    15b2:	80 eb       	ldi	r24, 0xB0	; 176
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	08 95       	ret
		case 0x0e: return '°'; break;
    15b8:	81 e5       	ldi	r24, 0x51	; 81
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	08 95       	ret
		case 0x15: return 'Q'; break;
    15be:	81 e2       	ldi	r24, 0x21	; 33
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	08 95       	ret
		case 0x16: return '!'; break;
    15c4:	89 e5       	ldi	r24, 0x59	; 89
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	08 95       	ret
		case 0x1a: return 'Y'; break;
    15ca:	83 e5       	ldi	r24, 0x53	; 83
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	08 95       	ret
		case 0x1b: return 'S'; break;
    15d0:	81 e4       	ldi	r24, 0x41	; 65
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	08 95       	ret
		case 0x1c: return 'A'; break;
    15d6:	87 e5       	ldi	r24, 0x57	; 87
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	08 95       	ret
		case 0x1d: return 'W'; break;
    15dc:	82 e2       	ldi	r24, 0x22	; 34
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	08 95       	ret
		case 0x1e: return '"'; break;
    15e2:	83 e4       	ldi	r24, 0x43	; 67
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	08 95       	ret
		case 0x21: return 'C'; break;
    15e8:	88 e5       	ldi	r24, 0x58	; 88
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	08 95       	ret
		case 0x22: return 'X'; break;
    15ee:	84 e4       	ldi	r24, 0x44	; 68
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	08 95       	ret
		case 0x23: return 'D'; break;
    15f4:	85 e4       	ldi	r24, 0x45	; 69
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	08 95       	ret
		case 0x24: return 'E'; break;
    15fa:	84 e2       	ldi	r24, 0x24	; 36
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	08 95       	ret
		case 0x25: return '$'; break;
    1600:	87 ea       	ldi	r24, 0xA7	; 167
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	08 95       	ret
		case 0x26: return '§'; break;
    1606:	80 e2       	ldi	r24, 0x20	; 32
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	08 95       	ret
		case 0x29: return 0x20; break; //SPACE(Space)
    160c:	86 e5       	ldi	r24, 0x56	; 86
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	08 95       	ret
		case 0x2a: return 'V'; break;
    1612:	86 e4       	ldi	r24, 0x46	; 70
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	08 95       	ret
		case 0x2b: return 'F'; break;
    1618:	84 e5       	ldi	r24, 0x54	; 84
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	08 95       	ret
		case 0x2c: return 'T'; break;
    161e:	82 e5       	ldi	r24, 0x52	; 82
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	08 95       	ret
		case 0x2d: return 'R'; break;
    1624:	85 e2       	ldi	r24, 0x25	; 37
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	08 95       	ret
		case 0x2e: return '%'; break;
    162a:	8e e4       	ldi	r24, 0x4E	; 78
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	08 95       	ret
		case 0x31: return 'N'; break;
    1630:	82 e4       	ldi	r24, 0x42	; 66
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	08 95       	ret
		case 0x32: return 'B'; break;
    1636:	88 e4       	ldi	r24, 0x48	; 72
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	08 95       	ret
		case 0x33: return 'H'; break;
    163c:	87 e4       	ldi	r24, 0x47	; 71
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	08 95       	ret
		case 0x34: return 'G'; break;
    1642:	8a e5       	ldi	r24, 0x5A	; 90
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	08 95       	ret
		case 0x35: return 'Z'; break;
    1648:	86 e2       	ldi	r24, 0x26	; 38
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	08 95       	ret
		case 0x36: return '&'; break;
    164e:	8d e4       	ldi	r24, 0x4D	; 77
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	08 95       	ret
//	 	case 0x39: return ';'; break;
		case 0x3a: return 'M'; break;
    1654:	8a e4       	ldi	r24, 0x4A	; 74
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	08 95       	ret
		case 0x3b: return 'J'; break;
    165a:	85 e5       	ldi	r24, 0x55	; 85
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	08 95       	ret
		case 0x3c: return 'U'; break;
    1660:	8f e2       	ldi	r24, 0x2F	; 47
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	08 95       	ret
		case 0x3d: return '/'; break;
    1666:	88 e2       	ldi	r24, 0x28	; 40
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	08 95       	ret
		case 0x3e: return '('; break;
    166c:	8b e3       	ldi	r24, 0x3B	; 59
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	08 95       	ret
		case 0x41: return ';'; break;
    1672:	8b e4       	ldi	r24, 0x4B	; 75
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	08 95       	ret
		case 0x42: return 'K'; break;
    1678:	89 e4       	ldi	r24, 0x49	; 73
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	08 95       	ret
		case 0x43: return 'I'; break;
    167e:	8f e4       	ldi	r24, 0x4F	; 79
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	08 95       	ret
		case 0x44: return 'O'; break;
    1684:	8d e3       	ldi	r24, 0x3D	; 61
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	08 95       	ret
		case 0x45: return '='; break;
    168a:	89 e2       	ldi	r24, 0x29	; 41
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	08 95       	ret
		case 0x46: return ')'; break;
    1690:	8a e3       	ldi	r24, 0x3A	; 58
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	08 95       	ret
		case 0x49: return ':'; break;
    1696:	8f e5       	ldi	r24, 0x5F	; 95
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	08 95       	ret
		case 0x4a: return '_'; break;
    169c:	8c e4       	ldi	r24, 0x4C	; 76
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	08 95       	ret
		case 0x4b: return 'L'; break;
    16a2:	86 ed       	ldi	r24, 0xD6	; 214
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	08 95       	ret
		case 0x4c: return 'Ö'; break;
    16a8:	80 e5       	ldi	r24, 0x50	; 80
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	08 95       	ret
		case 0x4d: return 'P'; break;
    16ae:	8f e3       	ldi	r24, 0x3F	; 63
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	08 95       	ret
		case 0x4e: return '?'; break;
    16b4:	84 ec       	ldi	r24, 0xC4	; 196
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	08 95       	ret
		case 0x52: return 'Ä'; break;
    16ba:	8c ed       	ldi	r24, 0xDC	; 220
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	08 95       	ret
		case 0x54: return 'Ü'; break;
    16c0:	80 e6       	ldi	r24, 0x60	; 96
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	08 95       	ret
		case 0x55: return '`'; break;
    16c6:	8d e0       	ldi	r24, 0x0D	; 13
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	08 95       	ret
		case 0x5a: return 0x0d; break; //RETURN(CarriageReturn)
    16cc:	87 e2       	ldi	r24, 0x27	; 39
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	08 95       	ret
		case 0x5b: return '*'; break;
		case 0x5d: return '\''; break;
    16d2:	8e e3       	ldi	r24, 0x3E	; 62
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	08 95       	ret
		case 0x61: return '>'; break;
    16d8:	88 e0       	ldi	r24, 0x08	; 8
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	08 95       	ret
		case 0x66: return 0x08; break; //BACKSPACE(Backspace)
    16de:	81 e3       	ldi	r24, 0x31	; 49
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	08 95       	ret
		case 0x69: return '1'; break;
    16e4:	84 e3       	ldi	r24, 0x34	; 52
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	08 95       	ret
		case 0x6b: return '4'; break;
    16ea:	87 e3       	ldi	r24, 0x37	; 55
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	08 95       	ret
		case 0x6c: return '7'; break;
    16f0:	80 e3       	ldi	r24, 0x30	; 48
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	08 95       	ret
		case 0x70: return '0'; break;
    16f6:	8c e2       	ldi	r24, 0x2C	; 44
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	08 95       	ret
		case 0x71: return ','; break;
    16fc:	82 e3       	ldi	r24, 0x32	; 50
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	08 95       	ret
		case 0x72: return '2'; break;
    1702:	85 e3       	ldi	r24, 0x35	; 53
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	08 95       	ret
		case 0x73: return '5'; break;
    1708:	86 e3       	ldi	r24, 0x36	; 54
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	08 95       	ret
		case 0x74: return '6'; break;
    170e:	88 e3       	ldi	r24, 0x38	; 56
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	08 95       	ret
		case 0x75: return '8'; break;
    1714:	8b e1       	ldi	r24, 0x1B	; 27
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	08 95       	ret
		case 0x76: return 0x1b; break; // ESC(Escape)
    171a:	8b e2       	ldi	r24, 0x2B	; 43
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	08 95       	ret
		case 0x79: return '+'; break;
    1720:	83 e3       	ldi	r24, 0x33	; 51
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	08 95       	ret
		case 0x7a: return '3'; break;
    1726:	8d e2       	ldi	r24, 0x2D	; 45
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	08 95       	ret
		case 0x7b: return '-'; break;
    172c:	89 e3       	ldi	r24, 0x39	; 57
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	08 95       	ret
		case 0x7c: return '*'; break;
		case 0x7d: return '9'; break;
    1732:	8a e2       	ldi	r24, 0x2A	; 42
    1734:	90 e0       	ldi	r25, 0x00	; 0
		case 0xe0: return 0x0a; break; //ENTER(NewLine)
	}
	return 0;
}
    1736:	08 95       	ret

00001738 <decodeAlteredChar>:

char decodeAlteredChar(int code) {
    1738:	84 34       	cpi	r24, 0x44	; 68
    173a:	91 05       	cpc	r25, r1
    173c:	09 f4       	brne	.+2      	; 0x1740 <decodeAlteredChar+0x8>
    173e:	58 c1       	rjmp	.+688    	; 0x19f0 <decodeAlteredChar+0x2b8>
	switch (code) {
    1740:	85 34       	cpi	r24, 0x45	; 69
    1742:	91 05       	cpc	r25, r1
    1744:	0c f0       	brlt	.+2      	; 0x1748 <decodeAlteredChar+0x10>
    1746:	83 c0       	rjmp	.+262    	; 0x184e <decodeAlteredChar+0x116>
    1748:	89 32       	cpi	r24, 0x29	; 41
    174a:	91 05       	cpc	r25, r1
    174c:	09 f4       	brne	.+2      	; 0x1750 <decodeAlteredChar+0x18>
    174e:	38 c1       	rjmp	.+624    	; 0x19c0 <decodeAlteredChar+0x288>
    1750:	8a 32       	cpi	r24, 0x2A	; 42
    1752:	91 05       	cpc	r25, r1
    1754:	0c f0       	brlt	.+2      	; 0x1758 <decodeAlteredChar+0x20>
    1756:	45 c0       	rjmp	.+138    	; 0x17e2 <decodeAlteredChar+0xaa>
    1758:	8d 31       	cpi	r24, 0x1D	; 29
    175a:	91 05       	cpc	r25, r1
    175c:	09 f4       	brne	.+2      	; 0x1760 <decodeAlteredChar+0x28>
    175e:	9f c1       	rjmp	.+830    	; 0x1a9e <decodeAlteredChar+0x366>
    1760:	8e 31       	cpi	r24, 0x1E	; 30
    1762:	91 05       	cpc	r25, r1
    1764:	fc f4       	brge	.+62     	; 0x17a4 <decodeAlteredChar+0x6c>
    1766:	86 31       	cpi	r24, 0x16	; 22
    1768:	91 05       	cpc	r25, r1
    176a:	09 f4       	brne	.+2      	; 0x176e <decodeAlteredChar+0x36>
    176c:	0e c1       	rjmp	.+540    	; 0x198a <decodeAlteredChar+0x252>
    176e:	87 31       	cpi	r24, 0x17	; 23
    1770:	91 05       	cpc	r25, r1
    1772:	64 f4       	brge	.+24     	; 0x178c <decodeAlteredChar+0x54>
    1774:	8e 30       	cpi	r24, 0x0E	; 14
    1776:	91 05       	cpc	r25, r1
    1778:	09 f4       	brne	.+2      	; 0x177c <decodeAlteredChar+0x44>
    177a:	8e c1       	rjmp	.+796    	; 0x1a98 <decodeAlteredChar+0x360>
    177c:	85 31       	cpi	r24, 0x15	; 21
    177e:	91 05       	cpc	r25, r1
    1780:	09 f4       	brne	.+2      	; 0x1784 <decodeAlteredChar+0x4c>
    1782:	00 c1       	rjmp	.+512    	; 0x1984 <decodeAlteredChar+0x24c>
    1784:	0d 97       	sbiw	r24, 0x0d	; 13
    1786:	09 f0       	breq	.+2      	; 0x178a <decodeAlteredChar+0x52>
    1788:	f7 c0       	rjmp	.+494    	; 0x1978 <decodeAlteredChar+0x240>
    178a:	f9 c0       	rjmp	.+498    	; 0x197e <decodeAlteredChar+0x246>
    178c:	8b 31       	cpi	r24, 0x1B	; 27
    178e:	91 05       	cpc	r25, r1
    1790:	09 f4       	brne	.+2      	; 0x1794 <decodeAlteredChar+0x5c>
    1792:	01 c1       	rjmp	.+514    	; 0x1996 <decodeAlteredChar+0x25e>
    1794:	8c 31       	cpi	r24, 0x1C	; 28
    1796:	91 05       	cpc	r25, r1
    1798:	0c f0       	brlt	.+2      	; 0x179c <decodeAlteredChar+0x64>
    179a:	00 c1       	rjmp	.+512    	; 0x199c <decodeAlteredChar+0x264>
    179c:	4a 97       	sbiw	r24, 0x1a	; 26
    179e:	09 f0       	breq	.+2      	; 0x17a2 <decodeAlteredChar+0x6a>
    17a0:	eb c0       	rjmp	.+470    	; 0x1978 <decodeAlteredChar+0x240>
    17a2:	f6 c0       	rjmp	.+492    	; 0x1990 <decodeAlteredChar+0x258>
    17a4:	83 32       	cpi	r24, 0x23	; 35
    17a6:	91 05       	cpc	r25, r1
    17a8:	09 f4       	brne	.+2      	; 0x17ac <decodeAlteredChar+0x74>
    17aa:	04 c1       	rjmp	.+520    	; 0x19b4 <decodeAlteredChar+0x27c>
    17ac:	84 32       	cpi	r24, 0x24	; 36
    17ae:	91 05       	cpc	r25, r1
    17b0:	64 f4       	brge	.+24     	; 0x17ca <decodeAlteredChar+0x92>
    17b2:	81 32       	cpi	r24, 0x21	; 33
    17b4:	91 05       	cpc	r25, r1
    17b6:	09 f4       	brne	.+2      	; 0x17ba <decodeAlteredChar+0x82>
    17b8:	f7 c0       	rjmp	.+494    	; 0x19a8 <decodeAlteredChar+0x270>
    17ba:	82 32       	cpi	r24, 0x22	; 34
    17bc:	91 05       	cpc	r25, r1
    17be:	0c f0       	brlt	.+2      	; 0x17c2 <decodeAlteredChar+0x8a>
    17c0:	f6 c0       	rjmp	.+492    	; 0x19ae <decodeAlteredChar+0x276>
    17c2:	4e 97       	sbiw	r24, 0x1e	; 30
    17c4:	09 f0       	breq	.+2      	; 0x17c8 <decodeAlteredChar+0x90>
    17c6:	d8 c0       	rjmp	.+432    	; 0x1978 <decodeAlteredChar+0x240>
    17c8:	ec c0       	rjmp	.+472    	; 0x19a2 <decodeAlteredChar+0x26a>
    17ca:	85 32       	cpi	r24, 0x25	; 37
    17cc:	91 05       	cpc	r25, r1
    17ce:	09 f4       	brne	.+2      	; 0x17d2 <decodeAlteredChar+0x9a>
    17d0:	69 c1       	rjmp	.+722    	; 0x1aa4 <decodeAlteredChar+0x36c>
    17d2:	85 32       	cpi	r24, 0x25	; 37
    17d4:	91 05       	cpc	r25, r1
    17d6:	0c f4       	brge	.+2      	; 0x17da <decodeAlteredChar+0xa2>
    17d8:	62 c1       	rjmp	.+708    	; 0x1a9e <decodeAlteredChar+0x366>
    17da:	86 97       	sbiw	r24, 0x26	; 38
    17dc:	09 f0       	breq	.+2      	; 0x17e0 <decodeAlteredChar+0xa8>
    17de:	cc c0       	rjmp	.+408    	; 0x1978 <decodeAlteredChar+0x240>
    17e0:	ec c0       	rjmp	.+472    	; 0x19ba <decodeAlteredChar+0x282>
    17e2:	86 33       	cpi	r24, 0x36	; 54
    17e4:	91 05       	cpc	r25, r1
    17e6:	09 f4       	brne	.+2      	; 0x17ea <decodeAlteredChar+0xb2>
    17e8:	57 c1       	rjmp	.+686    	; 0x1a98 <decodeAlteredChar+0x360>
    17ea:	87 33       	cpi	r24, 0x37	; 55
    17ec:	91 05       	cpc	r25, r1
    17ee:	9c f4       	brge	.+38     	; 0x1816 <decodeAlteredChar+0xde>
    17f0:	8e 32       	cpi	r24, 0x2E	; 46
    17f2:	91 05       	cpc	r25, r1
    17f4:	09 f4       	brne	.+2      	; 0x17f8 <decodeAlteredChar+0xc0>
    17f6:	ea c0       	rjmp	.+468    	; 0x19cc <decodeAlteredChar+0x294>
    17f8:	8f 32       	cpi	r24, 0x2F	; 47
    17fa:	91 05       	cpc	r25, r1
    17fc:	24 f4       	brge	.+8      	; 0x1806 <decodeAlteredChar+0xce>
    17fe:	8d 97       	sbiw	r24, 0x2d	; 45
    1800:	0c f4       	brge	.+2      	; 0x1804 <decodeAlteredChar+0xcc>
    1802:	4d c1       	rjmp	.+666    	; 0x1a9e <decodeAlteredChar+0x366>
    1804:	e0 c0       	rjmp	.+448    	; 0x19c6 <decodeAlteredChar+0x28e>
    1806:	81 33       	cpi	r24, 0x31	; 49
    1808:	91 05       	cpc	r25, r1
    180a:	09 f4       	brne	.+2      	; 0x180e <decodeAlteredChar+0xd6>
    180c:	e2 c0       	rjmp	.+452    	; 0x19d2 <decodeAlteredChar+0x29a>
    180e:	c1 97       	sbiw	r24, 0x31	; 49
    1810:	0c f4       	brge	.+2      	; 0x1814 <decodeAlteredChar+0xdc>
    1812:	b2 c0       	rjmp	.+356    	; 0x1978 <decodeAlteredChar+0x240>
    1814:	44 c1       	rjmp	.+648    	; 0x1a9e <decodeAlteredChar+0x366>
    1816:	8d 33       	cpi	r24, 0x3D	; 61
    1818:	91 05       	cpc	r25, r1
    181a:	09 f4       	brne	.+2      	; 0x181e <decodeAlteredChar+0xe6>
    181c:	e3 c0       	rjmp	.+454    	; 0x19e4 <decodeAlteredChar+0x2ac>
    181e:	8e 33       	cpi	r24, 0x3E	; 62
    1820:	91 05       	cpc	r25, r1
    1822:	64 f4       	brge	.+24     	; 0x183c <decodeAlteredChar+0x104>
    1824:	8b 33       	cpi	r24, 0x3B	; 59
    1826:	91 05       	cpc	r25, r1
    1828:	09 f4       	brne	.+2      	; 0x182c <decodeAlteredChar+0xf4>
    182a:	d9 c0       	rjmp	.+434    	; 0x19de <decodeAlteredChar+0x2a6>
    182c:	8c 33       	cpi	r24, 0x3C	; 60
    182e:	91 05       	cpc	r25, r1
    1830:	0c f0       	brlt	.+2      	; 0x1834 <decodeAlteredChar+0xfc>
    1832:	35 c1       	rjmp	.+618    	; 0x1a9e <decodeAlteredChar+0x366>
    1834:	ca 97       	sbiw	r24, 0x3a	; 58
    1836:	09 f0       	breq	.+2      	; 0x183a <decodeAlteredChar+0x102>
    1838:	9f c0       	rjmp	.+318    	; 0x1978 <decodeAlteredChar+0x240>
    183a:	ce c0       	rjmp	.+412    	; 0x19d8 <decodeAlteredChar+0x2a0>
    183c:	8e 33       	cpi	r24, 0x3E	; 62
    183e:	91 05       	cpc	r25, r1
    1840:	09 f4       	brne	.+2      	; 0x1844 <decodeAlteredChar+0x10c>
    1842:	d3 c0       	rjmp	.+422    	; 0x19ea <decodeAlteredChar+0x2b2>
    1844:	81 34       	cpi	r24, 0x41	; 65
    1846:	91 05       	cpc	r25, r1
    1848:	0c f4       	brge	.+2      	; 0x184c <decodeAlteredChar+0x114>
    184a:	96 c0       	rjmp	.+300    	; 0x1978 <decodeAlteredChar+0x240>
    184c:	28 c1       	rjmp	.+592    	; 0x1a9e <decodeAlteredChar+0x366>
    184e:	86 36       	cpi	r24, 0x66	; 102
    1850:	91 05       	cpc	r25, r1
    1852:	09 f4       	brne	.+2      	; 0x1856 <decodeAlteredChar+0x11e>
    1854:	f1 c0       	rjmp	.+482    	; 0x1a38 <decodeAlteredChar+0x300>
    1856:	87 36       	cpi	r24, 0x67	; 103
    1858:	91 05       	cpc	r25, r1
    185a:	0c f0       	brlt	.+2      	; 0x185e <decodeAlteredChar+0x126>
    185c:	45 c0       	rjmp	.+138    	; 0x18e8 <decodeAlteredChar+0x1b0>
    185e:	8e 34       	cpi	r24, 0x4E	; 78
    1860:	91 05       	cpc	r25, r1
    1862:	09 f4       	brne	.+2      	; 0x1866 <decodeAlteredChar+0x12e>
    1864:	1f c1       	rjmp	.+574    	; 0x1aa4 <decodeAlteredChar+0x36c>
    1866:	8f 34       	cpi	r24, 0x4F	; 79
    1868:	91 05       	cpc	r25, r1
    186a:	ec f4       	brge	.+58     	; 0x18a6 <decodeAlteredChar+0x16e>
    186c:	8a 34       	cpi	r24, 0x4A	; 74
    186e:	91 05       	cpc	r25, r1
    1870:	09 f4       	brne	.+2      	; 0x1874 <decodeAlteredChar+0x13c>
    1872:	ca c0       	rjmp	.+404    	; 0x1a08 <decodeAlteredChar+0x2d0>
    1874:	8b 34       	cpi	r24, 0x4B	; 75
    1876:	91 05       	cpc	r25, r1
    1878:	6c f4       	brge	.+26     	; 0x1894 <decodeAlteredChar+0x15c>
    187a:	86 34       	cpi	r24, 0x46	; 70
    187c:	91 05       	cpc	r25, r1
    187e:	09 f4       	brne	.+2      	; 0x1882 <decodeAlteredChar+0x14a>
    1880:	bd c0       	rjmp	.+378    	; 0x19fc <decodeAlteredChar+0x2c4>
    1882:	86 34       	cpi	r24, 0x46	; 70
    1884:	91 05       	cpc	r25, r1
    1886:	0c f4       	brge	.+2      	; 0x188a <decodeAlteredChar+0x152>
    1888:	b6 c0       	rjmp	.+364    	; 0x19f6 <decodeAlteredChar+0x2be>
    188a:	89 34       	cpi	r24, 0x49	; 73
    188c:	91 05       	cpc	r25, r1
    188e:	09 f0       	breq	.+2      	; 0x1892 <decodeAlteredChar+0x15a>
    1890:	73 c0       	rjmp	.+230    	; 0x1978 <decodeAlteredChar+0x240>
    1892:	b7 c0       	rjmp	.+366    	; 0x1a02 <decodeAlteredChar+0x2ca>
    1894:	8c 34       	cpi	r24, 0x4C	; 76
    1896:	91 05       	cpc	r25, r1
    1898:	09 f4       	brne	.+2      	; 0x189c <decodeAlteredChar+0x164>
    189a:	b9 c0       	rjmp	.+370    	; 0x1a0e <decodeAlteredChar+0x2d6>
    189c:	8d 34       	cpi	r24, 0x4D	; 77
    189e:	91 05       	cpc	r25, r1
    18a0:	0c f0       	brlt	.+2      	; 0x18a4 <decodeAlteredChar+0x16c>
    18a2:	b8 c0       	rjmp	.+368    	; 0x1a14 <decodeAlteredChar+0x2dc>
    18a4:	fc c0       	rjmp	.+504    	; 0x1a9e <decodeAlteredChar+0x366>
    18a6:	8a 35       	cpi	r24, 0x5A	; 90
    18a8:	91 05       	cpc	r25, r1
    18aa:	09 f4       	brne	.+2      	; 0x18ae <decodeAlteredChar+0x176>
    18ac:	bc c0       	rjmp	.+376    	; 0x1a26 <decodeAlteredChar+0x2ee>
    18ae:	8b 35       	cpi	r24, 0x5B	; 91
    18b0:	91 05       	cpc	r25, r1
    18b2:	6c f4       	brge	.+26     	; 0x18ce <decodeAlteredChar+0x196>
    18b4:	84 35       	cpi	r24, 0x54	; 84
    18b6:	91 05       	cpc	r25, r1
    18b8:	09 f4       	brne	.+2      	; 0x18bc <decodeAlteredChar+0x184>
    18ba:	b2 c0       	rjmp	.+356    	; 0x1a20 <decodeAlteredChar+0x2e8>
    18bc:	85 35       	cpi	r24, 0x55	; 85
    18be:	91 05       	cpc	r25, r1
    18c0:	09 f4       	brne	.+2      	; 0x18c4 <decodeAlteredChar+0x18c>
    18c2:	f3 c0       	rjmp	.+486    	; 0x1aaa <decodeAlteredChar+0x372>
    18c4:	82 35       	cpi	r24, 0x52	; 82
    18c6:	91 05       	cpc	r25, r1
    18c8:	09 f0       	breq	.+2      	; 0x18cc <decodeAlteredChar+0x194>
    18ca:	56 c0       	rjmp	.+172    	; 0x1978 <decodeAlteredChar+0x240>
    18cc:	a6 c0       	rjmp	.+332    	; 0x1a1a <decodeAlteredChar+0x2e2>
    18ce:	8d 35       	cpi	r24, 0x5D	; 93
    18d0:	91 05       	cpc	r25, r1
    18d2:	09 f4       	brne	.+2      	; 0x18d6 <decodeAlteredChar+0x19e>
    18d4:	ea c0       	rjmp	.+468    	; 0x1aaa <decodeAlteredChar+0x372>
    18d6:	81 36       	cpi	r24, 0x61	; 97
    18d8:	91 05       	cpc	r25, r1
    18da:	09 f4       	brne	.+2      	; 0x18de <decodeAlteredChar+0x1a6>
    18dc:	aa c0       	rjmp	.+340    	; 0x1a32 <decodeAlteredChar+0x2fa>
    18de:	8b 35       	cpi	r24, 0x5B	; 91
    18e0:	91 05       	cpc	r25, r1
    18e2:	09 f0       	breq	.+2      	; 0x18e6 <decodeAlteredChar+0x1ae>
    18e4:	49 c0       	rjmp	.+146    	; 0x1978 <decodeAlteredChar+0x240>
    18e6:	a2 c0       	rjmp	.+324    	; 0x1a2c <decodeAlteredChar+0x2f4>
    18e8:	84 37       	cpi	r24, 0x74	; 116
    18ea:	91 05       	cpc	r25, r1
    18ec:	09 f4       	brne	.+2      	; 0x18f0 <decodeAlteredChar+0x1b8>
    18ee:	bc c0       	rjmp	.+376    	; 0x1a68 <decodeAlteredChar+0x330>
    18f0:	85 37       	cpi	r24, 0x75	; 117
    18f2:	91 05       	cpc	r25, r1
    18f4:	e4 f4       	brge	.+56     	; 0x192e <decodeAlteredChar+0x1f6>
    18f6:	80 37       	cpi	r24, 0x70	; 112
    18f8:	91 05       	cpc	r25, r1
    18fa:	09 f4       	brne	.+2      	; 0x18fe <decodeAlteredChar+0x1c6>
    18fc:	a9 c0       	rjmp	.+338    	; 0x1a50 <decodeAlteredChar+0x318>
    18fe:	81 37       	cpi	r24, 0x71	; 113
    1900:	91 05       	cpc	r25, r1
    1902:	64 f4       	brge	.+24     	; 0x191c <decodeAlteredChar+0x1e4>
    1904:	8b 36       	cpi	r24, 0x6B	; 107
    1906:	91 05       	cpc	r25, r1
    1908:	09 f4       	brne	.+2      	; 0x190c <decodeAlteredChar+0x1d4>
    190a:	9c c0       	rjmp	.+312    	; 0x1a44 <decodeAlteredChar+0x30c>
    190c:	8c 36       	cpi	r24, 0x6C	; 108
    190e:	91 05       	cpc	r25, r1
    1910:	09 f4       	brne	.+2      	; 0x1914 <decodeAlteredChar+0x1dc>
    1912:	9b c0       	rjmp	.+310    	; 0x1a4a <decodeAlteredChar+0x312>
    1914:	89 36       	cpi	r24, 0x69	; 105
    1916:	91 05       	cpc	r25, r1
    1918:	79 f5       	brne	.+94     	; 0x1978 <decodeAlteredChar+0x240>
    191a:	91 c0       	rjmp	.+290    	; 0x1a3e <decodeAlteredChar+0x306>
    191c:	82 37       	cpi	r24, 0x72	; 114
    191e:	91 05       	cpc	r25, r1
    1920:	09 f4       	brne	.+2      	; 0x1924 <decodeAlteredChar+0x1ec>
    1922:	9c c0       	rjmp	.+312    	; 0x1a5c <decodeAlteredChar+0x324>
    1924:	83 37       	cpi	r24, 0x73	; 115
    1926:	91 05       	cpc	r25, r1
    1928:	0c f0       	brlt	.+2      	; 0x192c <decodeAlteredChar+0x1f4>
    192a:	9b c0       	rjmp	.+310    	; 0x1a62 <decodeAlteredChar+0x32a>
    192c:	94 c0       	rjmp	.+296    	; 0x1a56 <decodeAlteredChar+0x31e>
    192e:	8a 37       	cpi	r24, 0x7A	; 122
    1930:	91 05       	cpc	r25, r1
    1932:	09 f4       	brne	.+2      	; 0x1936 <decodeAlteredChar+0x1fe>
    1934:	a5 c0       	rjmp	.+330    	; 0x1a80 <decodeAlteredChar+0x348>
    1936:	8b 37       	cpi	r24, 0x7B	; 123
    1938:	91 05       	cpc	r25, r1
    193a:	64 f4       	brge	.+24     	; 0x1954 <decodeAlteredChar+0x21c>
    193c:	86 37       	cpi	r24, 0x76	; 118
    193e:	91 05       	cpc	r25, r1
    1940:	09 f4       	brne	.+2      	; 0x1944 <decodeAlteredChar+0x20c>
    1942:	98 c0       	rjmp	.+304    	; 0x1a74 <decodeAlteredChar+0x33c>
    1944:	86 37       	cpi	r24, 0x76	; 118
    1946:	91 05       	cpc	r25, r1
    1948:	0c f4       	brge	.+2      	; 0x194c <decodeAlteredChar+0x214>
    194a:	91 c0       	rjmp	.+290    	; 0x1a6e <decodeAlteredChar+0x336>
    194c:	89 37       	cpi	r24, 0x79	; 121
    194e:	91 05       	cpc	r25, r1
    1950:	99 f4       	brne	.+38     	; 0x1978 <decodeAlteredChar+0x240>
    1952:	93 c0       	rjmp	.+294    	; 0x1a7a <decodeAlteredChar+0x342>
    1954:	8c 37       	cpi	r24, 0x7C	; 124
    1956:	91 05       	cpc	r25, r1
    1958:	09 f4       	brne	.+2      	; 0x195c <decodeAlteredChar+0x224>
    195a:	98 c0       	rjmp	.+304    	; 0x1a8c <decodeAlteredChar+0x354>
    195c:	8c 37       	cpi	r24, 0x7C	; 124
    195e:	91 05       	cpc	r25, r1
    1960:	0c f4       	brge	.+2      	; 0x1964 <decodeAlteredChar+0x22c>
    1962:	91 c0       	rjmp	.+290    	; 0x1a86 <decodeAlteredChar+0x34e>
    1964:	8d 37       	cpi	r24, 0x7D	; 125
    1966:	91 05       	cpc	r25, r1
    1968:	09 f4       	brne	.+2      	; 0x196c <decodeAlteredChar+0x234>
    196a:	93 c0       	rjmp	.+294    	; 0x1a92 <decodeAlteredChar+0x35a>
    196c:	80 3e       	cpi	r24, 0xE0	; 224
    196e:	91 05       	cpc	r25, r1
    1970:	19 f4       	brne	.+6      	; 0x1978 <decodeAlteredChar+0x240>
    1972:	8a e0       	ldi	r24, 0x0A	; 10
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	08 95       	ret
    1978:	80 e0       	ldi	r24, 0x00	; 0
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	08 95       	ret
    197e:	89 e0       	ldi	r24, 0x09	; 9
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	08 95       	ret
		case 0x0d: return 0x09; break; //TAB(horizontalTab)
    1984:	80 e4       	ldi	r24, 0x40	; 64
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	08 95       	ret
		case 0x0e: return '¬'; break;
		case 0x15: return '@'; break;
    198a:	89 eb       	ldi	r24, 0xB9	; 185
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	08 95       	ret
		case 0x16: return '¹'; break;
    1990:	8b ea       	ldi	r24, 0xAB	; 171
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	08 95       	ret
		case 0x1a: return '«'; break;
    1996:	8f ed       	ldi	r24, 0xDF	; 223
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	08 95       	ret
		case 0x1b: return 'ß'; break;
    199c:	86 ee       	ldi	r24, 0xE6	; 230
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	08 95       	ret
		case 0x1c: return 'æ'; break;
    19a2:	82 eb       	ldi	r24, 0xB2	; 178
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	08 95       	ret
		case 0x1d: return '?'; break;
		case 0x1e: return '²'; break;
    19a8:	82 ea       	ldi	r24, 0xA2	; 162
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	08 95       	ret
		case 0x21: return '¢'; break;
    19ae:	8b eb       	ldi	r24, 0xBB	; 187
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	08 95       	ret
		case 0x22: return '»'; break;
    19b4:	80 ef       	ldi	r24, 0xF0	; 240
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	08 95       	ret
		case 0x23: return 'ð'; break;
    19ba:	83 eb       	ldi	r24, 0xB3	; 179
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	08 95       	ret
		case 0x24: return '?'; break;
		case 0x25: return '\\'; break;
		case 0x26: return '³'; break;
    19c0:	80 e2       	ldi	r24, 0x20	; 32
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	08 95       	ret
		case 0x29: return 0x20; break; //SPACE(Space)
    19c6:	86 eb       	ldi	r24, 0xB6	; 182
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	08 95       	ret
		case 0x2a: return '?'; break;
		case 0x2b: return '?'; break;
		case 0x2c: return '?'; break;
		case 0x2d: return '¶'; break;
    19cc:	8d eb       	ldi	r24, 0xBD	; 189
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	08 95       	ret
		case 0x2e: return '½'; break;
    19d2:	8e e6       	ldi	r24, 0x6E	; 110
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	08 95       	ret
		case 0x31: return 'n'; break;
    19d8:	85 eb       	ldi	r24, 0xB5	; 181
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	08 95       	ret
		case 0x33: return '?'; break;
		case 0x34: return '?'; break;
		case 0x35: return '?'; break;
		case 0x36: return '¬'; break;
//	 	case 0x39: return ';'; break;
		case 0x3a: return 'µ'; break;
    19de:	8a e6       	ldi	r24, 0x6A	; 106
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	08 95       	ret
		case 0x3b: return 'j'; break;
    19e4:	8b e7       	ldi	r24, 0x7B	; 123
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	08 95       	ret
		case 0x3c: return '?'; break;
		case 0x3d: return '{'; break;
    19ea:	8b e5       	ldi	r24, 0x5B	; 91
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	08 95       	ret
		case 0x3e: return '['; break;
    19f0:	88 ef       	ldi	r24, 0xF8	; 248
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	08 95       	ret
		case 0x41: return '?'; break;
		case 0x42: return '?'; break;
		case 0x43: return '?'; break;
		case 0x44: return 'ø'; break;
    19f6:	8d e7       	ldi	r24, 0x7D	; 125
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	08 95       	ret
		case 0x45: return '}'; break;
    19fc:	8d e5       	ldi	r24, 0x5D	; 93
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	08 95       	ret
		case 0x46: return ']'; break;
    1a02:	87 eb       	ldi	r24, 0xB7	; 183
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	08 95       	ret
		case 0x49: return '·'; break;
    1a08:	8f e5       	ldi	r24, 0x5F	; 95
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	08 95       	ret
		case 0x4a: return '_'; break;
    1a0e:	86 ed       	ldi	r24, 0xD6	; 214
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	08 95       	ret
		case 0x4b: return '?'; break;
		case 0x4c: return 'Ö'; break;
    1a14:	8e ef       	ldi	r24, 0xFE	; 254
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	08 95       	ret
		case 0x4d: return 'þ'; break;
    1a1a:	8e e5       	ldi	r24, 0x5E	; 94
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	08 95       	ret
		case 0x4e: return '\\'; break;
		case 0x52: return '^'; break;
    1a20:	82 e2       	ldi	r24, 0x22	; 34
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	08 95       	ret
		case 0x54: return '"'; break;
    1a26:	8d e0       	ldi	r24, 0x0D	; 13
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	08 95       	ret
		case 0x55: return '`'; break;
		case 0x5a: return 0x0d; break; //RETURN(CarriageReturn)
    1a2c:	8e e7       	ldi	r24, 0x7E	; 126
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	08 95       	ret
		case 0x5b: return '~'; break;
    1a32:	8c e7       	ldi	r24, 0x7C	; 124
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	08 95       	ret
		case 0x5d: return '`'; break;
		case 0x61: return '|'; break;
    1a38:	88 e0       	ldi	r24, 0x08	; 8
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	08 95       	ret
		case 0x66: return 0x08; break; //BACKSPACE(Backspace)
    1a3e:	81 e3       	ldi	r24, 0x31	; 49
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	08 95       	ret
		case 0x69: return '1'; break;
    1a44:	84 e3       	ldi	r24, 0x34	; 52
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	08 95       	ret
		case 0x6b: return '4'; break;
    1a4a:	87 e3       	ldi	r24, 0x37	; 55
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	08 95       	ret
		case 0x6c: return '7'; break;
    1a50:	80 e3       	ldi	r24, 0x30	; 48
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	08 95       	ret
		case 0x70: return '0'; break;
    1a56:	8c e2       	ldi	r24, 0x2C	; 44
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	08 95       	ret
		case 0x71: return ','; break;
    1a5c:	82 e3       	ldi	r24, 0x32	; 50
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	08 95       	ret
		case 0x72: return '2'; break;
    1a62:	85 e3       	ldi	r24, 0x35	; 53
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	08 95       	ret
		case 0x73: return '5'; break;
    1a68:	86 e3       	ldi	r24, 0x36	; 54
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	08 95       	ret
		case 0x74: return '6'; break;
    1a6e:	88 e3       	ldi	r24, 0x38	; 56
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	08 95       	ret
		case 0x75: return '8'; break;
    1a74:	8b e1       	ldi	r24, 0x1B	; 27
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	08 95       	ret
		case 0x76: return 0x1b; break; // ESC(Escape)
    1a7a:	8b e2       	ldi	r24, 0x2B	; 43
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	08 95       	ret
		case 0x79: return '+'; break;
    1a80:	83 e3       	ldi	r24, 0x33	; 51
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	08 95       	ret
		case 0x7a: return '3'; break;
    1a86:	8d e2       	ldi	r24, 0x2D	; 45
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	08 95       	ret
		case 0x7b: return '-'; break;
    1a8c:	8a e2       	ldi	r24, 0x2A	; 42
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	08 95       	ret
		case 0x7c: return '*'; break;
    1a92:	89 e3       	ldi	r24, 0x39	; 57
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	08 95       	ret
		case 0x7d: return '9'; break;
    1a98:	8c ea       	ldi	r24, 0xAC	; 172
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	08 95       	ret
    1a9e:	8f e3       	ldi	r24, 0x3F	; 63
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	08 95       	ret
    1aa4:	8c e5       	ldi	r24, 0x5C	; 92
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	08 95       	ret
    1aaa:	80 e6       	ldi	r24, 0x60	; 96
    1aac:	90 e0       	ldi	r25, 0x00	; 0
		case 0xe0: return 0x0a; break; //ENTER(NewLine)
	}
	return 0;
}
    1aae:	08 95       	ret

00001ab0 <itoa>:
    1ab0:	fb 01       	movw	r30, r22
    1ab2:	9f 01       	movw	r18, r30
    1ab4:	e8 94       	clt
    1ab6:	42 30       	cpi	r20, 0x02	; 2
    1ab8:	c4 f0       	brlt	.+48     	; 0x1aea <itoa+0x3a>
    1aba:	45 32       	cpi	r20, 0x25	; 37
    1abc:	b4 f4       	brge	.+44     	; 0x1aea <itoa+0x3a>
    1abe:	4a 30       	cpi	r20, 0x0A	; 10
    1ac0:	29 f4       	brne	.+10     	; 0x1acc <itoa+0x1c>
    1ac2:	97 fb       	bst	r25, 7
    1ac4:	1e f4       	brtc	.+6      	; 0x1acc <itoa+0x1c>
    1ac6:	90 95       	com	r25
    1ac8:	81 95       	neg	r24
    1aca:	9f 4f       	sbci	r25, 0xFF	; 255
    1acc:	64 2f       	mov	r22, r20
    1ace:	77 27       	eor	r23, r23
    1ad0:	0e 94 7d 11 	call	0x22fa	; 0x22fa <__udivmodhi4>
    1ad4:	80 5d       	subi	r24, 0xD0	; 208
    1ad6:	8a 33       	cpi	r24, 0x3A	; 58
    1ad8:	0c f0       	brlt	.+2      	; 0x1adc <itoa+0x2c>
    1ada:	89 5d       	subi	r24, 0xD9	; 217
    1adc:	81 93       	st	Z+, r24
    1ade:	cb 01       	movw	r24, r22
    1ae0:	00 97       	sbiw	r24, 0x00	; 0
    1ae2:	a1 f7       	brne	.-24     	; 0x1acc <itoa+0x1c>
    1ae4:	16 f4       	brtc	.+4      	; 0x1aea <itoa+0x3a>
    1ae6:	5d e2       	ldi	r21, 0x2D	; 45
    1ae8:	51 93       	st	Z+, r21
    1aea:	10 82       	st	Z, r1
    1aec:	c9 01       	movw	r24, r18
    1aee:	0c 94 55 10 	jmp	0x20aa	; 0x20aa <strrev>

00001af2 <sprintf>:
    1af2:	a0 e1       	ldi	r26, 0x10	; 16
    1af4:	b0 e0       	ldi	r27, 0x00	; 0
    1af6:	ef e7       	ldi	r30, 0x7F	; 127
    1af8:	fd e0       	ldi	r31, 0x0D	; 13
    1afa:	0c 94 c1 11 	jmp	0x2382	; 0x2382 <__prologue_saves__+0x1c>
    1afe:	0f 89       	ldd	r16, Y+23	; 0x17
    1b00:	18 8d       	ldd	r17, Y+24	; 0x18
    1b02:	86 e0       	ldi	r24, 0x06	; 6
    1b04:	8e 83       	std	Y+6, r24	; 0x06
    1b06:	1c 83       	std	Y+4, r17	; 0x04
    1b08:	0b 83       	std	Y+3, r16	; 0x03
    1b0a:	8f ef       	ldi	r24, 0xFF	; 255
    1b0c:	9f e7       	ldi	r25, 0x7F	; 127
    1b0e:	98 87       	std	Y+8, r25	; 0x08
    1b10:	8f 83       	std	Y+7, r24	; 0x07
    1b12:	ae 01       	movw	r20, r28
    1b14:	45 5e       	subi	r20, 0xE5	; 229
    1b16:	5f 4f       	sbci	r21, 0xFF	; 255
    1b18:	5a 83       	std	Y+2, r21	; 0x02
    1b1a:	49 83       	std	Y+1, r20	; 0x01
    1b1c:	69 8d       	ldd	r22, Y+25	; 0x19
    1b1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b20:	ce 01       	movw	r24, r28
    1b22:	03 96       	adiw	r24, 0x03	; 3
    1b24:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <vfprintf>
    1b28:	29 85       	ldd	r18, Y+9	; 0x09
    1b2a:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b2c:	02 0f       	add	r16, r18
    1b2e:	13 1f       	adc	r17, r19
    1b30:	f8 01       	movw	r30, r16
    1b32:	10 82       	st	Z, r1
    1b34:	e4 e0       	ldi	r30, 0x04	; 4
    1b36:	60 96       	adiw	r28, 0x10	; 16
    1b38:	0c 94 dd 11 	jmp	0x23ba	; 0x23ba <__epilogue_restores__+0x1c>

00001b3c <vfprintf>:
    1b3c:	a7 e1       	ldi	r26, 0x17	; 23
    1b3e:	b0 e0       	ldi	r27, 0x00	; 0
    1b40:	e4 ea       	ldi	r30, 0xA4	; 164
    1b42:	fd e0       	ldi	r31, 0x0D	; 13
    1b44:	0c 94 b3 11 	jmp	0x2366	; 0x2366 <__prologue_saves__>
    1b48:	88 24       	eor	r8, r8
    1b4a:	99 24       	eor	r9, r9
    1b4c:	54 01       	movw	r10, r8
    1b4e:	2c 01       	movw	r4, r24
    1b50:	7c 8b       	std	Y+20, r23	; 0x14
    1b52:	6b 8b       	std	Y+19, r22	; 0x13
    1b54:	3a 01       	movw	r6, r20
    1b56:	fc 01       	movw	r30, r24
    1b58:	17 82       	std	Z+7, r1	; 0x07
    1b5a:	16 82       	std	Z+6, r1	; 0x06
    1b5c:	83 81       	ldd	r24, Z+3	; 0x03
    1b5e:	81 fd       	sbrc	r24, 1
    1b60:	03 c0       	rjmp	.+6      	; 0x1b68 <vfprintf+0x2c>
    1b62:	8f ef       	ldi	r24, 0xFF	; 255
    1b64:	9f ef       	ldi	r25, 0xFF	; 255
    1b66:	7e c2       	rjmp	.+1276   	; 0x2064 <vfprintf+0x528>
    1b68:	cc 24       	eor	r12, r12
    1b6a:	dd 24       	eor	r13, r13
    1b6c:	9e 01       	movw	r18, r28
    1b6e:	2f 5f       	subi	r18, 0xFF	; 255
    1b70:	3f 4f       	sbci	r19, 0xFF	; 255
    1b72:	3f 8b       	std	Y+23, r19	; 0x17
    1b74:	2e 8b       	std	Y+22, r18	; 0x16
    1b76:	65 c2       	rjmp	.+1226   	; 0x2042 <vfprintf+0x506>
    1b78:	c0 fe       	sbrs	r12, 0
    1b7a:	48 c2       	rjmp	.+1168   	; 0x200c <vfprintf+0x4d0>
    1b7c:	83 2d       	mov	r24, r3
    1b7e:	80 53       	subi	r24, 0x30	; 48
    1b80:	8a 30       	cpi	r24, 0x0A	; 10
    1b82:	d8 f4       	brcc	.+54     	; 0x1bba <vfprintf+0x7e>
    1b84:	30 e3       	ldi	r19, 0x30	; 48
    1b86:	33 16       	cp	r3, r19
    1b88:	41 f4       	brne	.+16     	; 0x1b9a <vfprintf+0x5e>
    1b8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b8c:	88 23       	and	r24, r24
    1b8e:	29 f4       	brne	.+10     	; 0x1b9a <vfprintf+0x5e>
    1b90:	c3 fc       	sbrc	r12, 3
    1b92:	03 c0       	rjmp	.+6      	; 0x1b9a <vfprintf+0x5e>
    1b94:	e0 e0       	ldi	r30, 0x00	; 0
    1b96:	f1 e0       	ldi	r31, 0x01	; 1
    1b98:	73 c0       	rjmp	.+230    	; 0x1c80 <vfprintf+0x144>
    1b9a:	8a e0       	ldi	r24, 0x0A	; 10
    1b9c:	fd 85       	ldd	r31, Y+13	; 0x0d
    1b9e:	f8 02       	muls	r31, r24
    1ba0:	c0 01       	movw	r24, r0
    1ba2:	11 24       	eor	r1, r1
    1ba4:	80 53       	subi	r24, 0x30	; 48
    1ba6:	83 0d       	add	r24, r3
    1ba8:	8d 87       	std	Y+13, r24	; 0x0d
    1baa:	87 ff       	sbrs	r24, 7
    1bac:	02 c0       	rjmp	.+4      	; 0x1bb2 <vfprintf+0x76>
    1bae:	2f e7       	ldi	r18, 0x7F	; 127
    1bb0:	2d 87       	std	Y+13, r18	; 0x0d
    1bb2:	c3 fc       	sbrc	r12, 3
    1bb4:	40 c2       	rjmp	.+1152   	; 0x2036 <vfprintf+0x4fa>
    1bb6:	2d 84       	ldd	r2, Y+13	; 0x0d
    1bb8:	3e c2       	rjmp	.+1148   	; 0x2036 <vfprintf+0x4fa>
    1bba:	96 01       	movw	r18, r12
    1bbc:	28 70       	andi	r18, 0x08	; 8
    1bbe:	30 70       	andi	r19, 0x00	; 0
    1bc0:	c3 fe       	sbrs	r12, 3
    1bc2:	05 c0       	rjmp	.+10     	; 0x1bce <vfprintf+0x92>
    1bc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bc6:	88 23       	and	r24, r24
    1bc8:	11 f4       	brne	.+4      	; 0x1bce <vfprintf+0x92>
    1bca:	91 e0       	ldi	r25, 0x01	; 1
    1bcc:	9d 87       	std	Y+13, r25	; 0x0d
    1bce:	e7 e6       	ldi	r30, 0x67	; 103
    1bd0:	e3 15       	cp	r30, r3
    1bd2:	6c f1       	brlt	.+90     	; 0x1c2e <vfprintf+0xf2>
    1bd4:	f5 e6       	ldi	r31, 0x65	; 101
    1bd6:	3f 16       	cp	r3, r31
    1bd8:	0c f0       	brlt	.+2      	; 0x1bdc <vfprintf+0xa0>
    1bda:	68 c0       	rjmp	.+208    	; 0x1cac <vfprintf+0x170>
    1bdc:	83 e5       	ldi	r24, 0x53	; 83
    1bde:	38 16       	cp	r3, r24
    1be0:	09 f4       	brne	.+2      	; 0x1be4 <vfprintf+0xa8>
    1be2:	89 c0       	rjmp	.+274    	; 0x1cf6 <vfprintf+0x1ba>
    1be4:	83 15       	cp	r24, r3
    1be6:	bc f0       	brlt	.+46     	; 0x1c16 <vfprintf+0xda>
    1be8:	9b e2       	ldi	r25, 0x2B	; 43
    1bea:	39 16       	cp	r3, r25
    1bec:	09 f4       	brne	.+2      	; 0x1bf0 <vfprintf+0xb4>
    1bee:	42 c0       	rjmp	.+132    	; 0x1c74 <vfprintf+0x138>
    1bf0:	93 15       	cp	r25, r3
    1bf2:	4c f0       	brlt	.+18     	; 0x1c06 <vfprintf+0xca>
    1bf4:	e0 e2       	ldi	r30, 0x20	; 32
    1bf6:	3e 16       	cp	r3, r30
    1bf8:	09 f4       	brne	.+2      	; 0x1bfc <vfprintf+0xc0>
    1bfa:	40 c0       	rjmp	.+128    	; 0x1c7c <vfprintf+0x140>
    1bfc:	f3 e2       	ldi	r31, 0x23	; 35
    1bfe:	3f 16       	cp	r3, r31
    1c00:	09 f0       	breq	.+2      	; 0x1c04 <vfprintf+0xc8>
    1c02:	fc c1       	rjmp	.+1016   	; 0x1ffc <vfprintf+0x4c0>
    1c04:	43 c0       	rjmp	.+134    	; 0x1c8c <vfprintf+0x150>
    1c06:	2d e2       	ldi	r18, 0x2D	; 45
    1c08:	32 16       	cp	r3, r18
    1c0a:	e9 f1       	breq	.+122    	; 0x1c86 <vfprintf+0x14a>
    1c0c:	3e e2       	ldi	r19, 0x2E	; 46
    1c0e:	33 16       	cp	r3, r19
    1c10:	09 f0       	breq	.+2      	; 0x1c14 <vfprintf+0xd8>
    1c12:	f4 c1       	rjmp	.+1000   	; 0x1ffc <vfprintf+0x4c0>
    1c14:	40 c0       	rjmp	.+128    	; 0x1c96 <vfprintf+0x15a>
    1c16:	83 e6       	ldi	r24, 0x63	; 99
    1c18:	38 16       	cp	r3, r24
    1c1a:	09 f4       	brne	.+2      	; 0x1c1e <vfprintf+0xe2>
    1c1c:	4d c0       	rjmp	.+154    	; 0x1cb8 <vfprintf+0x17c>
    1c1e:	83 15       	cp	r24, r3
    1c20:	0c f4       	brge	.+2      	; 0x1c24 <vfprintf+0xe8>
    1c22:	81 c0       	rjmp	.+258    	; 0x1d26 <vfprintf+0x1ea>
    1c24:	98 e5       	ldi	r25, 0x58	; 88
    1c26:	39 16       	cp	r3, r25
    1c28:	09 f0       	breq	.+2      	; 0x1c2c <vfprintf+0xf0>
    1c2a:	e8 c1       	rjmp	.+976    	; 0x1ffc <vfprintf+0x4c0>
    1c2c:	20 c0       	rjmp	.+64     	; 0x1c6e <vfprintf+0x132>
    1c2e:	e0 e7       	ldi	r30, 0x70	; 112
    1c30:	3e 16       	cp	r3, r30
    1c32:	09 f4       	brne	.+2      	; 0x1c36 <vfprintf+0xfa>
    1c34:	a2 c0       	rjmp	.+324    	; 0x1d7a <vfprintf+0x23e>
    1c36:	e3 15       	cp	r30, r3
    1c38:	5c f0       	brlt	.+22     	; 0x1c50 <vfprintf+0x114>
    1c3a:	fc e6       	ldi	r31, 0x6C	; 108
    1c3c:	3f 16       	cp	r3, r31
    1c3e:	89 f1       	breq	.+98     	; 0x1ca2 <vfprintf+0x166>
    1c40:	2f e6       	ldi	r18, 0x6F	; 111
    1c42:	32 16       	cp	r3, r18
    1c44:	89 f0       	breq	.+34     	; 0x1c68 <vfprintf+0x12c>
    1c46:	39 e6       	ldi	r19, 0x69	; 105
    1c48:	33 16       	cp	r3, r19
    1c4a:	09 f0       	breq	.+2      	; 0x1c4e <vfprintf+0x112>
    1c4c:	d7 c1       	rjmp	.+942    	; 0x1ffc <vfprintf+0x4c0>
    1c4e:	6b c0       	rjmp	.+214    	; 0x1d26 <vfprintf+0x1ea>
    1c50:	85 e7       	ldi	r24, 0x75	; 117
    1c52:	38 16       	cp	r3, r24
    1c54:	09 f4       	brne	.+2      	; 0x1c58 <vfprintf+0x11c>
    1c56:	99 c0       	rjmp	.+306    	; 0x1d8a <vfprintf+0x24e>
    1c58:	98 e7       	ldi	r25, 0x78	; 120
    1c5a:	39 16       	cp	r3, r25
    1c5c:	41 f0       	breq	.+16     	; 0x1c6e <vfprintf+0x132>
    1c5e:	e3 e7       	ldi	r30, 0x73	; 115
    1c60:	3e 16       	cp	r3, r30
    1c62:	09 f0       	breq	.+2      	; 0x1c66 <vfprintf+0x12a>
    1c64:	cb c1       	rjmp	.+918    	; 0x1ffc <vfprintf+0x4c0>
    1c66:	30 c0       	rjmp	.+96     	; 0x1cc8 <vfprintf+0x18c>
    1c68:	f8 e0       	ldi	r31, 0x08	; 8
    1c6a:	f8 8b       	std	Y+16, r31	; 0x10
    1c6c:	8e c0       	rjmp	.+284    	; 0x1d8a <vfprintf+0x24e>
    1c6e:	20 e1       	ldi	r18, 0x10	; 16
    1c70:	28 8b       	std	Y+16, r18	; 0x10
    1c72:	8b c0       	rjmp	.+278    	; 0x1d8a <vfprintf+0x24e>
    1c74:	80 e1       	ldi	r24, 0x10	; 16
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	c8 2a       	or	r12, r24
    1c7a:	d9 2a       	or	r13, r25
    1c7c:	e0 e2       	ldi	r30, 0x20	; 32
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	ce 2a       	or	r12, r30
    1c82:	df 2a       	or	r13, r31
    1c84:	d8 c1       	rjmp	.+944    	; 0x2036 <vfprintf+0x4fa>
    1c86:	20 e8       	ldi	r18, 0x80	; 128
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	0d c0       	rjmp	.+26     	; 0x1ca6 <vfprintf+0x16a>
    1c8c:	80 e4       	ldi	r24, 0x40	; 64
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	c8 2a       	or	r12, r24
    1c92:	d9 2a       	or	r13, r25
    1c94:	d0 c1       	rjmp	.+928    	; 0x2036 <vfprintf+0x4fa>
    1c96:	e8 e0       	ldi	r30, 0x08	; 8
    1c98:	f0 e0       	ldi	r31, 0x00	; 0
    1c9a:	ce 2a       	or	r12, r30
    1c9c:	df 2a       	or	r13, r31
    1c9e:	1d 86       	std	Y+13, r1	; 0x0d
    1ca0:	ca c1       	rjmp	.+916    	; 0x2036 <vfprintf+0x4fa>
    1ca2:	24 e0       	ldi	r18, 0x04	; 4
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	c2 2a       	or	r12, r18
    1ca8:	d3 2a       	or	r13, r19
    1caa:	c5 c1       	rjmp	.+906    	; 0x2036 <vfprintf+0x4fa>
    1cac:	3f e3       	ldi	r19, 0x3F	; 63
    1cae:	83 2e       	mov	r8, r19
    1cb0:	2a 94       	dec	r2
    1cb2:	23 e6       	ldi	r18, 0x63	; 99
    1cb4:	32 2e       	mov	r3, r18
    1cb6:	30 c1       	rjmp	.+608    	; 0x1f18 <vfprintf+0x3dc>
    1cb8:	f3 01       	movw	r30, r6
    1cba:	80 80       	ld	r8, Z
    1cbc:	2a 94       	dec	r2
    1cbe:	22 e0       	ldi	r18, 0x02	; 2
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	62 0e       	add	r6, r18
    1cc4:	73 1e       	adc	r7, r19
    1cc6:	28 c1       	rjmp	.+592    	; 0x1f18 <vfprintf+0x3dc>
    1cc8:	f3 01       	movw	r30, r6
    1cca:	a0 81       	ld	r26, Z
    1ccc:	b1 81       	ldd	r27, Z+1	; 0x01
    1cce:	4d 01       	movw	r8, r26
    1cd0:	23 2b       	or	r18, r19
    1cd2:	49 f0       	breq	.+18     	; 0x1ce6 <vfprintf+0x1aa>
    1cd4:	fd 85       	ldd	r31, Y+13	; 0x0d
    1cd6:	6f 2f       	mov	r22, r31
    1cd8:	77 27       	eor	r23, r23
    1cda:	67 fd       	sbrc	r22, 7
    1cdc:	70 95       	com	r23
    1cde:	cd 01       	movw	r24, r26
    1ce0:	0e 94 4a 10 	call	0x2094	; 0x2094 <strnlen>
    1ce4:	18 c0       	rjmp	.+48     	; 0x1d16 <vfprintf+0x1da>
    1ce6:	fd 01       	movw	r30, r26
    1ce8:	01 90       	ld	r0, Z+
    1cea:	00 20       	and	r0, r0
    1cec:	e9 f7       	brne	.-6      	; 0x1ce8 <vfprintf+0x1ac>
    1cee:	31 97       	sbiw	r30, 0x01	; 1
    1cf0:	ea 1b       	sub	r30, r26
    1cf2:	e8 8b       	std	Y+16, r30	; 0x10
    1cf4:	11 c0       	rjmp	.+34     	; 0x1d18 <vfprintf+0x1dc>
    1cf6:	f3 01       	movw	r30, r6
    1cf8:	80 81       	ld	r24, Z
    1cfa:	91 81       	ldd	r25, Z+1	; 0x01
    1cfc:	4c 01       	movw	r8, r24
    1cfe:	23 2b       	or	r18, r19
    1d00:	41 f0       	breq	.+16     	; 0x1d12 <vfprintf+0x1d6>
    1d02:	fd 85       	ldd	r31, Y+13	; 0x0d
    1d04:	6f 2f       	mov	r22, r31
    1d06:	77 27       	eor	r23, r23
    1d08:	67 fd       	sbrc	r22, 7
    1d0a:	70 95       	com	r23
    1d0c:	0e 94 3f 10 	call	0x207e	; 0x207e <strnlen_P>
    1d10:	02 c0       	rjmp	.+4      	; 0x1d16 <vfprintf+0x1da>
    1d12:	0e 94 36 10 	call	0x206c	; 0x206c <strlen_P>
    1d16:	88 8b       	std	Y+16, r24	; 0x10
    1d18:	22 e0       	ldi	r18, 0x02	; 2
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	62 0e       	add	r6, r18
    1d1e:	73 1e       	adc	r7, r19
    1d20:	38 89       	ldd	r19, Y+16	; 0x10
    1d22:	23 1a       	sub	r2, r19
    1d24:	f9 c0       	rjmp	.+498    	; 0x1f18 <vfprintf+0x3dc>
    1d26:	c2 fe       	sbrs	r12, 2
    1d28:	08 c0       	rjmp	.+16     	; 0x1d3a <vfprintf+0x1fe>
    1d2a:	f3 01       	movw	r30, r6
    1d2c:	80 81       	ld	r24, Z
    1d2e:	91 81       	ldd	r25, Z+1	; 0x01
    1d30:	a2 81       	ldd	r26, Z+2	; 0x02
    1d32:	b3 81       	ldd	r27, Z+3	; 0x03
    1d34:	24 e0       	ldi	r18, 0x04	; 4
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	09 c0       	rjmp	.+18     	; 0x1d4c <vfprintf+0x210>
    1d3a:	f3 01       	movw	r30, r6
    1d3c:	80 81       	ld	r24, Z
    1d3e:	91 81       	ldd	r25, Z+1	; 0x01
    1d40:	aa 27       	eor	r26, r26
    1d42:	97 fd       	sbrc	r25, 7
    1d44:	a0 95       	com	r26
    1d46:	ba 2f       	mov	r27, r26
    1d48:	22 e0       	ldi	r18, 0x02	; 2
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	62 0e       	add	r6, r18
    1d4e:	73 1e       	adc	r7, r19
    1d50:	4c 01       	movw	r8, r24
    1d52:	5d 01       	movw	r10, r26
    1d54:	b7 ff       	sbrs	r27, 7
    1d56:	0c c0       	rjmp	.+24     	; 0x1d70 <vfprintf+0x234>
    1d58:	82 e0       	ldi	r24, 0x02	; 2
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	c8 2a       	or	r12, r24
    1d5e:	d9 2a       	or	r13, r25
    1d60:	b0 94       	com	r11
    1d62:	a0 94       	com	r10
    1d64:	90 94       	com	r9
    1d66:	80 94       	com	r8
    1d68:	81 1c       	adc	r8, r1
    1d6a:	91 1c       	adc	r9, r1
    1d6c:	a1 1c       	adc	r10, r1
    1d6e:	b1 1c       	adc	r11, r1
    1d70:	ef eb       	ldi	r30, 0xBF	; 191
    1d72:	ff ef       	ldi	r31, 0xFF	; 255
    1d74:	ce 22       	and	r12, r30
    1d76:	df 22       	and	r13, r31
    1d78:	21 c0       	rjmp	.+66     	; 0x1dbc <vfprintf+0x280>
    1d7a:	20 e4       	ldi	r18, 0x40	; 64
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	c2 2a       	or	r12, r18
    1d80:	d3 2a       	or	r13, r19
    1d82:	98 e7       	ldi	r25, 0x78	; 120
    1d84:	39 2e       	mov	r3, r25
    1d86:	30 e1       	ldi	r19, 0x10	; 16
    1d88:	38 8b       	std	Y+16, r19	; 0x10
    1d8a:	c2 fe       	sbrs	r12, 2
    1d8c:	08 c0       	rjmp	.+16     	; 0x1d9e <vfprintf+0x262>
    1d8e:	f3 01       	movw	r30, r6
    1d90:	80 81       	ld	r24, Z
    1d92:	91 81       	ldd	r25, Z+1	; 0x01
    1d94:	a2 81       	ldd	r26, Z+2	; 0x02
    1d96:	b3 81       	ldd	r27, Z+3	; 0x03
    1d98:	24 e0       	ldi	r18, 0x04	; 4
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	07 c0       	rjmp	.+14     	; 0x1dac <vfprintf+0x270>
    1d9e:	f3 01       	movw	r30, r6
    1da0:	80 81       	ld	r24, Z
    1da2:	91 81       	ldd	r25, Z+1	; 0x01
    1da4:	aa 27       	eor	r26, r26
    1da6:	bb 27       	eor	r27, r27
    1da8:	22 e0       	ldi	r18, 0x02	; 2
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	62 0e       	add	r6, r18
    1dae:	73 1e       	adc	r7, r19
    1db0:	4c 01       	movw	r8, r24
    1db2:	5d 01       	movw	r10, r26
    1db4:	8f ec       	ldi	r24, 0xCF	; 207
    1db6:	9f ef       	ldi	r25, 0xFF	; 255
    1db8:	c8 22       	and	r12, r24
    1dba:	d9 22       	and	r13, r25
    1dbc:	85 01       	movw	r16, r10
    1dbe:	74 01       	movw	r14, r8
    1dc0:	fe 01       	movw	r30, r28
    1dc2:	31 96       	adiw	r30, 0x01	; 1
    1dc4:	ff 87       	std	Y+15, r31	; 0x0f
    1dc6:	ee 87       	std	Y+14, r30	; 0x0e
    1dc8:	f8 89       	ldd	r31, Y+16	; 0x10
    1dca:	8f 2e       	mov	r8, r31
    1dcc:	99 24       	eor	r9, r9
    1dce:	aa 24       	eor	r10, r10
    1dd0:	bb 24       	eor	r11, r11
    1dd2:	23 2d       	mov	r18, r3
    1dd4:	21 52       	subi	r18, 0x21	; 33
    1dd6:	2d 8b       	std	Y+21, r18	; 0x15
    1dd8:	c8 01       	movw	r24, r16
    1dda:	b7 01       	movw	r22, r14
    1ddc:	a5 01       	movw	r20, r10
    1dde:	94 01       	movw	r18, r8
    1de0:	0e 94 91 11 	call	0x2322	; 0x2322 <__udivmodsi4>
    1de4:	6a 30       	cpi	r22, 0x0A	; 10
    1de6:	1c f0       	brlt	.+6      	; 0x1dee <vfprintf+0x2b2>
    1de8:	3d 89       	ldd	r19, Y+21	; 0x15
    1dea:	63 0f       	add	r22, r19
    1dec:	01 c0       	rjmp	.+2      	; 0x1df0 <vfprintf+0x2b4>
    1dee:	60 5d       	subi	r22, 0xD0	; 208
    1df0:	ee 85       	ldd	r30, Y+14	; 0x0e
    1df2:	ff 85       	ldd	r31, Y+15	; 0x0f
    1df4:	61 93       	st	Z+, r22
    1df6:	ff 87       	std	Y+15, r31	; 0x0f
    1df8:	ee 87       	std	Y+14, r30	; 0x0e
    1dfa:	c8 01       	movw	r24, r16
    1dfc:	b7 01       	movw	r22, r14
    1dfe:	a5 01       	movw	r20, r10
    1e00:	94 01       	movw	r18, r8
    1e02:	0e 94 91 11 	call	0x2322	; 0x2322 <__udivmodsi4>
    1e06:	79 01       	movw	r14, r18
    1e08:	8a 01       	movw	r16, r20
    1e0a:	21 15       	cp	r18, r1
    1e0c:	31 05       	cpc	r19, r1
    1e0e:	41 05       	cpc	r20, r1
    1e10:	51 05       	cpc	r21, r1
    1e12:	11 f7       	brne	.-60     	; 0x1dd8 <vfprintf+0x29c>
    1e14:	88 24       	eor	r8, r8
    1e16:	99 24       	eor	r9, r9
    1e18:	54 01       	movw	r10, r8
    1e1a:	4e 85       	ldd	r20, Y+14	; 0x0e
    1e1c:	fe 89       	ldd	r31, Y+22	; 0x16
    1e1e:	4f 1b       	sub	r20, r31
    1e20:	84 2e       	mov	r8, r20
    1e22:	c6 01       	movw	r24, r12
    1e24:	82 73       	andi	r24, 0x32	; 50
    1e26:	90 70       	andi	r25, 0x00	; 0
    1e28:	89 2b       	or	r24, r25
    1e2a:	09 f0       	breq	.+2      	; 0x1e2e <vfprintf+0x2f2>
    1e2c:	2a 94       	dec	r2
    1e2e:	c6 fe       	sbrs	r12, 6
    1e30:	07 c0       	rjmp	.+14     	; 0x1e40 <vfprintf+0x304>
    1e32:	28 89       	ldd	r18, Y+16	; 0x10
    1e34:	20 31       	cpi	r18, 0x10	; 16
    1e36:	11 f4       	brne	.+4      	; 0x1e3c <vfprintf+0x300>
    1e38:	82 e0       	ldi	r24, 0x02	; 2
    1e3a:	01 c0       	rjmp	.+2      	; 0x1e3e <vfprintf+0x302>
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	28 1a       	sub	r2, r24
    1e40:	c3 fe       	sbrs	r12, 3
    1e42:	12 c0       	rjmp	.+36     	; 0x1e68 <vfprintf+0x32c>
    1e44:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e46:	28 2f       	mov	r18, r24
    1e48:	33 27       	eor	r19, r19
    1e4a:	27 fd       	sbrc	r18, 7
    1e4c:	30 95       	com	r19
    1e4e:	84 2f       	mov	r24, r20
    1e50:	99 27       	eor	r25, r25
    1e52:	82 17       	cp	r24, r18
    1e54:	93 07       	cpc	r25, r19
    1e56:	2c f0       	brlt	.+10     	; 0x1e62 <vfprintf+0x326>
    1e58:	e7 ef       	ldi	r30, 0xF7	; 247
    1e5a:	ff ef       	ldi	r31, 0xFF	; 255
    1e5c:	ce 22       	and	r12, r30
    1e5e:	df 22       	and	r13, r31
    1e60:	03 c0       	rjmp	.+6      	; 0x1e68 <vfprintf+0x32c>
    1e62:	fd 85       	ldd	r31, Y+13	; 0x0d
    1e64:	f4 1b       	sub	r31, r20
    1e66:	fd 87       	std	Y+13, r31	; 0x0d
    1e68:	86 01       	movw	r16, r12
    1e6a:	08 70       	andi	r16, 0x08	; 8
    1e6c:	10 70       	andi	r17, 0x00	; 0
    1e6e:	c3 fe       	sbrs	r12, 3
    1e70:	03 c0       	rjmp	.+6      	; 0x1e78 <vfprintf+0x33c>
    1e72:	2d 85       	ldd	r18, Y+13	; 0x0d
    1e74:	22 1a       	sub	r2, r18
    1e76:	01 c0       	rjmp	.+2      	; 0x1e7a <vfprintf+0x33e>
    1e78:	24 1a       	sub	r2, r20
    1e7a:	c6 01       	movw	r24, r12
    1e7c:	80 78       	andi	r24, 0x80	; 128
    1e7e:	91 70       	andi	r25, 0x01	; 1
    1e80:	89 2b       	or	r24, r25
    1e82:	31 f0       	breq	.+12     	; 0x1e90 <vfprintf+0x354>
    1e84:	0a c0       	rjmp	.+20     	; 0x1e9a <vfprintf+0x35e>
    1e86:	b2 01       	movw	r22, r4
    1e88:	80 e2       	ldi	r24, 0x20	; 32
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	0e 94 65 10 	call	0x20ca	; 0x20ca <fputc>
    1e90:	2a 94       	dec	r2
    1e92:	82 2d       	mov	r24, r2
    1e94:	8f 5f       	subi	r24, 0xFF	; 255
    1e96:	18 16       	cp	r1, r24
    1e98:	b4 f3       	brlt	.-20     	; 0x1e86 <vfprintf+0x34a>
    1e9a:	c1 fe       	sbrs	r12, 1
    1e9c:	04 c0       	rjmp	.+8      	; 0x1ea6 <vfprintf+0x36a>
    1e9e:	b2 01       	movw	r22, r4
    1ea0:	8d e2       	ldi	r24, 0x2D	; 45
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	0b c0       	rjmp	.+22     	; 0x1ebc <vfprintf+0x380>
    1ea6:	c4 fe       	sbrs	r12, 4
    1ea8:	04 c0       	rjmp	.+8      	; 0x1eb2 <vfprintf+0x376>
    1eaa:	b2 01       	movw	r22, r4
    1eac:	8b e2       	ldi	r24, 0x2B	; 43
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	05 c0       	rjmp	.+10     	; 0x1ebc <vfprintf+0x380>
    1eb2:	c5 fe       	sbrs	r12, 5
    1eb4:	05 c0       	rjmp	.+10     	; 0x1ec0 <vfprintf+0x384>
    1eb6:	b2 01       	movw	r22, r4
    1eb8:	80 e2       	ldi	r24, 0x20	; 32
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	0e 94 65 10 	call	0x20ca	; 0x20ca <fputc>
    1ec0:	c6 fe       	sbrs	r12, 6
    1ec2:	0f c0       	rjmp	.+30     	; 0x1ee2 <vfprintf+0x3a6>
    1ec4:	b2 01       	movw	r22, r4
    1ec6:	80 e3       	ldi	r24, 0x30	; 48
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	0e 94 65 10 	call	0x20ca	; 0x20ca <fputc>
    1ece:	38 89       	ldd	r19, Y+16	; 0x10
    1ed0:	30 31       	cpi	r19, 0x10	; 16
    1ed2:	39 f4       	brne	.+14     	; 0x1ee2 <vfprintf+0x3a6>
    1ed4:	b2 01       	movw	r22, r4
    1ed6:	83 2d       	mov	r24, r3
    1ed8:	99 27       	eor	r25, r25
    1eda:	87 fd       	sbrc	r24, 7
    1edc:	90 95       	com	r25
    1ede:	0e 94 65 10 	call	0x20ca	; 0x20ca <fputc>
    1ee2:	d0 fc       	sbrc	r13, 0
    1ee4:	06 c0       	rjmp	.+12     	; 0x1ef2 <vfprintf+0x3b6>
    1ee6:	0a c0       	rjmp	.+20     	; 0x1efc <vfprintf+0x3c0>
    1ee8:	b2 01       	movw	r22, r4
    1eea:	80 e3       	ldi	r24, 0x30	; 48
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	0e 94 65 10 	call	0x20ca	; 0x20ca <fputc>
    1ef2:	2a 94       	dec	r2
    1ef4:	82 2d       	mov	r24, r2
    1ef6:	8f 5f       	subi	r24, 0xFF	; 255
    1ef8:	18 16       	cp	r1, r24
    1efa:	b4 f3       	brlt	.-20     	; 0x1ee8 <vfprintf+0x3ac>
    1efc:	01 2b       	or	r16, r17
    1efe:	31 f4       	brne	.+12     	; 0x1f0c <vfprintf+0x3d0>
    1f00:	0b c0       	rjmp	.+22     	; 0x1f18 <vfprintf+0x3dc>
    1f02:	b2 01       	movw	r22, r4
    1f04:	80 e3       	ldi	r24, 0x30	; 48
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	0e 94 65 10 	call	0x20ca	; 0x20ca <fputc>
    1f0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f0e:	81 50       	subi	r24, 0x01	; 1
    1f10:	8d 87       	std	Y+13, r24	; 0x0d
    1f12:	8f 5f       	subi	r24, 0xFF	; 255
    1f14:	18 16       	cp	r1, r24
    1f16:	ac f3       	brlt	.-22     	; 0x1f02 <vfprintf+0x3c6>
    1f18:	f6 01       	movw	r30, r12
    1f1a:	e0 78       	andi	r30, 0x80	; 128
    1f1c:	f0 70       	andi	r31, 0x00	; 0
    1f1e:	fa 8b       	std	Y+18, r31	; 0x12
    1f20:	e9 8b       	std	Y+17, r30	; 0x11
    1f22:	c7 fe       	sbrs	r12, 7
    1f24:	06 c0       	rjmp	.+12     	; 0x1f32 <vfprintf+0x3f6>
    1f26:	0a c0       	rjmp	.+20     	; 0x1f3c <vfprintf+0x400>
    1f28:	b2 01       	movw	r22, r4
    1f2a:	80 e2       	ldi	r24, 0x20	; 32
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	0e 94 65 10 	call	0x20ca	; 0x20ca <fputc>
    1f32:	2a 94       	dec	r2
    1f34:	82 2d       	mov	r24, r2
    1f36:	8f 5f       	subi	r24, 0xFF	; 255
    1f38:	18 16       	cp	r1, r24
    1f3a:	b4 f3       	brlt	.-20     	; 0x1f28 <vfprintf+0x3ec>
    1f3c:	f3 e6       	ldi	r31, 0x63	; 99
    1f3e:	3f 16       	cp	r3, r31
    1f40:	41 f4       	brne	.+16     	; 0x1f52 <vfprintf+0x416>
    1f42:	b2 01       	movw	r22, r4
    1f44:	88 2d       	mov	r24, r8
    1f46:	99 27       	eor	r25, r25
    1f48:	87 fd       	sbrc	r24, 7
    1f4a:	90 95       	com	r25
    1f4c:	0e 94 65 10 	call	0x20ca	; 0x20ca <fputc>
    1f50:	45 c0       	rjmp	.+138    	; 0x1fdc <vfprintf+0x4a0>
    1f52:	23 e7       	ldi	r18, 0x73	; 115
    1f54:	32 16       	cp	r3, r18
    1f56:	b1 f4       	brne	.+44     	; 0x1f84 <vfprintf+0x448>
    1f58:	64 01       	movw	r12, r8
    1f5a:	74 01       	movw	r14, r8
    1f5c:	18 89       	ldd	r17, Y+16	; 0x10
    1f5e:	09 c0       	rjmp	.+18     	; 0x1f72 <vfprintf+0x436>
    1f60:	f7 01       	movw	r30, r14
    1f62:	81 91       	ld	r24, Z+
    1f64:	7f 01       	movw	r14, r30
    1f66:	b2 01       	movw	r22, r4
    1f68:	99 27       	eor	r25, r25
    1f6a:	87 fd       	sbrc	r24, 7
    1f6c:	90 95       	com	r25
    1f6e:	0e 94 65 10 	call	0x20ca	; 0x20ca <fputc>
    1f72:	11 50       	subi	r17, 0x01	; 1
    1f74:	a8 f7       	brcc	.-22     	; 0x1f60 <vfprintf+0x424>
    1f76:	46 01       	movw	r8, r12
    1f78:	f8 89       	ldd	r31, Y+16	; 0x10
    1f7a:	8f 0e       	add	r8, r31
    1f7c:	91 1c       	adc	r9, r1
    1f7e:	2f ef       	ldi	r18, 0xFF	; 255
    1f80:	28 8b       	std	Y+16, r18	; 0x10
    1f82:	2c c0       	rjmp	.+88     	; 0x1fdc <vfprintf+0x4a0>
    1f84:	33 e5       	ldi	r19, 0x53	; 83
    1f86:	33 16       	cp	r3, r19
    1f88:	19 f0       	breq	.+6      	; 0x1f90 <vfprintf+0x454>
    1f8a:	0e 85       	ldd	r16, Y+14	; 0x0e
    1f8c:	1f 85       	ldd	r17, Y+15	; 0x0f
    1f8e:	1f c0       	rjmp	.+62     	; 0x1fce <vfprintf+0x492>
    1f90:	64 01       	movw	r12, r8
    1f92:	84 01       	movw	r16, r8
    1f94:	f8 88       	ldd	r15, Y+16	; 0x10
    1f96:	08 c0       	rjmp	.+16     	; 0x1fa8 <vfprintf+0x46c>
    1f98:	f8 01       	movw	r30, r16
    1f9a:	84 91       	lpm	r24, Z
    1f9c:	b2 01       	movw	r22, r4
    1f9e:	99 27       	eor	r25, r25
    1fa0:	0e 94 65 10 	call	0x20ca	; 0x20ca <fputc>
    1fa4:	0f 5f       	subi	r16, 0xFF	; 255
    1fa6:	1f 4f       	sbci	r17, 0xFF	; 255
    1fa8:	fa 94       	dec	r15
    1faa:	ff ef       	ldi	r31, 0xFF	; 255
    1fac:	ff 16       	cp	r15, r31
    1fae:	a1 f7       	brne	.-24     	; 0x1f98 <vfprintf+0x45c>
    1fb0:	46 01       	movw	r8, r12
    1fb2:	28 89       	ldd	r18, Y+16	; 0x10
    1fb4:	82 0e       	add	r8, r18
    1fb6:	91 1c       	adc	r9, r1
    1fb8:	f8 8b       	std	Y+16, r31	; 0x10
    1fba:	10 c0       	rjmp	.+32     	; 0x1fdc <vfprintf+0x4a0>
    1fbc:	f8 01       	movw	r30, r16
    1fbe:	82 91       	ld	r24, -Z
    1fc0:	8f 01       	movw	r16, r30
    1fc2:	b2 01       	movw	r22, r4
    1fc4:	99 27       	eor	r25, r25
    1fc6:	87 fd       	sbrc	r24, 7
    1fc8:	90 95       	com	r25
    1fca:	0e 94 65 10 	call	0x20ca	; 0x20ca <fputc>
    1fce:	2e 89       	ldd	r18, Y+22	; 0x16
    1fd0:	3f 89       	ldd	r19, Y+23	; 0x17
    1fd2:	02 17       	cp	r16, r18
    1fd4:	13 07       	cpc	r17, r19
    1fd6:	91 f7       	brne	.-28     	; 0x1fbc <vfprintf+0x480>
    1fd8:	1f 87       	std	Y+15, r17	; 0x0f
    1fda:	0e 87       	std	Y+14, r16	; 0x0e
    1fdc:	89 89       	ldd	r24, Y+17	; 0x11
    1fde:	9a 89       	ldd	r25, Y+18	; 0x12
    1fe0:	89 2b       	or	r24, r25
    1fe2:	31 f4       	brne	.+12     	; 0x1ff0 <vfprintf+0x4b4>
    1fe4:	26 c0       	rjmp	.+76     	; 0x2032 <vfprintf+0x4f6>
    1fe6:	b2 01       	movw	r22, r4
    1fe8:	80 e2       	ldi	r24, 0x20	; 32
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	0e 94 65 10 	call	0x20ca	; 0x20ca <fputc>
    1ff0:	2a 94       	dec	r2
    1ff2:	82 2d       	mov	r24, r2
    1ff4:	8f 5f       	subi	r24, 0xFF	; 255
    1ff6:	18 16       	cp	r1, r24
    1ff8:	b4 f3       	brlt	.-20     	; 0x1fe6 <vfprintf+0x4aa>
    1ffa:	1b c0       	rjmp	.+54     	; 0x2032 <vfprintf+0x4f6>
    1ffc:	b2 01       	movw	r22, r4
    1ffe:	83 2d       	mov	r24, r3
    2000:	99 27       	eor	r25, r25
    2002:	87 fd       	sbrc	r24, 7
    2004:	90 95       	com	r25
    2006:	0e 94 65 10 	call	0x20ca	; 0x20ca <fputc>
    200a:	13 c0       	rjmp	.+38     	; 0x2032 <vfprintf+0x4f6>
    200c:	95 e2       	ldi	r25, 0x25	; 37
    200e:	39 16       	cp	r3, r25
    2010:	41 f4       	brne	.+16     	; 0x2022 <vfprintf+0x4e6>
    2012:	ea e0       	ldi	r30, 0x0A	; 10
    2014:	e8 8b       	std	Y+16, r30	; 0x10
    2016:	22 24       	eor	r2, r2
    2018:	1d 86       	std	Y+13, r1	; 0x0d
    201a:	81 e0       	ldi	r24, 0x01	; 1
    201c:	c8 2e       	mov	r12, r24
    201e:	d1 2c       	mov	r13, r1
    2020:	0a c0       	rjmp	.+20     	; 0x2036 <vfprintf+0x4fa>
    2022:	b2 01       	movw	r22, r4
    2024:	83 2d       	mov	r24, r3
    2026:	99 27       	eor	r25, r25
    2028:	87 fd       	sbrc	r24, 7
    202a:	90 95       	com	r25
    202c:	0e 94 65 10 	call	0x20ca	; 0x20ca <fputc>
    2030:	02 c0       	rjmp	.+4      	; 0x2036 <vfprintf+0x4fa>
    2032:	cc 24       	eor	r12, r12
    2034:	dd 24       	eor	r13, r13
    2036:	2b 89       	ldd	r18, Y+19	; 0x13
    2038:	3c 89       	ldd	r19, Y+20	; 0x14
    203a:	2f 5f       	subi	r18, 0xFF	; 255
    203c:	3f 4f       	sbci	r19, 0xFF	; 255
    203e:	3c 8b       	std	Y+20, r19	; 0x14
    2040:	2b 8b       	std	Y+19, r18	; 0x13
    2042:	f2 01       	movw	r30, r4
    2044:	83 81       	ldd	r24, Z+3	; 0x03
    2046:	83 ff       	sbrs	r24, 3
    2048:	04 c0       	rjmp	.+8      	; 0x2052 <vfprintf+0x516>
    204a:	eb 89       	ldd	r30, Y+19	; 0x13
    204c:	fc 89       	ldd	r31, Y+20	; 0x14
    204e:	34 90       	lpm	r3, Z
    2050:	03 c0       	rjmp	.+6      	; 0x2058 <vfprintf+0x51c>
    2052:	eb 89       	ldd	r30, Y+19	; 0x13
    2054:	fc 89       	ldd	r31, Y+20	; 0x14
    2056:	30 80       	ld	r3, Z
    2058:	33 20       	and	r3, r3
    205a:	09 f0       	breq	.+2      	; 0x205e <vfprintf+0x522>
    205c:	8d cd       	rjmp	.-1254   	; 0x1b78 <vfprintf+0x3c>
    205e:	f2 01       	movw	r30, r4
    2060:	86 81       	ldd	r24, Z+6	; 0x06
    2062:	97 81       	ldd	r25, Z+7	; 0x07
    2064:	e2 e1       	ldi	r30, 0x12	; 18
    2066:	67 96       	adiw	r28, 0x17	; 23
    2068:	0c 94 cf 11 	jmp	0x239e	; 0x239e <__epilogue_restores__>

0000206c <strlen_P>:
    206c:	fc 01       	movw	r30, r24
    206e:	05 90       	lpm	r0, Z+
    2070:	00 20       	and	r0, r0
    2072:	e9 f7       	brne	.-6      	; 0x206e <strlen_P+0x2>
    2074:	80 95       	com	r24
    2076:	90 95       	com	r25
    2078:	8e 0f       	add	r24, r30
    207a:	9f 1f       	adc	r25, r31
    207c:	08 95       	ret

0000207e <strnlen_P>:
    207e:	fc 01       	movw	r30, r24
    2080:	05 90       	lpm	r0, Z+
    2082:	61 50       	subi	r22, 0x01	; 1
    2084:	70 40       	sbci	r23, 0x00	; 0
    2086:	01 10       	cpse	r0, r1
    2088:	d8 f7       	brcc	.-10     	; 0x2080 <strnlen_P+0x2>
    208a:	80 95       	com	r24
    208c:	90 95       	com	r25
    208e:	8e 0f       	add	r24, r30
    2090:	9f 1f       	adc	r25, r31
    2092:	08 95       	ret

00002094 <strnlen>:
    2094:	fc 01       	movw	r30, r24
    2096:	61 50       	subi	r22, 0x01	; 1
    2098:	70 40       	sbci	r23, 0x00	; 0
    209a:	01 90       	ld	r0, Z+
    209c:	01 10       	cpse	r0, r1
    209e:	d8 f7       	brcc	.-10     	; 0x2096 <strnlen+0x2>
    20a0:	80 95       	com	r24
    20a2:	90 95       	com	r25
    20a4:	8e 0f       	add	r24, r30
    20a6:	9f 1f       	adc	r25, r31
    20a8:	08 95       	ret

000020aa <strrev>:
    20aa:	dc 01       	movw	r26, r24
    20ac:	fc 01       	movw	r30, r24
    20ae:	67 2f       	mov	r22, r23
    20b0:	71 91       	ld	r23, Z+
    20b2:	77 23       	and	r23, r23
    20b4:	e1 f7       	brne	.-8      	; 0x20ae <strrev+0x4>
    20b6:	32 97       	sbiw	r30, 0x02	; 2
    20b8:	04 c0       	rjmp	.+8      	; 0x20c2 <strrev+0x18>
    20ba:	7c 91       	ld	r23, X
    20bc:	6d 93       	st	X+, r22
    20be:	70 83       	st	Z, r23
    20c0:	62 91       	ld	r22, -Z
    20c2:	ae 17       	cp	r26, r30
    20c4:	bf 07       	cpc	r27, r31
    20c6:	c8 f3       	brcs	.-14     	; 0x20ba <strrev+0x10>
    20c8:	08 95       	ret

000020ca <fputc>:
    20ca:	0f 93       	push	r16
    20cc:	1f 93       	push	r17
    20ce:	cf 93       	push	r28
    20d0:	df 93       	push	r29
    20d2:	8c 01       	movw	r16, r24
    20d4:	eb 01       	movw	r28, r22
    20d6:	8b 81       	ldd	r24, Y+3	; 0x03
    20d8:	99 27       	eor	r25, r25
    20da:	81 ff       	sbrs	r24, 1
    20dc:	1b c0       	rjmp	.+54     	; 0x2114 <fputc+0x4a>
    20de:	82 ff       	sbrs	r24, 2
    20e0:	0d c0       	rjmp	.+26     	; 0x20fc <fputc+0x32>
    20e2:	2e 81       	ldd	r18, Y+6	; 0x06
    20e4:	3f 81       	ldd	r19, Y+7	; 0x07
    20e6:	8c 81       	ldd	r24, Y+4	; 0x04
    20e8:	9d 81       	ldd	r25, Y+5	; 0x05
    20ea:	28 17       	cp	r18, r24
    20ec:	39 07       	cpc	r19, r25
    20ee:	64 f4       	brge	.+24     	; 0x2108 <fputc+0x3e>
    20f0:	e8 81       	ld	r30, Y
    20f2:	f9 81       	ldd	r31, Y+1	; 0x01
    20f4:	01 93       	st	Z+, r16
    20f6:	f9 83       	std	Y+1, r31	; 0x01
    20f8:	e8 83       	st	Y, r30
    20fa:	06 c0       	rjmp	.+12     	; 0x2108 <fputc+0x3e>
    20fc:	e8 85       	ldd	r30, Y+8	; 0x08
    20fe:	f9 85       	ldd	r31, Y+9	; 0x09
    2100:	80 2f       	mov	r24, r16
    2102:	09 95       	icall
    2104:	89 2b       	or	r24, r25
    2106:	31 f4       	brne	.+12     	; 0x2114 <fputc+0x4a>
    2108:	8e 81       	ldd	r24, Y+6	; 0x06
    210a:	9f 81       	ldd	r25, Y+7	; 0x07
    210c:	01 96       	adiw	r24, 0x01	; 1
    210e:	9f 83       	std	Y+7, r25	; 0x07
    2110:	8e 83       	std	Y+6, r24	; 0x06
    2112:	02 c0       	rjmp	.+4      	; 0x2118 <fputc+0x4e>
    2114:	0f ef       	ldi	r16, 0xFF	; 255
    2116:	1f ef       	ldi	r17, 0xFF	; 255
    2118:	c8 01       	movw	r24, r16
    211a:	df 91       	pop	r29
    211c:	cf 91       	pop	r28
    211e:	1f 91       	pop	r17
    2120:	0f 91       	pop	r16
    2122:	08 95       	ret

00002124 <__fixsfsi>:
    2124:	97 fb       	bst	r25, 7
    2126:	70 d0       	rcall	.+224    	; 0x2208 <__fp_split1>
    2128:	9f 37       	cpi	r25, 0x7F	; 127
    212a:	38 f0       	brcs	.+14     	; 0x213a <__fixsfsi+0x16>
    212c:	fe e9       	ldi	r31, 0x9E	; 158
    212e:	f9 1b       	sub	r31, r25
    2130:	98 2f       	mov	r25, r24
    2132:	87 2f       	mov	r24, r23
    2134:	76 2f       	mov	r23, r22
    2136:	6b 2f       	mov	r22, r27
    2138:	05 c0       	rjmp	.+10     	; 0x2144 <__fixsfsi+0x20>
    213a:	83 c0       	rjmp	.+262    	; 0x2242 <__fp_zero>
    213c:	96 95       	lsr	r25
    213e:	87 95       	ror	r24
    2140:	77 95       	ror	r23
    2142:	67 95       	ror	r22
    2144:	f1 50       	subi	r31, 0x01	; 1
    2146:	d0 f7       	brcc	.-12     	; 0x213c <__fixsfsi+0x18>
    2148:	3e f4       	brtc	.+14     	; 0x2158 <__fp_lneg+0xe>

0000214a <__fp_lneg>:
    214a:	90 95       	com	r25
    214c:	80 95       	com	r24
    214e:	70 95       	com	r23
    2150:	61 95       	neg	r22
    2152:	7f 4f       	sbci	r23, 0xFF	; 255
    2154:	8f 4f       	sbci	r24, 0xFF	; 255
    2156:	9f 4f       	sbci	r25, 0xFF	; 255
    2158:	08 95       	ret

0000215a <__floatunssisf>:
    215a:	e8 94       	clt
    215c:	03 c0       	rjmp	.+6      	; 0x2164 <__floatsisf+0x6>

0000215e <__floatsisf>:
    215e:	97 fb       	bst	r25, 7
    2160:	0e f4       	brtc	.+2      	; 0x2164 <__floatsisf+0x6>
    2162:	f3 df       	rcall	.-26     	; 0x214a <__fp_lneg>
    2164:	b6 2f       	mov	r27, r22
    2166:	67 2f       	mov	r22, r23
    2168:	78 2f       	mov	r23, r24
    216a:	89 2f       	mov	r24, r25
    216c:	9e e9       	ldi	r25, 0x9E	; 158
    216e:	00 24       	eor	r0, r0
    2170:	27 c0       	rjmp	.+78     	; 0x21c0 <__fp_merge>

00002172 <__eqsf2>:
    2172:	0e d0       	rcall	.+28     	; 0x2190 <.fp_cmp>
    2174:	5e f0       	brts	.+22     	; 0x218c <__cmpsf2+0xe>
    2176:	04 c0       	rjmp	.+8      	; 0x2180 <__cmpsf2+0x2>

00002178 <__gesf2>:
    2178:	0b d0       	rcall	.+22     	; 0x2190 <.fp_cmp>
    217a:	26 f0       	brts	.+8      	; 0x2184 <__cmpsf2+0x6>
    217c:	01 c0       	rjmp	.+2      	; 0x2180 <__cmpsf2+0x2>

0000217e <__cmpsf2>:
    217e:	08 d0       	rcall	.+16     	; 0x2190 <.fp_cmp>
    2180:	19 f0       	breq	.+6      	; 0x2188 <__cmpsf2+0xa>
    2182:	20 f4       	brcc	.+8      	; 0x218c <__cmpsf2+0xe>
    2184:	8f ef       	ldi	r24, 0xFF	; 255
    2186:	08 95       	ret
    2188:	80 e0       	ldi	r24, 0x00	; 0
    218a:	08 95       	ret
    218c:	81 e0       	ldi	r24, 0x01	; 1
    218e:	08 95       	ret

00002190 <.fp_cmp>:
    2190:	97 fb       	bst	r25, 7
    2192:	09 2e       	mov	r0, r25
    2194:	05 26       	eor	r0, r21
    2196:	00 f8       	bld	r0, 0
    2198:	68 94       	set
    219a:	2d d0       	rcall	.+90     	; 0x21f6 <__fp_split2>
    219c:	e8 94       	clt
    219e:	07 fc       	sbrc	r0, 7
    21a0:	07 c0       	rjmp	.+14     	; 0x21b0 <.fp_cmp+0x20>
    21a2:	62 17       	cp	r22, r18
    21a4:	73 07       	cpc	r23, r19
    21a6:	84 07       	cpc	r24, r20
    21a8:	95 07       	cpc	r25, r21
    21aa:	21 f0       	breq	.+8      	; 0x21b4 <.fp_cmp+0x24>
    21ac:	08 f4       	brcc	.+2      	; 0x21b0 <.fp_cmp+0x20>
    21ae:	00 94       	com	r0
    21b0:	07 94       	ror	r0
    21b2:	98 94       	clz
    21b4:	08 95       	ret
    21b6:	9a 95       	dec	r25
    21b8:	bb 0f       	add	r27, r27
    21ba:	66 1f       	adc	r22, r22
    21bc:	77 1f       	adc	r23, r23
    21be:	88 1f       	adc	r24, r24

000021c0 <__fp_merge>:
    21c0:	11 24       	eor	r1, r1
    21c2:	99 23       	and	r25, r25
    21c4:	a1 f0       	breq	.+40     	; 0x21ee <__fp_merge+0x2e>
    21c6:	88 23       	and	r24, r24
    21c8:	b2 f7       	brpl	.-20     	; 0x21b6 <.fp_cmp+0x26>
    21ca:	9f 3f       	cpi	r25, 0xFF	; 255
    21cc:	59 f0       	breq	.+22     	; 0x21e4 <__fp_merge+0x24>
    21ce:	bb 0f       	add	r27, r27
    21d0:	48 f4       	brcc	.+18     	; 0x21e4 <__fp_merge+0x24>
    21d2:	21 f4       	brne	.+8      	; 0x21dc <__fp_merge+0x1c>
    21d4:	00 20       	and	r0, r0
    21d6:	11 f4       	brne	.+4      	; 0x21dc <__fp_merge+0x1c>
    21d8:	60 ff       	sbrs	r22, 0
    21da:	04 c0       	rjmp	.+8      	; 0x21e4 <__fp_merge+0x24>
    21dc:	6f 5f       	subi	r22, 0xFF	; 255
    21de:	7f 4f       	sbci	r23, 0xFF	; 255
    21e0:	8f 4f       	sbci	r24, 0xFF	; 255
    21e2:	9f 4f       	sbci	r25, 0xFF	; 255
    21e4:	88 1f       	adc	r24, r24
    21e6:	97 95       	ror	r25
    21e8:	87 95       	ror	r24
    21ea:	97 f9       	bld	r25, 7
    21ec:	08 95       	ret
    21ee:	29 c0       	rjmp	.+82     	; 0x2242 <__fp_zero>

000021f0 <__fp_split3>:
    21f0:	05 2e       	mov	r0, r21
    21f2:	09 26       	eor	r0, r25
    21f4:	07 fa       	bst	r0, 7

000021f6 <__fp_split2>:
    21f6:	44 0f       	add	r20, r20
    21f8:	55 1f       	adc	r21, r21
    21fa:	5f 3f       	cpi	r21, 0xFF	; 255
    21fc:	79 f0       	breq	.+30     	; 0x221c <__fp_split1+0x14>
    21fe:	aa 27       	eor	r26, r26
    2200:	a5 17       	cp	r26, r21
    2202:	08 f0       	brcs	.+2      	; 0x2206 <__fp_split2+0x10>
    2204:	51 e0       	ldi	r21, 0x01	; 1
    2206:	47 95       	ror	r20

00002208 <__fp_split1>:
    2208:	88 0f       	add	r24, r24
    220a:	99 1f       	adc	r25, r25
    220c:	9f 3f       	cpi	r25, 0xFF	; 255
    220e:	31 f0       	breq	.+12     	; 0x221c <__fp_split1+0x14>
    2210:	bb 27       	eor	r27, r27
    2212:	b9 17       	cp	r27, r25
    2214:	08 f0       	brcs	.+2      	; 0x2218 <__fp_split1+0x10>
    2216:	91 e0       	ldi	r25, 0x01	; 1
    2218:	87 95       	ror	r24
    221a:	08 95       	ret
    221c:	9f 91       	pop	r25
    221e:	9f 91       	pop	r25
    2220:	11 24       	eor	r1, r1
    2222:	5c c0       	rjmp	.+184    	; 0x22dc <__fp_nan>

00002224 <__fp_split_a>:
    2224:	97 fb       	bst	r25, 7
    2226:	88 0f       	add	r24, r24
    2228:	99 1f       	adc	r25, r25
    222a:	9f 3f       	cpi	r25, 0xFF	; 255
    222c:	31 f0       	breq	.+12     	; 0x223a <__fp_split_a+0x16>
    222e:	bb 27       	eor	r27, r27
    2230:	b9 17       	cp	r27, r25
    2232:	08 f0       	brcs	.+2      	; 0x2236 <__fp_split_a+0x12>
    2234:	91 e0       	ldi	r25, 0x01	; 1
    2236:	87 95       	ror	r24
    2238:	08 95       	ret
    223a:	9f 91       	pop	r25
    223c:	9f 91       	pop	r25
    223e:	11 24       	eor	r1, r1
    2240:	4d c0       	rjmp	.+154    	; 0x22dc <__fp_nan>

00002242 <__fp_zero>:
    2242:	66 27       	eor	r22, r22
    2244:	77 27       	eor	r23, r23
    2246:	88 27       	eor	r24, r24

00002248 <__fp_zerox>:
    2248:	99 27       	eor	r25, r25
    224a:	08 95       	ret

0000224c <__mulsf3>:
    224c:	d1 df       	rcall	.-94     	; 0x21f0 <__fp_split3>
    224e:	01 d0       	rcall	.+2      	; 0x2252 <__mulsf3x>
    2250:	b7 cf       	rjmp	.-146    	; 0x21c0 <__fp_merge>

00002252 <__mulsf3x>:
    2252:	99 23       	and	r25, r25
    2254:	39 f0       	breq	.+14     	; 0x2264 <__mulsf3x+0x12>
    2256:	55 23       	and	r21, r21
    2258:	29 f0       	breq	.+10     	; 0x2264 <__mulsf3x+0x12>
    225a:	9f 57       	subi	r25, 0x7F	; 127
    225c:	5f 57       	subi	r21, 0x7F	; 127
    225e:	95 0f       	add	r25, r21
    2260:	13 f4       	brvc	.+4      	; 0x2266 <__mulsf3x+0x14>
    2262:	9a f1       	brmi	.+102    	; 0x22ca <__mulsf3x+0x78>
    2264:	f1 cf       	rjmp	.-30     	; 0x2248 <__fp_zerox>
    2266:	91 58       	subi	r25, 0x81	; 129
    2268:	9f 3f       	cpi	r25, 0xFF	; 255
    226a:	e1 f3       	breq	.-8      	; 0x2264 <__mulsf3x+0x12>
    226c:	62 9f       	mul	r22, r18
    226e:	a1 2d       	mov	r26, r1
    2270:	0f 92       	push	r0
    2272:	bb 27       	eor	r27, r27
    2274:	63 9f       	mul	r22, r19
    2276:	a0 0d       	add	r26, r0
    2278:	b1 1d       	adc	r27, r1
    227a:	ee 27       	eor	r30, r30
    227c:	72 9f       	mul	r23, r18
    227e:	a0 0d       	add	r26, r0
    2280:	b1 1d       	adc	r27, r1
    2282:	ee 1f       	adc	r30, r30
    2284:	af 93       	push	r26
    2286:	aa 27       	eor	r26, r26
    2288:	64 9f       	mul	r22, r20
    228a:	b0 0d       	add	r27, r0
    228c:	e1 1d       	adc	r30, r1
    228e:	73 9f       	mul	r23, r19
    2290:	b0 0d       	add	r27, r0
    2292:	e1 1d       	adc	r30, r1
    2294:	aa 1f       	adc	r26, r26
    2296:	66 27       	eor	r22, r22
    2298:	82 9f       	mul	r24, r18
    229a:	b0 0d       	add	r27, r0
    229c:	e1 1d       	adc	r30, r1
    229e:	a6 1f       	adc	r26, r22
    22a0:	55 27       	eor	r21, r21
    22a2:	74 9f       	mul	r23, r20
    22a4:	e0 0d       	add	r30, r0
    22a6:	a1 1d       	adc	r26, r1
    22a8:	55 1f       	adc	r21, r21
    22aa:	83 9f       	mul	r24, r19
    22ac:	e0 0d       	add	r30, r0
    22ae:	a1 1d       	adc	r26, r1
    22b0:	56 1f       	adc	r21, r22
    22b2:	84 9f       	mul	r24, r20
    22b4:	a0 0d       	add	r26, r0
    22b6:	51 1d       	adc	r21, r1
    22b8:	85 2f       	mov	r24, r21
    22ba:	7a 2f       	mov	r23, r26
    22bc:	6e 2f       	mov	r22, r30
    22be:	1f 90       	pop	r1
    22c0:	0f 90       	pop	r0
    22c2:	88 23       	and	r24, r24
    22c4:	1a f4       	brpl	.+6      	; 0x22cc <__mulsf3x+0x7a>
    22c6:	93 95       	inc	r25
    22c8:	39 f4       	brne	.+14     	; 0x22d8 <__mulsf3x+0x86>
    22ca:	08 c0       	rjmp	.+16     	; 0x22dc <__fp_nan>
    22cc:	00 0c       	add	r0, r0
    22ce:	11 1c       	adc	r1, r1
    22d0:	bb 1f       	adc	r27, r27
    22d2:	66 1f       	adc	r22, r22
    22d4:	77 1f       	adc	r23, r23
    22d6:	88 1f       	adc	r24, r24
    22d8:	01 28       	or	r0, r1
    22da:	08 95       	ret

000022dc <__fp_nan>:
    22dc:	9f ef       	ldi	r25, 0xFF	; 255
    22de:	80 ec       	ldi	r24, 0xC0	; 192
    22e0:	08 95       	ret

000022e2 <__udivmodqi4>:
    22e2:	99 1b       	sub	r25, r25
    22e4:	79 e0       	ldi	r23, 0x09	; 9
    22e6:	04 c0       	rjmp	.+8      	; 0x22f0 <__udivmodqi4_ep>

000022e8 <__udivmodqi4_loop>:
    22e8:	99 1f       	adc	r25, r25
    22ea:	96 17       	cp	r25, r22
    22ec:	08 f0       	brcs	.+2      	; 0x22f0 <__udivmodqi4_ep>
    22ee:	96 1b       	sub	r25, r22

000022f0 <__udivmodqi4_ep>:
    22f0:	88 1f       	adc	r24, r24
    22f2:	7a 95       	dec	r23
    22f4:	c9 f7       	brne	.-14     	; 0x22e8 <__udivmodqi4_loop>
    22f6:	80 95       	com	r24
    22f8:	08 95       	ret

000022fa <__udivmodhi4>:
    22fa:	aa 1b       	sub	r26, r26
    22fc:	bb 1b       	sub	r27, r27
    22fe:	51 e1       	ldi	r21, 0x11	; 17
    2300:	07 c0       	rjmp	.+14     	; 0x2310 <__udivmodhi4_ep>

00002302 <__udivmodhi4_loop>:
    2302:	aa 1f       	adc	r26, r26
    2304:	bb 1f       	adc	r27, r27
    2306:	a6 17       	cp	r26, r22
    2308:	b7 07       	cpc	r27, r23
    230a:	10 f0       	brcs	.+4      	; 0x2310 <__udivmodhi4_ep>
    230c:	a6 1b       	sub	r26, r22
    230e:	b7 0b       	sbc	r27, r23

00002310 <__udivmodhi4_ep>:
    2310:	88 1f       	adc	r24, r24
    2312:	99 1f       	adc	r25, r25
    2314:	5a 95       	dec	r21
    2316:	a9 f7       	brne	.-22     	; 0x2302 <__udivmodhi4_loop>
    2318:	80 95       	com	r24
    231a:	90 95       	com	r25
    231c:	bc 01       	movw	r22, r24
    231e:	cd 01       	movw	r24, r26
    2320:	08 95       	ret

00002322 <__udivmodsi4>:
    2322:	a1 e2       	ldi	r26, 0x21	; 33
    2324:	1a 2e       	mov	r1, r26
    2326:	aa 1b       	sub	r26, r26
    2328:	bb 1b       	sub	r27, r27
    232a:	fd 01       	movw	r30, r26
    232c:	0d c0       	rjmp	.+26     	; 0x2348 <__udivmodsi4_ep>

0000232e <__udivmodsi4_loop>:
    232e:	aa 1f       	adc	r26, r26
    2330:	bb 1f       	adc	r27, r27
    2332:	ee 1f       	adc	r30, r30
    2334:	ff 1f       	adc	r31, r31
    2336:	a2 17       	cp	r26, r18
    2338:	b3 07       	cpc	r27, r19
    233a:	e4 07       	cpc	r30, r20
    233c:	f5 07       	cpc	r31, r21
    233e:	20 f0       	brcs	.+8      	; 0x2348 <__udivmodsi4_ep>
    2340:	a2 1b       	sub	r26, r18
    2342:	b3 0b       	sbc	r27, r19
    2344:	e4 0b       	sbc	r30, r20
    2346:	f5 0b       	sbc	r31, r21

00002348 <__udivmodsi4_ep>:
    2348:	66 1f       	adc	r22, r22
    234a:	77 1f       	adc	r23, r23
    234c:	88 1f       	adc	r24, r24
    234e:	99 1f       	adc	r25, r25
    2350:	1a 94       	dec	r1
    2352:	69 f7       	brne	.-38     	; 0x232e <__udivmodsi4_loop>
    2354:	60 95       	com	r22
    2356:	70 95       	com	r23
    2358:	80 95       	com	r24
    235a:	90 95       	com	r25
    235c:	9b 01       	movw	r18, r22
    235e:	ac 01       	movw	r20, r24
    2360:	bd 01       	movw	r22, r26
    2362:	cf 01       	movw	r24, r30
    2364:	08 95       	ret

00002366 <__prologue_saves__>:
    2366:	2f 92       	push	r2
    2368:	3f 92       	push	r3
    236a:	4f 92       	push	r4
    236c:	5f 92       	push	r5
    236e:	6f 92       	push	r6
    2370:	7f 92       	push	r7
    2372:	8f 92       	push	r8
    2374:	9f 92       	push	r9
    2376:	af 92       	push	r10
    2378:	bf 92       	push	r11
    237a:	cf 92       	push	r12
    237c:	df 92       	push	r13
    237e:	ef 92       	push	r14
    2380:	ff 92       	push	r15
    2382:	0f 93       	push	r16
    2384:	1f 93       	push	r17
    2386:	cf 93       	push	r28
    2388:	df 93       	push	r29
    238a:	cd b7       	in	r28, 0x3d	; 61
    238c:	de b7       	in	r29, 0x3e	; 62
    238e:	ca 1b       	sub	r28, r26
    2390:	db 0b       	sbc	r29, r27
    2392:	0f b6       	in	r0, 0x3f	; 63
    2394:	f8 94       	cli
    2396:	de bf       	out	0x3e, r29	; 62
    2398:	0f be       	out	0x3f, r0	; 63
    239a:	cd bf       	out	0x3d, r28	; 61
    239c:	09 94       	ijmp

0000239e <__epilogue_restores__>:
    239e:	2a 88       	ldd	r2, Y+18	; 0x12
    23a0:	39 88       	ldd	r3, Y+17	; 0x11
    23a2:	48 88       	ldd	r4, Y+16	; 0x10
    23a4:	5f 84       	ldd	r5, Y+15	; 0x0f
    23a6:	6e 84       	ldd	r6, Y+14	; 0x0e
    23a8:	7d 84       	ldd	r7, Y+13	; 0x0d
    23aa:	8c 84       	ldd	r8, Y+12	; 0x0c
    23ac:	9b 84       	ldd	r9, Y+11	; 0x0b
    23ae:	aa 84       	ldd	r10, Y+10	; 0x0a
    23b0:	b9 84       	ldd	r11, Y+9	; 0x09
    23b2:	c8 84       	ldd	r12, Y+8	; 0x08
    23b4:	df 80       	ldd	r13, Y+7	; 0x07
    23b6:	ee 80       	ldd	r14, Y+6	; 0x06
    23b8:	fd 80       	ldd	r15, Y+5	; 0x05
    23ba:	0c 81       	ldd	r16, Y+4	; 0x04
    23bc:	1b 81       	ldd	r17, Y+3	; 0x03
    23be:	aa 81       	ldd	r26, Y+2	; 0x02
    23c0:	b9 81       	ldd	r27, Y+1	; 0x01
    23c2:	ce 0f       	add	r28, r30
    23c4:	d1 1d       	adc	r29, r1
    23c6:	0f b6       	in	r0, 0x3f	; 63
    23c8:	f8 94       	cli
    23ca:	de bf       	out	0x3e, r29	; 62
    23cc:	0f be       	out	0x3f, r0	; 63
    23ce:	cd bf       	out	0x3d, r28	; 61
    23d0:	ed 01       	movw	r28, r26
    23d2:	08 95       	ret

000023d4 <_exit>:
    23d4:	ff cf       	rjmp	.-2      	; 0x23d4 <_exit>
